<?php
/**
 * BasicCustomer
 *
 * PHP version 5
 *
 * @category Class
 * @package  Domainrobot
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Domainrobot JSON API
 *
 * Domainrobot JSON API for managing: Domains, SSL                                             Certificates, DNS and                                             much more.
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.16-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Domainrobot\Model;

use \ArrayAccess;
use \Domainrobot\ObjectSerializer;

/**
 * BasicCustomer Class Doc Comment
 *
 * @category Class
 * @package  Domainrobot
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class BasicCustomer implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'BasicCustomer';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'number' => 'int',
        'client' => 'string',
        'group' => 'int',
        'name' => 'string',
        'type' => '\Domainrobot\Model\CustomerType',
        'organization' => 'string',
        'organization2' => 'string',
        'vatNumber' => 'string',
        'gender' => '\Domainrobot\Model\GenderConstants',
        'title' => 'string',
        'addressLines' => 'string[]',
        'city' => 'string',
        'state' => 'string',
        'country' => 'string',
        'phone' => 'string',
        'fax' => 'string',
        'emails' => 'string[]',
        'billingEmails' => 'string[]',
        'payment' => '\Domainrobot\Model\PaymentConstants',
        'paymentMode' => 'string',
        'paymentCurrency' => 'string',
        'paymentCurrencyExchangeFee' => 'float',
        'discount' => 'int',
        'discountNgtld' => 'int',
        'discountCertificate' => 'int',
        'discountValid' => '\DateTime',
        'invoiceLanguage' => 'string',
        'taxable' => 'bool',
        'card' => '\Domainrobot\Model\Card',
        'contracts' => '\Domainrobot\Model\CustomerContract[]',
        'billingUsers' => '\Domainrobot\Model\BasicUser[]',
        'comments' => '\Domainrobot\Model\Comment[]',
        'contacts' => '\Domainrobot\Model\BasicCustomerContact[]',
        'account' => '\Domainrobot\Model\Account',
        'priceListEntities' => '\Domainrobot\Model\CustomerPriceList[]',
        'addPriceListEntities' => '\Domainrobot\Model\CustomerPriceList[]',
        'remPriceListEntities' => '\Domainrobot\Model\CustomerPriceList[]',
        'clearAccount' => '\Domainrobot\Model\ClearAccountPeriod',
        'autodelete' => 'bool',
        'pending' => 'bool',
        'verifications' => '\Domainrobot\Model\BasicCustomerSpoolVerification[]',
        'tags' => '\Domainrobot\Model\CustomerTag[]',
        'pin' => 'string',
        'persistent' => '\Domainrobot\Model\BasicCustomer',
        'active' => 'bool',
        'fname' => 'string',
        'lname' => 'string',
        'pcode' => 'string',
        'technical' => '\Domainrobot\Model\TechnicalCustomer',
        'sepa' => '\Domainrobot\Model\SEPAMandate'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'number' => 'int64',
        'client' => null,
        'group' => 'int64',
        'name' => null,
        'type' => null,
        'organization' => null,
        'organization2' => null,
        'vatNumber' => null,
        'gender' => null,
        'title' => null,
        'addressLines' => null,
        'city' => null,
        'state' => null,
        'country' => null,
        'phone' => null,
        'fax' => null,
        'emails' => null,
        'billingEmails' => null,
        'payment' => null,
        'paymentMode' => null,
        'paymentCurrency' => null,
        'paymentCurrencyExchangeFee' => 'float',
        'discount' => 'int32',
        'discountNgtld' => 'int32',
        'discountCertificate' => 'int32',
        'discountValid' => 'date-time',
        'invoiceLanguage' => null,
        'taxable' => null,
        'card' => null,
        'contracts' => null,
        'billingUsers' => null,
        'comments' => null,
        'contacts' => null,
        'account' => null,
        'priceListEntities' => null,
        'addPriceListEntities' => null,
        'remPriceListEntities' => null,
        'clearAccount' => null,
        'autodelete' => null,
        'pending' => null,
        'verifications' => null,
        'tags' => null,
        'pin' => null,
        'persistent' => null,
        'active' => null,
        'fname' => null,
        'lname' => null,
        'pcode' => null,
        'technical' => null,
        'sepa' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes(): array
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats(): array
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'number' => 'number',
        'client' => 'client',
        'group' => 'group',
        'name' => 'name',
        'type' => 'type',
        'organization' => 'organization',
        'organization2' => 'organization2',
        'vatNumber' => 'vatNumber',
        'gender' => 'gender',
        'title' => 'title',
        'addressLines' => 'addressLines',
        'city' => 'city',
        'state' => 'state',
        'country' => 'country',
        'phone' => 'phone',
        'fax' => 'fax',
        'emails' => 'emails',
        'billingEmails' => 'billingEmails',
        'payment' => 'payment',
        'paymentMode' => 'paymentMode',
        'paymentCurrency' => 'paymentCurrency',
        'paymentCurrencyExchangeFee' => 'paymentCurrencyExchangeFee',
        'discount' => 'discount',
        'discountNgtld' => 'discountNgtld',
        'discountCertificate' => 'discountCertificate',
        'discountValid' => 'discountValid',
        'invoiceLanguage' => 'invoiceLanguage',
        'taxable' => 'taxable',
        'card' => 'card',
        'contracts' => 'contracts',
        'billingUsers' => 'billingUsers',
        'comments' => 'comments',
        'contacts' => 'contacts',
        'account' => 'account',
        'priceListEntities' => 'priceListEntities',
        'addPriceListEntities' => 'addPriceListEntities',
        'remPriceListEntities' => 'remPriceListEntities',
        'clearAccount' => 'clearAccount',
        'autodelete' => 'autodelete',
        'pending' => 'pending',
        'verifications' => 'verifications',
        'tags' => 'tags',
        'pin' => 'pin',
        'persistent' => 'persistent',
        'active' => 'active',
        'fname' => 'fname',
        'lname' => 'lname',
        'pcode' => 'pcode',
        'technical' => 'technical',
        'sepa' => 'sepa'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'number' => 'setNumber',
        'client' => 'setClient',
        'group' => 'setGroup',
        'name' => 'setName',
        'type' => 'setType',
        'organization' => 'setOrganization',
        'organization2' => 'setOrganization2',
        'vatNumber' => 'setVatNumber',
        'gender' => 'setGender',
        'title' => 'setTitle',
        'addressLines' => 'setAddressLines',
        'city' => 'setCity',
        'state' => 'setState',
        'country' => 'setCountry',
        'phone' => 'setPhone',
        'fax' => 'setFax',
        'emails' => 'setEmails',
        'billingEmails' => 'setBillingEmails',
        'payment' => 'setPayment',
        'paymentMode' => 'setPaymentMode',
        'paymentCurrency' => 'setPaymentCurrency',
        'paymentCurrencyExchangeFee' => 'setPaymentCurrencyExchangeFee',
        'discount' => 'setDiscount',
        'discountNgtld' => 'setDiscountNgtld',
        'discountCertificate' => 'setDiscountCertificate',
        'discountValid' => 'setDiscountValid',
        'invoiceLanguage' => 'setInvoiceLanguage',
        'taxable' => 'setTaxable',
        'card' => 'setCard',
        'contracts' => 'setContracts',
        'billingUsers' => 'setBillingUsers',
        'comments' => 'setComments',
        'contacts' => 'setContacts',
        'account' => 'setAccount',
        'priceListEntities' => 'setPriceListEntities',
        'addPriceListEntities' => 'setAddPriceListEntities',
        'remPriceListEntities' => 'setRemPriceListEntities',
        'clearAccount' => 'setClearAccount',
        'autodelete' => 'setAutodelete',
        'pending' => 'setPending',
        'verifications' => 'setVerifications',
        'tags' => 'setTags',
        'pin' => 'setPin',
        'persistent' => 'setPersistent',
        'active' => 'setActive',
        'fname' => 'setFname',
        'lname' => 'setLname',
        'pcode' => 'setPcode',
        'technical' => 'setTechnical',
        'sepa' => 'setSepa'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'number' => 'getNumber',
        'client' => 'getClient',
        'group' => 'getGroup',
        'name' => 'getName',
        'type' => 'getType',
        'organization' => 'getOrganization',
        'organization2' => 'getOrganization2',
        'vatNumber' => 'getVatNumber',
        'gender' => 'getGender',
        'title' => 'getTitle',
        'addressLines' => 'getAddressLines',
        'city' => 'getCity',
        'state' => 'getState',
        'country' => 'getCountry',
        'phone' => 'getPhone',
        'fax' => 'getFax',
        'emails' => 'getEmails',
        'billingEmails' => 'getBillingEmails',
        'payment' => 'getPayment',
        'paymentMode' => 'getPaymentMode',
        'paymentCurrency' => 'getPaymentCurrency',
        'paymentCurrencyExchangeFee' => 'getPaymentCurrencyExchangeFee',
        'discount' => 'getDiscount',
        'discountNgtld' => 'getDiscountNgtld',
        'discountCertificate' => 'getDiscountCertificate',
        'discountValid' => 'getDiscountValid',
        'invoiceLanguage' => 'getInvoiceLanguage',
        'taxable' => 'getTaxable',
        'card' => 'getCard',
        'contracts' => 'getContracts',
        'billingUsers' => 'getBillingUsers',
        'comments' => 'getComments',
        'contacts' => 'getContacts',
        'account' => 'getAccount',
        'priceListEntities' => 'getPriceListEntities',
        'addPriceListEntities' => 'getAddPriceListEntities',
        'remPriceListEntities' => 'getRemPriceListEntities',
        'clearAccount' => 'getClearAccount',
        'autodelete' => 'getAutodelete',
        'pending' => 'getPending',
        'verifications' => 'getVerifications',
        'tags' => 'getTags',
        'pin' => 'getPin',
        'persistent' => 'getPersistent',
        'active' => 'getActive',
        'fname' => 'getFname',
        'lname' => 'getLname',
        'pcode' => 'getPcode',
        'technical' => 'getTechnical',
        'sepa' => 'getSepa'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap(): array
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters(): array
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters(): array
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName(): string
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->container['number'] = isset($data['number']) ? $this->createData($data['number'], 'number')  : null;
        $this->container['client'] = isset($data['client']) ? $this->createData($data['client'], 'client')  : null;
        $this->container['group'] = isset($data['group']) ? $this->createData($data['group'], 'group')  : null;
        $this->container['name'] = isset($data['name']) ? $this->createData($data['name'], 'name')  : null;
        $this->container['type'] = isset($data['type']) ? $this->createData($data['type'], 'type')  : null;
        $this->container['organization'] = isset($data['organization']) ? $this->createData($data['organization'], 'organization')  : null;
        $this->container['organization2'] = isset($data['organization2']) ? $this->createData($data['organization2'], 'organization2')  : null;
        $this->container['vatNumber'] = isset($data['vatNumber']) ? $this->createData($data['vatNumber'], 'vatNumber')  : null;
        $this->container['gender'] = isset($data['gender']) ? $this->createData($data['gender'], 'gender')  : null;
        $this->container['title'] = isset($data['title']) ? $this->createData($data['title'], 'title')  : null;
        $this->container['addressLines'] = isset($data['addressLines']) ? $this->createData($data['addressLines'], 'addressLines')  : null;
        $this->container['city'] = isset($data['city']) ? $this->createData($data['city'], 'city')  : null;
        $this->container['state'] = isset($data['state']) ? $this->createData($data['state'], 'state')  : null;
        $this->container['country'] = isset($data['country']) ? $this->createData($data['country'], 'country')  : null;
        $this->container['phone'] = isset($data['phone']) ? $this->createData($data['phone'], 'phone')  : null;
        $this->container['fax'] = isset($data['fax']) ? $this->createData($data['fax'], 'fax')  : null;
        $this->container['emails'] = isset($data['emails']) ? $this->createData($data['emails'], 'emails')  : null;
        $this->container['billingEmails'] = isset($data['billingEmails']) ? $this->createData($data['billingEmails'], 'billingEmails')  : null;
        $this->container['payment'] = isset($data['payment']) ? $this->createData($data['payment'], 'payment')  : null;
        $this->container['paymentMode'] = isset($data['paymentMode']) ? $this->createData($data['paymentMode'], 'paymentMode')  : null;
        $this->container['paymentCurrency'] = isset($data['paymentCurrency']) ? $this->createData($data['paymentCurrency'], 'paymentCurrency')  : null;
        $this->container['paymentCurrencyExchangeFee'] = isset($data['paymentCurrencyExchangeFee']) ? $this->createData($data['paymentCurrencyExchangeFee'], 'paymentCurrencyExchangeFee')  : null;
        $this->container['discount'] = isset($data['discount']) ? $this->createData($data['discount'], 'discount')  : null;
        $this->container['discountNgtld'] = isset($data['discountNgtld']) ? $this->createData($data['discountNgtld'], 'discountNgtld')  : null;
        $this->container['discountCertificate'] = isset($data['discountCertificate']) ? $this->createData($data['discountCertificate'], 'discountCertificate')  : null;
        $this->container['discountValid'] = isset($data['discountValid']) ? $this->createData($data['discountValid'], 'discountValid')  : null;
        $this->container['invoiceLanguage'] = isset($data['invoiceLanguage']) ? $this->createData($data['invoiceLanguage'], 'invoiceLanguage')  : null;
        $this->container['taxable'] = isset($data['taxable']) ? $this->createData($data['taxable'], 'taxable')  : null;
        $this->container['card'] = isset($data['card']) ? $this->createData($data['card'], 'card')  : null;
        $this->container['contracts'] = isset($data['contracts']) ? $this->createData($data['contracts'], 'contracts')  : null;
        $this->container['billingUsers'] = isset($data['billingUsers']) ? $this->createData($data['billingUsers'], 'billingUsers')  : null;
        $this->container['comments'] = isset($data['comments']) ? $this->createData($data['comments'], 'comments')  : null;
        $this->container['contacts'] = isset($data['contacts']) ? $this->createData($data['contacts'], 'contacts')  : null;
        $this->container['account'] = isset($data['account']) ? $this->createData($data['account'], 'account')  : null;
        $this->container['priceListEntities'] = isset($data['priceListEntities']) ? $this->createData($data['priceListEntities'], 'priceListEntities')  : null;
        $this->container['addPriceListEntities'] = isset($data['addPriceListEntities']) ? $this->createData($data['addPriceListEntities'], 'addPriceListEntities')  : null;
        $this->container['remPriceListEntities'] = isset($data['remPriceListEntities']) ? $this->createData($data['remPriceListEntities'], 'remPriceListEntities')  : null;
        $this->container['clearAccount'] = isset($data['clearAccount']) ? $this->createData($data['clearAccount'], 'clearAccount')  : null;
        $this->container['autodelete'] = isset($data['autodelete']) ? $this->createData($data['autodelete'], 'autodelete')  : null;
        $this->container['pending'] = isset($data['pending']) ? $this->createData($data['pending'], 'pending')  : null;
        $this->container['verifications'] = isset($data['verifications']) ? $this->createData($data['verifications'], 'verifications')  : null;
        $this->container['tags'] = isset($data['tags']) ? $this->createData($data['tags'], 'tags')  : null;
        $this->container['pin'] = isset($data['pin']) ? $this->createData($data['pin'], 'pin')  : null;
        $this->container['persistent'] = isset($data['persistent']) ? $this->createData($data['persistent'], 'persistent')  : null;
        $this->container['active'] = isset($data['active']) ? $this->createData($data['active'], 'active')  : null;
        $this->container['fname'] = isset($data['fname']) ? $this->createData($data['fname'], 'fname')  : null;
        $this->container['lname'] = isset($data['lname']) ? $this->createData($data['lname'], 'lname')  : null;
        $this->container['pcode'] = isset($data['pcode']) ? $this->createData($data['pcode'], 'pcode')  : null;
        $this->container['technical'] = isset($data['technical']) ? $this->createData($data['technical'], 'technical')  : null;
        $this->container['sepa'] = isset($data['sepa']) ? $this->createData($data['sepa'], 'sepa')  : null;
    }

    /**
     * create data according to types;
     * non object types will just be returend as is:
     * object types will return an instance of themselves or and array of instances
     *
     * @param mixed[] $data
     * @param string $property
     * @return mixed
     */
    public function createData($data = null, $property = null): mixed
    {
        if ($data === null || $property === null) {
            return '';
        }
        
        $swaggerType = self::$swaggerTypes[$property];

        preg_match("/([\\\\\w\d]+)(\[\])?/", $swaggerType, $matches);

        // handle object types
        if (count($matches) > 0 && count($matches) < 3) {
            try {
                if (!is_array($data)) {
                    return $data;
                }
                
                $reflection = new \ReflectionClass($swaggerType);
                $reflectionInstance = $reflection->newInstance($data);

                return $reflectionInstance;
            } catch (\Exception $ex) {
                return $data;
            }
        } elseif (count($matches) >= 3) {
            // Object[]
            // arrays of objects have to be handled differently
            $reflectionInstances = [];
            foreach($data as $d){
                try {
                    if(!is_array($d)){
                        $reflectionInstances[] = $d;
                        continue;
                    }
                    $reflection = new \ReflectionClass(str_replace("[]", "", $swaggerType) );
                    $reflectionInstances[] = $reflection->newInstance($d);                   
                } catch (\Exception $ex) {
                    return $d;
                }
            }

            return $reflectionInstances;
        }

        return $data;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties(): array
    {
        $invalidProperties = [];

        if ($this->container['number'] === null) {
            $invalidProperties[] = "'number' can't be null";
        }
        if ($this->container['client'] === null) {
            $invalidProperties[] = "'client' can't be null";
        }
        if ((mb_strlen($this->container['client']) > 2147483647)) {
            $invalidProperties[] = "invalid value for 'client', the character length must be smaller than or equal to 2147483647.";
        }

        if ((mb_strlen($this->container['client']) < 1)) {
            $invalidProperties[] = "invalid value for 'client', the character length must be bigger than or equal to 1.";
        }

        if ($this->container['name'] === null) {
            $invalidProperties[] = "'name' can't be null";
        }
        if ((mb_strlen($this->container['name']) > 255)) {
            $invalidProperties[] = "invalid value for 'name', the character length must be smaller than or equal to 255.";
        }

        if ((mb_strlen($this->container['name']) < 0)) {
            $invalidProperties[] = "invalid value for 'name', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['organization']) && (mb_strlen($this->container['organization']) > 35)) {
            $invalidProperties[] = "invalid value for 'organization', the character length must be smaller than or equal to 35.";
        }

        if (!is_null($this->container['organization']) && (mb_strlen($this->container['organization']) < 0)) {
            $invalidProperties[] = "invalid value for 'organization', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['organization2']) && (mb_strlen($this->container['organization2']) > 35)) {
            $invalidProperties[] = "invalid value for 'organization2', the character length must be smaller than or equal to 35.";
        }

        if (!is_null($this->container['organization2']) && (mb_strlen($this->container['organization2']) < 0)) {
            $invalidProperties[] = "invalid value for 'organization2', the character length must be bigger than or equal to 0.";
        }

        if ($this->container['addressLines'] === null) {
            $invalidProperties[] = "'addressLines' can't be null";
        }
        if ($this->container['payment'] === null) {
            $invalidProperties[] = "'payment' can't be null";
        }
        if (!is_null($this->container['fname']) && (mb_strlen($this->container['fname']) > 35)) {
            $invalidProperties[] = "invalid value for 'fname', the character length must be smaller than or equal to 35.";
        }

        if (!is_null($this->container['fname']) && (mb_strlen($this->container['fname']) < 0)) {
            $invalidProperties[] = "invalid value for 'fname', the character length must be bigger than or equal to 0.";
        }

        if (!is_null($this->container['lname']) && (mb_strlen($this->container['lname']) > 35)) {
            $invalidProperties[] = "invalid value for 'lname', the character length must be smaller than or equal to 35.";
        }

        if (!is_null($this->container['lname']) && (mb_strlen($this->container['lname']) < 0)) {
            $invalidProperties[] = "invalid value for 'lname', the character length must be bigger than or equal to 0.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the 
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid(): bool
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets number
     *
     * @return int
     */
    public function getNumber()
    {
        return $this->container['number'];
    }

    /**
     * Sets number
     *
     * @param int $number Customer number
     *
     * @return $this
     */
    public function setNumber($number)
    {
        $this->container['number'] = $number;

        return $this;
    }

    /**
     * Gets client
     *
     * @return string
     */
    public function getClient()
    {
        return $this->container['client'];
    }

    /**
     * Sets client
     *
     * @param string $client Account Label.
     *
     * @return $this
     */
    public function setClient($client)
    {
        if ((mb_strlen($client) > 2147483647)) {
            throw new \InvalidArgumentException('invalid length for $client when calling BasicCustomer., must be smaller than or equal to 2147483647.');
        }
        if ((mb_strlen($client) < 1)) {
            throw new \InvalidArgumentException('invalid length for $client when calling BasicCustomer., must be bigger than or equal to 1.');
        }

        $this->container['client'] = $client;

        return $this;
    }

    /**
     * Gets group
     *
     * @return int
     */
    public function getGroup()
    {
        return $this->container['group'];
    }

    /**
     * Sets group
     *
     * @param int $group Customer group, first 5 numbers of the account number. e.g.
     *
     * @return $this
     */
    public function setGroup($group)
    {
        $this->container['group'] = $group;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name The name of the customer.
     *
     * @return $this
     */
    public function setName($name)
    {
        if ((mb_strlen($name) > 255)) {
            throw new \InvalidArgumentException('invalid length for $name when calling BasicCustomer., must be smaller than or equal to 255.');
        }
        if ((mb_strlen($name) < 0)) {
            throw new \InvalidArgumentException('invalid length for $name when calling BasicCustomer., must be bigger than or equal to 0.');
        }

        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets type
     *
     * @return \Domainrobot\Model\CustomerType
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param \Domainrobot\Model\CustomerType $type The type of the customer.
     *
     * @return $this
     */
    public function setType($type)
    {
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets organization
     *
     * @return string
     */
    public function getOrganization()
    {
        return $this->container['organization'];
    }

    /**
     * Sets organization
     *
     * @param string $organization The name of the organization.
     *
     * @return $this
     */
    public function setOrganization($organization)
    {
        if (!is_null($organization) && (mb_strlen($organization) > 35)) {
            throw new \InvalidArgumentException('invalid length for $organization when calling BasicCustomer., must be smaller than or equal to 35.');
        }
        if (!is_null($organization) && (mb_strlen($organization) < 0)) {
            throw new \InvalidArgumentException('invalid length for $organization when calling BasicCustomer., must be bigger than or equal to 0.');
        }

        $this->container['organization'] = $organization;

        return $this;
    }

    /**
     * Gets organization2
     *
     * @return string
     */
    public function getOrganization2()
    {
        return $this->container['organization2'];
    }

    /**
     * Sets organization2
     *
     * @param string $organization2 The second line for the name of the organization.
     *
     * @return $this
     */
    public function setOrganization2($organization2)
    {
        if (!is_null($organization2) && (mb_strlen($organization2) > 35)) {
            throw new \InvalidArgumentException('invalid length for $organization2 when calling BasicCustomer., must be smaller than or equal to 35.');
        }
        if (!is_null($organization2) && (mb_strlen($organization2) < 0)) {
            throw new \InvalidArgumentException('invalid length for $organization2 when calling BasicCustomer., must be bigger than or equal to 0.');
        }

        $this->container['organization2'] = $organization2;

        return $this;
    }

    /**
     * Gets vatNumber
     *
     * @return string
     */
    public function getVatNumber()
    {
        return $this->container['vatNumber'];
    }

    /**
     * Sets vatNumber
     *
     * @param string $vatNumber The value added tax number.
     *
     * @return $this
     */
    public function setVatNumber($vatNumber)
    {
        $this->container['vatNumber'] = $vatNumber;

        return $this;
    }

    /**
     * Gets gender
     *
     * @return \Domainrobot\Model\GenderConstants
     */
    public function getGender()
    {
        return $this->container['gender'];
    }

    /**
     * Sets gender
     *
     * @param \Domainrobot\Model\GenderConstants $gender The gender of the person.
     *
     * @return $this
     */
    public function setGender($gender)
    {
        $this->container['gender'] = $gender;

        return $this;
    }

    /**
     * Gets title
     *
     * @return string
     */
    public function getTitle()
    {
        return $this->container['title'];
    }

    /**
     * Sets title
     *
     * @param string $title The title of the customer
     *
     * @return $this
     */
    public function setTitle($title)
    {
        $this->container['title'] = $title;

        return $this;
    }

    /**
     * Gets addressLines
     *
     * @return string[]
     */
    public function getAddressLines()
    {
        return $this->container['addressLines'];
    }

    /**
     * Sets addressLines
     *
     * @param string[] $addressLines The address of the customer
     *
     * @return $this
     */
    public function setAddressLines($addressLines)
    {
        $this->container['addressLines'] = $addressLines;

        return $this;
    }

    /**
     * Gets city
     *
     * @return string
     */
    public function getCity()
    {
        return $this->container['city'];
    }

    /**
     * Sets city
     *
     * @param string $city The city of the customer.
     *
     * @return $this
     */
    public function setCity($city)
    {
        $this->container['city'] = $city;

        return $this;
    }

    /**
     * Gets state
     *
     * @return string
     */
    public function getState()
    {
        return $this->container['state'];
    }

    /**
     * Sets state
     *
     * @param string $state The state of the customer.
     *
     * @return $this
     */
    public function setState($state)
    {
        $this->container['state'] = $state;

        return $this;
    }

    /**
     * Gets country
     *
     * @return string
     */
    public function getCountry()
    {
        return $this->container['country'];
    }

    /**
     * Sets country
     *
     * @param string $country The country of the customer.
     *
     * @return $this
     */
    public function setCountry($country)
    {
        $this->container['country'] = $country;

        return $this;
    }

    /**
     * Gets phone
     *
     * @return string
     */
    public function getPhone()
    {
        return $this->container['phone'];
    }

    /**
     * Sets phone
     *
     * @param string $phone The phone number of the customer
     *
     * @return $this
     */
    public function setPhone($phone)
    {
        $this->container['phone'] = $phone;

        return $this;
    }

    /**
     * Gets fax
     *
     * @return string
     */
    public function getFax()
    {
        return $this->container['fax'];
    }

    /**
     * Sets fax
     *
     * @param string $fax The fax number of the customer
     *
     * @return $this
     */
    public function setFax($fax)
    {
        $this->container['fax'] = $fax;

        return $this;
    }

    /**
     * Gets emails
     *
     * @return string[]
     */
    public function getEmails()
    {
        return $this->container['emails'];
    }

    /**
     * Sets emails
     *
     * @param string[] $emails The email addresses.
     *
     * @return $this
     */
    public function setEmails($emails)
    {
        $this->container['emails'] = $emails;

        return $this;
    }

    /**
     * Gets billingEmails
     *
     * @return string[]
     */
    public function getBillingEmails()
    {
        return $this->container['billingEmails'];
    }

    /**
     * Sets billingEmails
     *
     * @param string[] $billingEmails The billing recipients.
     *
     * @return $this
     */
    public function setBillingEmails($billingEmails)
    {
        $this->container['billingEmails'] = $billingEmails;

        return $this;
    }

    /**
     * Gets payment
     *
     * @return \Domainrobot\Model\PaymentConstants
     */
    public function getPayment()
    {
        return $this->container['payment'];
    }

    /**
     * Sets payment
     *
     * @param \Domainrobot\Model\PaymentConstants $payment The payment typ of the customer.
     *
     * @return $this
     */
    public function setPayment($payment)
    {
        $this->container['payment'] = $payment;

        return $this;
    }

    /**
     * Gets paymentMode
     *
     * @return string
     */
    public function getPaymentMode()
    {
        return $this->container['paymentMode'];
    }

    /**
     * Sets paymentMode
     *
     * @param string $paymentMode The payment mode of the customer.
     *
     * @return $this
     */
    public function setPaymentMode($paymentMode)
    {
        $this->container['paymentMode'] = $paymentMode;

        return $this;
    }

    /**
     * Gets paymentCurrency
     *
     * @return string
     */
    public function getPaymentCurrency()
    {
        return $this->container['paymentCurrency'];
    }

    /**
     * Sets paymentCurrency
     *
     * @param string $paymentCurrency The payment currency of the customer.
     *
     * @return $this
     */
    public function setPaymentCurrency($paymentCurrency)
    {
        $this->container['paymentCurrency'] = $paymentCurrency;

        return $this;
    }

    /**
     * Gets paymentCurrencyExchangeFee
     *
     * @return float
     */
    public function getPaymentCurrencyExchangeFee()
    {
        return $this->container['paymentCurrencyExchangeFee'];
    }

    /**
     * Sets paymentCurrencyExchangeFee
     *
     * @param float $paymentCurrencyExchangeFee The payment currency exchange fee of the customer.
     *
     * @return $this
     */
    public function setPaymentCurrencyExchangeFee($paymentCurrencyExchangeFee)
    {
        $this->container['paymentCurrencyExchangeFee'] = $paymentCurrencyExchangeFee;

        return $this;
    }

    /**
     * Gets discount
     *
     * @return int
     */
    public function getDiscount()
    {
        return $this->container['discount'];
    }

    /**
     * Sets discount
     *
     * @param int $discount The discount of the customer.
     *
     * @return $this
     */
    public function setDiscount($discount)
    {
        $this->container['discount'] = $discount;

        return $this;
    }

    /**
     * Gets discountNgtld
     *
     * @return int
     */
    public function getDiscountNgtld()
    {
        return $this->container['discountNgtld'];
    }

    /**
     * Sets discountNgtld
     *
     * @param int $discountNgtld The discount of the ngtld.
     *
     * @return $this
     */
    public function setDiscountNgtld($discountNgtld)
    {
        $this->container['discountNgtld'] = $discountNgtld;

        return $this;
    }

    /**
     * Gets discountCertificate
     *
     * @return int
     */
    public function getDiscountCertificate()
    {
        return $this->container['discountCertificate'];
    }

    /**
     * Sets discountCertificate
     *
     * @param int $discountCertificate The discount of the certificate.
     *
     * @return $this
     */
    public function setDiscountCertificate($discountCertificate)
    {
        $this->container['discountCertificate'] = $discountCertificate;

        return $this;
    }

    /**
     * Gets discountValid
     *
     * @return \DateTime
     */
    public function getDiscountValid()
    {
        return $this->container['discountValid'];
    }

    /**
     * Sets discountValid
     *
     * @param \DateTime $discountValid The end of a promo discount.
     *
     * @return $this
     */
    public function setDiscountValid($discountValid)
    {
        $this->container['discountValid'] = $discountValid;

        return $this;
    }

    /**
     * Gets invoiceLanguage
     *
     * @return string
     */
    public function getInvoiceLanguage()
    {
        return $this->container['invoiceLanguage'];
    }

    /**
     * Sets invoiceLanguage
     *
     * @param string $invoiceLanguage The language to use for the invoice.
     *
     * @return $this
     */
    public function setInvoiceLanguage($invoiceLanguage)
    {
        $this->container['invoiceLanguage'] = $invoiceLanguage;

        return $this;
    }

    /**
     * Gets taxable
     *
     * @return bool
     */
    public function getTaxable()
    {
        return $this->container['taxable'];
    }

    /**
     * Sets taxable
     *
     * @param bool $taxable The taxable flag of the customer.
     *
     * @return $this
     */
    public function setTaxable($taxable)
    {
        $this->container['taxable'] = $taxable;

        return $this;
    }

    /**
     * Gets card
     *
     * @return \Domainrobot\Model\Card
     */
    public function getCard()
    {
        return $this->container['card'];
    }

    /**
     * Sets card
     *
     * @param \Domainrobot\Model\Card $card The customers minimal credit card data if payament was post with credit card.
     *
     * @return $this
     */
    public function setCard($card)
    {
        $this->container['card'] = $card;

        return $this;
    }

    /**
     * Gets contracts
     *
     * @return \Domainrobot\Model\CustomerContract[]
     */
    public function getContracts()
    {
        return $this->container['contracts'];
    }

    /**
     * Sets contracts
     *
     * @param \Domainrobot\Model\CustomerContract[] $contracts The customers contracts.
     *
     * @return $this
     */
    public function setContracts($contracts)
    {
        $this->container['contracts'] = $contracts;

        return $this;
    }

    /**
     * Gets billingUsers
     *
     * @return \Domainrobot\Model\BasicUser[]
     */
    public function getBillingUsers()
    {
        return $this->container['billingUsers'];
    }

    /**
     * Sets billingUsers
     *
     * @param \Domainrobot\Model\BasicUser[] $billingUsers The billing users.
     *
     * @return $this
     */
    public function setBillingUsers($billingUsers)
    {
        $this->container['billingUsers'] = $billingUsers;

        return $this;
    }

    /**
     * Gets comments
     *
     * @return \Domainrobot\Model\Comment[]
     */
    public function getComments()
    {
        return $this->container['comments'];
    }

    /**
     * Sets comments
     *
     * @param \Domainrobot\Model\Comment[] $comments The comments of the customer
     *
     * @return $this
     */
    public function setComments($comments)
    {
        $this->container['comments'] = $comments;

        return $this;
    }

    /**
     * Gets contacts
     *
     * @return \Domainrobot\Model\BasicCustomerContact[]
     */
    public function getContacts()
    {
        return $this->container['contacts'];
    }

    /**
     * Sets contacts
     *
     * @param \Domainrobot\Model\BasicCustomerContact[] $contacts The contacts of the customer
     *
     * @return $this
     */
    public function setContacts($contacts)
    {
        $this->container['contacts'] = $contacts;

        return $this;
    }

    /**
     * Gets account
     *
     * @return \Domainrobot\Model\Account
     */
    public function getAccount()
    {
        return $this->container['account'];
    }

    /**
     * Sets account
     *
     * @param \Domainrobot\Model\Account $account The account of the customer in case of prepayment or if the customer has a credit limit
     *
     * @return $this
     */
    public function setAccount($account)
    {
        $this->container['account'] = $account;

        return $this;
    }

    /**
     * Gets priceListEntities
     *
     * @return \Domainrobot\Model\CustomerPriceList[]
     */
    public function getPriceListEntities()
    {
        return $this->container['priceListEntities'];
    }

    /**
     * Sets priceListEntities
     *
     * @param \Domainrobot\Model\CustomerPriceList[] $priceListEntities The attached price lists
     *
     * @return $this
     */
    public function setPriceListEntities($priceListEntities)
    {
        $this->container['priceListEntities'] = $priceListEntities;

        return $this;
    }

    /**
     * Gets addPriceListEntities
     *
     * @return \Domainrobot\Model\CustomerPriceList[]
     */
    public function getAddPriceListEntities()
    {
        return $this->container['addPriceListEntities'];
    }

    /**
     * Sets addPriceListEntities
     *
     * @param \Domainrobot\Model\CustomerPriceList[] $addPriceListEntities Used by the update to task to attache new price lists
     *
     * @return $this
     */
    public function setAddPriceListEntities($addPriceListEntities)
    {
        $this->container['addPriceListEntities'] = $addPriceListEntities;

        return $this;
    }

    /**
     * Gets remPriceListEntities
     *
     * @return \Domainrobot\Model\CustomerPriceList[]
     */
    public function getRemPriceListEntities()
    {
        return $this->container['remPriceListEntities'];
    }

    /**
     * Sets remPriceListEntities
     *
     * @param \Domainrobot\Model\CustomerPriceList[] $remPriceListEntities Used by the update to task to detache price lists
     *
     * @return $this
     */
    public function setRemPriceListEntities($remPriceListEntities)
    {
        $this->container['remPriceListEntities'] = $remPriceListEntities;

        return $this;
    }

    /**
     * Gets clearAccount
     *
     * @return \Domainrobot\Model\ClearAccountPeriod
     */
    public function getClearAccount()
    {
        return $this->container['clearAccount'];
    }

    /**
     * Sets clearAccount
     *
     * @param \Domainrobot\Model\ClearAccountPeriod $clearAccount The period after the post payment account will be cleared to zero
     *
     * @return $this
     */
    public function setClearAccount($clearAccount)
    {
        $this->container['clearAccount'] = $clearAccount;

        return $this;
    }

    /**
     * Gets autodelete
     *
     * @return bool
     */
    public function getAutodelete()
    {
        return $this->container['autodelete'];
    }

    /**
     * Sets autodelete
     *
     * @param bool $autodelete Flag indication if the customer is autodelete
     *
     * @return $this
     */
    public function setAutodelete($autodelete)
    {
        $this->container['autodelete'] = $autodelete;

        return $this;
    }

    /**
     * Gets pending
     *
     * @return bool
     */
    public function getPending()
    {
        return $this->container['pending'];
    }

    /**
     * Sets pending
     *
     * @param bool $pending Flag indication if the customer data are pending
     *
     * @return $this
     */
    public function setPending($pending)
    {
        $this->container['pending'] = $pending;

        return $this;
    }

    /**
     * Gets verifications
     *
     * @return \Domainrobot\Model\BasicCustomerSpoolVerification[]
     */
    public function getVerifications()
    {
        return $this->container['verifications'];
    }

    /**
     * Sets verifications
     *
     * @param \Domainrobot\Model\BasicCustomerSpoolVerification[] $verifications Shows the pending email verifications
     *
     * @return $this
     */
    public function setVerifications($verifications)
    {
        $this->container['verifications'] = $verifications;

        return $this;
    }

    /**
     * Gets tags
     *
     * @return \Domainrobot\Model\CustomerTag[]
     */
    public function getTags()
    {
        return $this->container['tags'];
    }

    /**
     * Sets tags
     *
     * @param \Domainrobot\Model\CustomerTag[] $tags The customers tags.
     *
     * @return $this
     */
    public function setTags($tags)
    {
        $this->container['tags'] = $tags;

        return $this;
    }

    /**
     * Gets pin
     *
     * @return string
     */
    public function getPin()
    {
        return $this->container['pin'];
    }

    /**
     * Sets pin
     *
     * @param string $pin The pin number.
     *
     * @return $this
     */
    public function setPin($pin)
    {
        $this->container['pin'] = $pin;

        return $this;
    }

    /**
     * Gets persistent
     *
     * @return \Domainrobot\Model\BasicCustomer
     */
    public function getPersistent()
    {
        return $this->container['persistent'];
    }

    /**
     * Sets persistent
     *
     * @param \Domainrobot\Model\BasicCustomer $persistent the current customer
     *
     * @return $this
     */
    public function setPersistent($persistent)
    {
        $this->container['persistent'] = $persistent;

        return $this;
    }

    /**
     * Gets active
     *
     * @return bool
     */
    public function getActive()
    {
        return $this->container['active'];
    }

    /**
     * Sets active
     *
     * @param bool $active Flag indication if the customer is active
     *
     * @return $this
     */
    public function setActive($active)
    {
        $this->container['active'] = $active;

        return $this;
    }

    /**
     * Gets fname
     *
     * @return string
     */
    public function getFname()
    {
        return $this->container['fname'];
    }

    /**
     * Sets fname
     *
     * @param string $fname The first name.
     *
     * @return $this
     */
    public function setFname($fname)
    {
        if (!is_null($fname) && (mb_strlen($fname) > 35)) {
            throw new \InvalidArgumentException('invalid length for $fname when calling BasicCustomer., must be smaller than or equal to 35.');
        }
        if (!is_null($fname) && (mb_strlen($fname) < 0)) {
            throw new \InvalidArgumentException('invalid length for $fname when calling BasicCustomer., must be bigger than or equal to 0.');
        }

        $this->container['fname'] = $fname;

        return $this;
    }

    /**
     * Gets lname
     *
     * @return string
     */
    public function getLname()
    {
        return $this->container['lname'];
    }

    /**
     * Sets lname
     *
     * @param string $lname The last name.
     *
     * @return $this
     */
    public function setLname($lname)
    {
        if (!is_null($lname) && (mb_strlen($lname) > 35)) {
            throw new \InvalidArgumentException('invalid length for $lname when calling BasicCustomer., must be smaller than or equal to 35.');
        }
        if (!is_null($lname) && (mb_strlen($lname) < 0)) {
            throw new \InvalidArgumentException('invalid length for $lname when calling BasicCustomer., must be bigger than or equal to 0.');
        }

        $this->container['lname'] = $lname;

        return $this;
    }

    /**
     * Gets pcode
     *
     * @return string
     */
    public function getPcode()
    {
        return $this->container['pcode'];
    }

    /**
     * Sets pcode
     *
     * @param string $pcode The postal code of the city.
     *
     * @return $this
     */
    public function setPcode($pcode)
    {
        $this->container['pcode'] = $pcode;

        return $this;
    }

    /**
     * Gets technical
     *
     * @return \Domainrobot\Model\TechnicalCustomer
     */
    public function getTechnical()
    {
        return $this->container['technical'];
    }

    /**
     * Sets technical
     *
     * @param \Domainrobot\Model\TechnicalCustomer $technical technical Customer.
     *
     * @return $this
     */
    public function setTechnical($technical)
    {
        $this->container['technical'] = $technical;

        return $this;
    }

    /**
     * Gets sepa
     *
     * @return \Domainrobot\Model\SEPAMandate
     */
    public function getSepa()
    {
        return $this->container['sepa'];
    }

    /**
     * Sets sepa
     *
     * @param \Domainrobot\Model\SEPAMandate $sepa The customers sepa mandate if payament was post with sepa.
     *
     * @return $this
     */
    public function setSepa($sepa)
    {
        $this->container['sepa'] = $sepa;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset): mixed
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString(): string
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
    
    /**
     * @param boolean $removeEmptyValues [remove all empty values if true]
     * @param array $retrieveKeys [list of keys to get back in any case]
     * 
     * Examples:
     * toArray() => returns only non empty values
     * toArray(true) => returns all values
     */
    public function toArray($retrieveAllValues = false): array
    {
        $container = $this->container;

        $cleanContainer = [];
        foreach ($container as $key => &$value) {
            if (
                $retrieveAllValues === false && 
                empty($value) === true &&
                $value !== false &&
                $value !== '' &&
                $value !== 0 &&
                $value !== '0'
            ) {
                unset($container[$key]);
                continue;
            }
            
            if (gettype($value) === "object") {
                if(method_exists($value, 'toArray')) {
                    $value = $value->toArray($retrieveAllValues);
                }else{
                    if(get_class($value) === "DateTime"){
                        $value = $value->format("Y-m-d\TH:i:s");
                    }else{
                        $value = (array) $value;
                    }
                }
            }

            if (is_array($value)) {
                foreach ($value as &$v) {
                    if (gettype($v) === "object") {
                        $v = $v->toArray($retrieveAllValues);
                    }
                }
            }

            $cleanContainer[self::$attributeMap[$key]] = $value;
        };

        return $cleanContainer;
    }
}


