<?php
/**
 * Certificate
 *
 * PHP version 5
 *
 * @category Class
 * @package  Domainrobot
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Domainrobot JSON API
 *
 * Domainrobot JSON API for managing: Domains, SSL            Certificates, DNS and            much more.
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.16-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Domainrobot\Model;

use \ArrayAccess;
use \Domainrobot\ObjectSerializer;

/**
 * Certificate Class Doc Comment
 *
 * @category Class
 * @package  Domainrobot
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class Certificate implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Certificate';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'created' => '\DateTime',
        'updated' => '\DateTime',
        'owner' => '\Domainrobot\Model\BasicUser',
        'updater' => '\Domainrobot\Model\BasicUser',
        'extension' => '\Domainrobot\Model\ExtendedValidationExtension',
        'id' => 'int',
        'partner_order_id' => 'string',
        'order_id' => 'string',
        'admin_contact' => '\Domainrobot\Model\SslContact',
        'technical_contact' => '\Domainrobot\Model\SslContact',
        'name' => 'string',
        'lifetime' => '\Domainrobot\Model\TimePeriod',
        'software' => '\Domainrobot\Model\ServerSoftwareTypeConstants',
        'comment' => 'string',
        'csr' => 'string',
        'server' => 'string',
        'serial_number' => 'string',
        'product' => 'string',
        'code_signing_type' => '\Domainrobot\Model\CodeSigningType',
        'certificate_type' => '\Domainrobot\Model\CertificateType',
        'signature_hash_algorithm' => '\Domainrobot\Model\SignatureHashAlgorithmConstants',
        'expire' => '\DateTime',
        'subject_alternative_names' => '\Domainrobot\Model\SubjectAlternativeName[]',
        'histories' => '\Domainrobot\Model\CertificateHistory[]',
        'certification_authority' => '\Domainrobot\Model\CaCertificate[]',
        'password' => 'string',
        'firstname' => 'string',
        'lastname' => 'string',
        'technical_contact_email' => 'string',
        'organization_unit_name' => 'string',
        'authentication' => '\Domainrobot\Model\CertAuthentication',
        'certificate_transparency' => 'bool',
        'certificate_transparency_privacy' => '\Domainrobot\Model\CertificateTransparencyPrivacyConstants',
        'domain' => 'string',
        'has_csr' => 'bool',
        'idn' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'created' => 'date-time',
        'updated' => 'date-time',
        'owner' => null,
        'updater' => null,
        'extension' => null,
        'id' => 'int32',
        'partner_order_id' => null,
        'order_id' => null,
        'admin_contact' => null,
        'technical_contact' => null,
        'name' => null,
        'lifetime' => null,
        'software' => null,
        'comment' => null,
        'csr' => null,
        'server' => null,
        'serial_number' => null,
        'product' => null,
        'code_signing_type' => null,
        'certificate_type' => null,
        'signature_hash_algorithm' => null,
        'expire' => 'date-time',
        'subject_alternative_names' => null,
        'histories' => null,
        'certification_authority' => null,
        'password' => null,
        'firstname' => null,
        'lastname' => null,
        'technical_contact_email' => null,
        'organization_unit_name' => null,
        'authentication' => null,
        'certificate_transparency' => null,
        'certificate_transparency_privacy' => null,
        'domain' => null,
        'has_csr' => null,
        'idn' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'created' => 'created',
        'updated' => 'updated',
        'owner' => 'owner',
        'updater' => 'updater',
        'extension' => 'extension',
        'id' => 'id',
        'partner_order_id' => 'partnerOrderId',
        'order_id' => 'orderId',
        'admin_contact' => 'adminContact',
        'technical_contact' => 'technicalContact',
        'name' => 'name',
        'lifetime' => 'lifetime',
        'software' => 'software',
        'comment' => 'comment',
        'csr' => 'csr',
        'server' => 'server',
        'serial_number' => 'serialNumber',
        'product' => 'product',
        'code_signing_type' => 'codeSigningType',
        'certificate_type' => 'certificateType',
        'signature_hash_algorithm' => 'signatureHashAlgorithm',
        'expire' => 'expire',
        'subject_alternative_names' => 'subjectAlternativeNames',
        'histories' => 'histories',
        'certification_authority' => 'certificationAuthority',
        'password' => 'password',
        'firstname' => 'firstname',
        'lastname' => 'lastname',
        'technical_contact_email' => 'technicalContactEmail',
        'organization_unit_name' => 'organizationUnitName',
        'authentication' => 'authentication',
        'certificate_transparency' => 'certificateTransparency',
        'certificate_transparency_privacy' => 'certificateTransparencyPrivacy',
        'domain' => 'domain',
        'has_csr' => 'hasCsr',
        'idn' => 'idn'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'created' => 'setCreated',
        'updated' => 'setUpdated',
        'owner' => 'setOwner',
        'updater' => 'setUpdater',
        'extension' => 'setExtension',
        'id' => 'setId',
        'partner_order_id' => 'setPartnerOrderId',
        'order_id' => 'setOrderId',
        'admin_contact' => 'setAdminContact',
        'technical_contact' => 'setTechnicalContact',
        'name' => 'setName',
        'lifetime' => 'setLifetime',
        'software' => 'setSoftware',
        'comment' => 'setComment',
        'csr' => 'setCsr',
        'server' => 'setServer',
        'serial_number' => 'setSerialNumber',
        'product' => 'setProduct',
        'code_signing_type' => 'setCodeSigningType',
        'certificate_type' => 'setCertificateType',
        'signature_hash_algorithm' => 'setSignatureHashAlgorithm',
        'expire' => 'setExpire',
        'subject_alternative_names' => 'setSubjectAlternativeNames',
        'histories' => 'setHistories',
        'certification_authority' => 'setCertificationAuthority',
        'password' => 'setPassword',
        'firstname' => 'setFirstname',
        'lastname' => 'setLastname',
        'technical_contact_email' => 'setTechnicalContactEmail',
        'organization_unit_name' => 'setOrganizationUnitName',
        'authentication' => 'setAuthentication',
        'certificate_transparency' => 'setCertificateTransparency',
        'certificate_transparency_privacy' => 'setCertificateTransparencyPrivacy',
        'domain' => 'setDomain',
        'has_csr' => 'setHasCsr',
        'idn' => 'setIdn'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'created' => 'getCreated',
        'updated' => 'getUpdated',
        'owner' => 'getOwner',
        'updater' => 'getUpdater',
        'extension' => 'getExtension',
        'id' => 'getId',
        'partner_order_id' => 'getPartnerOrderId',
        'order_id' => 'getOrderId',
        'admin_contact' => 'getAdminContact',
        'technical_contact' => 'getTechnicalContact',
        'name' => 'getName',
        'lifetime' => 'getLifetime',
        'software' => 'getSoftware',
        'comment' => 'getComment',
        'csr' => 'getCsr',
        'server' => 'getServer',
        'serial_number' => 'getSerialNumber',
        'product' => 'getProduct',
        'code_signing_type' => 'getCodeSigningType',
        'certificate_type' => 'getCertificateType',
        'signature_hash_algorithm' => 'getSignatureHashAlgorithm',
        'expire' => 'getExpire',
        'subject_alternative_names' => 'getSubjectAlternativeNames',
        'histories' => 'getHistories',
        'certification_authority' => 'getCertificationAuthority',
        'password' => 'getPassword',
        'firstname' => 'getFirstname',
        'lastname' => 'getLastname',
        'technical_contact_email' => 'getTechnicalContactEmail',
        'organization_unit_name' => 'getOrganizationUnitName',
        'authentication' => 'getAuthentication',
        'certificate_transparency' => 'getCertificateTransparency',
        'certificate_transparency_privacy' => 'getCertificateTransparencyPrivacy',
        'domain' => 'getDomain',
        'has_csr' => 'getHasCsr',
        'idn' => 'getIdn'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['created'] = isset($data['created']) ? $this->createData($data['created'], 'created')  : null;
        $this->container['updated'] = isset($data['updated']) ? $this->createData($data['updated'], 'updated')  : null;
        $this->container['owner'] = isset($data['owner']) ? $this->createData($data['owner'], 'owner')  : null;
        $this->container['updater'] = isset($data['updater']) ? $this->createData($data['updater'], 'updater')  : null;
        $this->container['extension'] = isset($data['extension']) ? $this->createData($data['extension'], 'extension')  : null;
        $this->container['id'] = isset($data['id']) ? $this->createData($data['id'], 'id')  : null;
        $this->container['partner_order_id'] = isset($data['partner_order_id']) ? $this->createData($data['partner_order_id'], 'partner_order_id')  : null;
        $this->container['order_id'] = isset($data['order_id']) ? $this->createData($data['order_id'], 'order_id')  : null;
        $this->container['admin_contact'] = isset($data['admin_contact']) ? $this->createData($data['admin_contact'], 'admin_contact')  : null;
        $this->container['technical_contact'] = isset($data['technical_contact']) ? $this->createData($data['technical_contact'], 'technical_contact')  : null;
        $this->container['name'] = isset($data['name']) ? $this->createData($data['name'], 'name')  : null;
        $this->container['lifetime'] = isset($data['lifetime']) ? $this->createData($data['lifetime'], 'lifetime')  : null;
        $this->container['software'] = isset($data['software']) ? $this->createData($data['software'], 'software')  : null;
        $this->container['comment'] = isset($data['comment']) ? $this->createData($data['comment'], 'comment')  : null;
        $this->container['csr'] = isset($data['csr']) ? $this->createData($data['csr'], 'csr')  : null;
        $this->container['server'] = isset($data['server']) ? $this->createData($data['server'], 'server')  : null;
        $this->container['serial_number'] = isset($data['serial_number']) ? $this->createData($data['serial_number'], 'serial_number')  : null;
        $this->container['product'] = isset($data['product']) ? $this->createData($data['product'], 'product')  : null;
        $this->container['code_signing_type'] = isset($data['code_signing_type']) ? $this->createData($data['code_signing_type'], 'code_signing_type')  : null;
        $this->container['certificate_type'] = isset($data['certificate_type']) ? $this->createData($data['certificate_type'], 'certificate_type')  : null;
        $this->container['signature_hash_algorithm'] = isset($data['signature_hash_algorithm']) ? $this->createData($data['signature_hash_algorithm'], 'signature_hash_algorithm')  : null;
        $this->container['expire'] = isset($data['expire']) ? $this->createData($data['expire'], 'expire')  : null;
        $this->container['subject_alternative_names'] = isset($data['subject_alternative_names']) ? $this->createData($data['subject_alternative_names'], 'subject_alternative_names')  : null;
        $this->container['histories'] = isset($data['histories']) ? $this->createData($data['histories'], 'histories')  : null;
        $this->container['certification_authority'] = isset($data['certification_authority']) ? $this->createData($data['certification_authority'], 'certification_authority')  : null;
        $this->container['password'] = isset($data['password']) ? $this->createData($data['password'], 'password')  : null;
        $this->container['firstname'] = isset($data['firstname']) ? $this->createData($data['firstname'], 'firstname')  : null;
        $this->container['lastname'] = isset($data['lastname']) ? $this->createData($data['lastname'], 'lastname')  : null;
        $this->container['technical_contact_email'] = isset($data['technical_contact_email']) ? $this->createData($data['technical_contact_email'], 'technical_contact_email')  : null;
        $this->container['organization_unit_name'] = isset($data['organization_unit_name']) ? $this->createData($data['organization_unit_name'], 'organization_unit_name')  : null;
        $this->container['authentication'] = isset($data['authentication']) ? $this->createData($data['authentication'], 'authentication')  : null;
        $this->container['certificate_transparency'] = isset($data['certificate_transparency']) ? $this->createData($data['certificate_transparency'], 'certificate_transparency')  : null;
        $this->container['certificate_transparency_privacy'] = isset($data['certificate_transparency_privacy']) ? $this->createData($data['certificate_transparency_privacy'], 'certificate_transparency_privacy')  : null;
        $this->container['domain'] = isset($data['domain']) ? $this->createData($data['domain'], 'domain')  : null;
        $this->container['has_csr'] = isset($data['has_csr']) ? $this->createData($data['has_csr'], 'has_csr')  : null;
        $this->container['idn'] = isset($data['idn']) ? $this->createData($data['idn'], 'idn')  : null;
    }

    /**
    *
    * @param mixed[] $data
    * @param string $property
    * @return mixed
    */
    public function createData($data = null, $property){
        if($data === null){
            return '';
        }
        $swaggerType = self::$swaggerTypes[$property];

        preg_match("/([\\\\\w\d]+)(\[\])?/", $swaggerType, $matches);

        if(count($matches) > 0 && count($matches) < 3){
            try {
                $reflection = new \ReflectionClass($swaggerType);
                $reflectionInstance = $reflection->newInstance($data);

                return $reflectionInstance;
            }catch(\Exception $ex){
                return $data;
            }
        }else if(count($matches) >= 3){
            $reflectionInstances = [];
            foreach($data as $d){
                try {
                    $reflection = new \ReflectionClass(str_replace("[]", "", $swaggerType) );
                    $reflectionInstances[] = $reflection->newInstance($d);

                    return $reflectionInstances;
                } catch (\Exception $ex) {
                    return $data;
                }
            }
        }

        return $data;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['lifetime'] === null) {
            $invalidProperties[] = "'lifetime' can't be null";
        }
        if ($this->container['software'] === null) {
            $invalidProperties[] = "'software' can't be null";
        }
        if ($this->container['product'] === null) {
            $invalidProperties[] = "'product' can't be null";
        }
        if (!is_null($this->container['password']) && !preg_match("/^[-a-zA-Z0-9]{8,32}$/", $this->container['password'])) {
            $invalidProperties[] = "invalid value for 'password', must be conform to the pattern /^[-a-zA-Z0-9]{8,32}$/.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the 
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets created
     *
     * @return \DateTime
     */
    public function getCreated()
    {
        return $this->container['created'];
    }

    /**
     * Sets created
     *
     * @param \DateTime $created The created date.
     *
     * @return $this
     */
    public function setCreated($created)
    {
        $this->container['created'] = $created;

        return $this;
    }

    /**
     * Gets updated
     *
     * @return \DateTime
     */
    public function getUpdated()
    {
        return $this->container['updated'];
    }

    /**
     * Sets updated
     *
     * @param \DateTime $updated The updated date.
     *
     * @return $this
     */
    public function setUpdated($updated)
    {
        $this->container['updated'] = $updated;

        return $this;
    }

    /**
     * Gets owner
     *
     * @return \Domainrobot\Model\BasicUser
     */
    public function getOwner()
    {
        return $this->container['owner'];
    }

    /**
     * Sets owner
     *
     * @param \Domainrobot\Model\BasicUser $owner The owner of the object.
     *
     * @return $this
     */
    public function setOwner($owner)
    {
        $this->container['owner'] = $owner;

        return $this;
    }

    /**
     * Gets updater
     *
     * @return \Domainrobot\Model\BasicUser
     */
    public function getUpdater()
    {
        return $this->container['updater'];
    }

    /**
     * Sets updater
     *
     * @param \Domainrobot\Model\BasicUser $updater The updating user of the object.
     *
     * @return $this
     */
    public function setUpdater($updater)
    {
        $this->container['updater'] = $updater;

        return $this;
    }

    /**
     * Gets extension
     *
     * @return \Domainrobot\Model\ExtendedValidationExtension
     */
    public function getExtension()
    {
        return $this->container['extension'];
    }

    /**
     * Sets extension
     *
     * @param \Domainrobot\Model\ExtendedValidationExtension $extension The certificate extensions for comodo.
     *
     * @return $this
     */
    public function setExtension($extension)
    {
        $this->container['extension'] = $extension;

        return $this;
    }

    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id The ID of the certificate
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets partner_order_id
     *
     * @return string
     */
    public function getPartnerOrderId()
    {
        return $this->container['partner_order_id'];
    }

    /**
     * Sets partner_order_id
     *
     * @param string $partner_order_id The order number of the related request
     *
     * @return $this
     */
    public function setPartnerOrderId($partner_order_id)
    {
        $this->container['partner_order_id'] = $partner_order_id;

        return $this;
    }

    /**
     * Gets order_id
     *
     * @return string
     */
    public function getOrderId()
    {
        return $this->container['order_id'];
    }

    /**
     * Sets order_id
     *
     * @param string $order_id The unique certificate order number
     *
     * @return $this
     */
    public function setOrderId($order_id)
    {
        $this->container['order_id'] = $order_id;

        return $this;
    }

    /**
     * Gets admin_contact
     *
     * @return \Domainrobot\Model\SslContact
     */
    public function getAdminContact()
    {
        return $this->container['admin_contact'];
    }

    /**
     * Sets admin_contact
     *
     * @param \Domainrobot\Model\SslContact $admin_contact The administrative contact
     *
     * @return $this
     */
    public function setAdminContact($admin_contact)
    {
        $this->container['admin_contact'] = $admin_contact;

        return $this;
    }

    /**
     * Gets technical_contact
     *
     * @return \Domainrobot\Model\SslContact
     */
    public function getTechnicalContact()
    {
        return $this->container['technical_contact'];
    }

    /**
     * Sets technical_contact
     *
     * @param \Domainrobot\Model\SslContact $technical_contact The technical contact
     *
     * @return $this
     */
    public function setTechnicalContact($technical_contact)
    {
        $this->container['technical_contact'] = $technical_contact;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name The name of the certificate
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets lifetime
     *
     * @return \Domainrobot\Model\TimePeriod
     */
    public function getLifetime()
    {
        return $this->container['lifetime'];
    }

    /**
     * Sets lifetime
     *
     * @param \Domainrobot\Model\TimePeriod $lifetime The certificate term in months
     *
     * @return $this
     */
    public function setLifetime($lifetime)
    {
        $this->container['lifetime'] = $lifetime;

        return $this;
    }

    /**
     * Gets software
     *
     * @return \Domainrobot\Model\ServerSoftwareTypeConstants
     */
    public function getSoftware()
    {
        return $this->container['software'];
    }

    /**
     * Sets software
     *
     * @param \Domainrobot\Model\ServerSoftwareTypeConstants $software The webserver software in use, relevant values: 'II5' for Mircosoft, 'APACHE2' for Linux
     *
     * @return $this
     */
    public function setSoftware($software)
    {
        $this->container['software'] = $software;

        return $this;
    }

    /**
     * Gets comment
     *
     * @return string
     */
    public function getComment()
    {
        return $this->container['comment'];
    }

    /**
     * Sets comment
     *
     * @param string $comment A custom field. Can only be updated via PUT /certificate/{id}/_comment. Requires appropriate ACLs.
     *
     * @return $this
     */
    public function setComment($comment)
    {
        $this->container['comment'] = $comment;

        return $this;
    }

    /**
     * Gets csr
     *
     * @return string
     */
    public function getCsr()
    {
        return $this->container['csr'];
    }

    /**
     * Sets csr
     *
     * @param string $csr CSR - Key (Certificate Signing Request)
     *
     * @return $this
     */
    public function setCsr($csr)
    {
        $this->container['csr'] = $csr;

        return $this;
    }

    /**
     * Gets server
     *
     * @return string
     */
    public function getServer()
    {
        return $this->container['server'];
    }

    /**
     * Sets server
     *
     * @param string $server The certificate
     *
     * @return $this
     */
    public function setServer($server)
    {
        $this->container['server'] = $server;

        return $this;
    }

    /**
     * Gets serial_number
     *
     * @return string
     */
    public function getSerialNumber()
    {
        return $this->container['serial_number'];
    }

    /**
     * Sets serial_number
     *
     * @param string $serial_number Serial number of the certificate
     *
     * @return $this
     */
    public function setSerialNumber($serial_number)
    {
        $this->container['serial_number'] = $serial_number;

        return $this;
    }

    /**
     * Gets product
     *
     * @return string
     */
    public function getProduct()
    {
        return $this->container['product'];
    }

    /**
     * Sets product
     *
     * @param string $product The ordered product
     *
     * @return $this
     */
    public function setProduct($product)
    {
        $this->container['product'] = $product;

        return $this;
    }

    /**
     * Gets code_signing_type
     *
     * @return \Domainrobot\Model\CodeSigningType
     */
    public function getCodeSigningType()
    {
        return $this->container['code_signing_type'];
    }

    /**
     * Sets code_signing_type
     *
     * @param \Domainrobot\Model\CodeSigningType $code_signing_type The type of code signing
     *
     * @return $this
     */
    public function setCodeSigningType($code_signing_type)
    {
        $this->container['code_signing_type'] = $code_signing_type;

        return $this;
    }

    /**
     * Gets certificate_type
     *
     * @return \Domainrobot\Model\CertificateType
     */
    public function getCertificateType()
    {
        return $this->container['certificate_type'];
    }

    /**
     * Sets certificate_type
     *
     * @param \Domainrobot\Model\CertificateType $certificate_type The type of the certificate
     *
     * @return $this
     */
    public function setCertificateType($certificate_type)
    {
        $this->container['certificate_type'] = $certificate_type;

        return $this;
    }

    /**
     * Gets signature_hash_algorithm
     *
     * @return \Domainrobot\Model\SignatureHashAlgorithmConstants
     */
    public function getSignatureHashAlgorithm()
    {
        return $this->container['signature_hash_algorithm'];
    }

    /**
     * Sets signature_hash_algorithm
     *
     * @param \Domainrobot\Model\SignatureHashAlgorithmConstants $signature_hash_algorithm The signature hash algorithm which was used
     *
     * @return $this
     */
    public function setSignatureHashAlgorithm($signature_hash_algorithm)
    {
        $this->container['signature_hash_algorithm'] = $signature_hash_algorithm;

        return $this;
    }

    /**
     * Gets expire
     *
     * @return \DateTime
     */
    public function getExpire()
    {
        return $this->container['expire'];
    }

    /**
     * Sets expire
     *
     * @param \DateTime $expire The date on which the certificate expires
     *
     * @return $this
     */
    public function setExpire($expire)
    {
        $this->container['expire'] = $expire;

        return $this;
    }

    /**
     * Gets subject_alternative_names
     *
     * @return \Domainrobot\Model\SubjectAlternativeName[]
     */
    public function getSubjectAlternativeNames()
    {
        return $this->container['subject_alternative_names'];
    }

    /**
     * Sets subject_alternative_names
     *
     * @param \Domainrobot\Model\SubjectAlternativeName[] $subject_alternative_names Subject Alternative Names (SANs)
     *
     * @return $this
     */
    public function setSubjectAlternativeNames($subject_alternative_names)
    {
        $this->container['subject_alternative_names'] = $subject_alternative_names;

        return $this;
    }

    /**
     * Gets histories
     *
     * @return \Domainrobot\Model\CertificateHistory[]
     */
    public function getHistories()
    {
        return $this->container['histories'];
    }

    /**
     * Sets histories
     *
     * @param \Domainrobot\Model\CertificateHistory[] $histories The history of the certificate (old certificate versions)
     *
     * @return $this
     */
    public function setHistories($histories)
    {
        $this->container['histories'] = $histories;

        return $this;
    }

    /**
     * Gets certification_authority
     *
     * @return \Domainrobot\Model\CaCertificate[]
     */
    public function getCertificationAuthority()
    {
        return $this->container['certification_authority'];
    }

    /**
     * Sets certification_authority
     *
     * @param \Domainrobot\Model\CaCertificate[] $certification_authority The certificate authority chain
     *
     * @return $this
     */
    public function setCertificationAuthority($certification_authority)
    {
        $this->container['certification_authority'] = $certification_authority;

        return $this;
    }

    /**
     * Gets password
     *
     * @return string
     */
    public function getPassword()
    {
        return $this->container['password'];
    }

    /**
     * Sets password
     *
     * @param string $password The password that is to be used for the certificate download. Only for S/MIME!
     *
     * @return $this
     */
    public function setPassword($password)
    {

        if (!is_null($password) && (!preg_match("/^[-a-zA-Z0-9]{8,32}$/", $password))) {
            throw new \InvalidArgumentException("invalid value for $password when calling Certificate., must conform to the pattern /^[-a-zA-Z0-9]{8,32}$/.");
        }

        $this->container['password'] = $password;

        return $this;
    }

    /**
     * Gets firstname
     *
     * @return string
     */
    public function getFirstname()
    {
        return $this->container['firstname'];
    }

    /**
     * Sets firstname
     *
     * @param string $firstname First Name. Only for S/MIME!
     *
     * @return $this
     */
    public function setFirstname($firstname)
    {
        $this->container['firstname'] = $firstname;

        return $this;
    }

    /**
     * Gets lastname
     *
     * @return string
     */
    public function getLastname()
    {
        return $this->container['lastname'];
    }

    /**
     * Sets lastname
     *
     * @param string $lastname Last Name. Only for S/MIME!
     *
     * @return $this
     */
    public function setLastname($lastname)
    {
        $this->container['lastname'] = $lastname;

        return $this;
    }

    /**
     * Gets technical_contact_email
     *
     * @return string
     */
    public function getTechnicalContactEmail()
    {
        return $this->container['technical_contact_email'];
    }

    /**
     * Sets technical_contact_email
     *
     * @param string $technical_contact_email The technical contact email address. Only used in realtime orders!
     *
     * @return $this
     */
    public function setTechnicalContactEmail($technical_contact_email)
    {
        $this->container['technical_contact_email'] = $technical_contact_email;

        return $this;
    }

    /**
     * Gets organization_unit_name
     *
     * @return string
     */
    public function getOrganizationUnitName()
    {
        return $this->container['organization_unit_name'];
    }

    /**
     * Sets organization_unit_name
     *
     * @param string $organization_unit_name The organization unit. Only for S/MIME!
     *
     * @return $this
     */
    public function setOrganizationUnitName($organization_unit_name)
    {
        $this->container['organization_unit_name'] = $organization_unit_name;

        return $this;
    }

    /**
     * Gets authentication
     *
     * @return \Domainrobot\Model\CertAuthentication
     */
    public function getAuthentication()
    {
        return $this->container['authentication'];
    }

    /**
     * Sets authentication
     *
     * @param \Domainrobot\Model\CertAuthentication $authentication The authentication of the certificate
     *
     * @return $this
     */
    public function setAuthentication($authentication)
    {
        $this->container['authentication'] = $authentication;

        return $this;
    }

    /**
     * Gets certificate_transparency
     *
     * @return bool
     */
    public function getCertificateTransparency()
    {
        return $this->container['certificate_transparency'];
    }

    /**
     * Sets certificate_transparency
     *
     * @param bool $certificate_transparency Activates the certificate transparency for a certificate. Default is \"True\".
     *
     * @return $this
     */
    public function setCertificateTransparency($certificate_transparency)
    {
        $this->container['certificate_transparency'] = $certificate_transparency;

        return $this;
    }

    /**
     * Gets certificate_transparency_privacy
     *
     * @return \Domainrobot\Model\CertificateTransparencyPrivacyConstants
     */
    public function getCertificateTransparencyPrivacy()
    {
        return $this->container['certificate_transparency_privacy'];
    }

    /**
     * Sets certificate_transparency_privacy
     *
     * @param \Domainrobot\Model\CertificateTransparencyPrivacyConstants $certificate_transparency_privacy The privacy settings for certificate transparency. Default is \"Redacted\".
     *
     * @return $this
     */
    public function setCertificateTransparencyPrivacy($certificate_transparency_privacy)
    {
        $this->container['certificate_transparency_privacy'] = $certificate_transparency_privacy;

        return $this;
    }

    /**
     * Gets domain
     *
     * @return string
     */
    public function getDomain()
    {
        return $this->container['domain'];
    }

    /**
     * Sets domain
     *
     * @param string $domain The domain, which the redirect belongs.
     *
     * @return $this
     */
    public function setDomain($domain)
    {
        $this->container['domain'] = $domain;

        return $this;
    }

    /**
     * Gets has_csr
     *
     * @return bool
     */
    public function getHasCsr()
    {
        return $this->container['has_csr'];
    }

    /**
     * Sets has_csr
     *
     * @param bool $has_csr States if a self created CSR is to be used for S/MIME. Default is false. Only for S/MIME!
     *
     * @return $this
     */
    public function setHasCsr($has_csr)
    {
        $this->container['has_csr'] = $has_csr;

        return $this;
    }

    /**
     * Gets idn
     *
     * @return string
     */
    public function getIdn()
    {
        return $this->container['idn'];
    }

    /**
     * Sets idn
     *
     * @param string $idn The IDN version of the URL of the target domain.
     *
     * @return $this
     */
    public function setIdn($idn)
    {
        $this->container['idn'] = $idn;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
    
    /**
     * @param boolean $removeEmptyValues [remove all empty values if true]
     * @param array $retrieveKeys [list of keys to get back in any case]
     * 
     * Examples:
     * toArray() => returns only non empty values
     * toArray(true) => returns all values
     */
    public function toArray($retrieveAllValues = false){
        $container = $this->container;
        foreach ($container as $key => &$value) {
            if (!$retrieveAllValues && empty($value)) {
                unset($container[$key]);
                continue;
            }
            
            if (gettype($value) === "object") {
                if(method_exists($value, 'toArray')) {
                    $value = $value->toArray();
                }else{
                    if(get_class($value) === "DateTime"){
                        $value = $value->format("Y-m-d\TH:i:s");
                    }else{
                        $value = (array) $value;
                    }
                }
            }
            if (is_array($value)) {
                foreach ($value as &$v) {
                    if (gettype($v) === "object") {
                        $v = $v->toArray();
                    }
                }
            }
        };
        return $container;
    }
}


