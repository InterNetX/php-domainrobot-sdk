<?php
/**
 * CertificateData
 *
 * PHP version 5
 *
 * @category Class
 * @package  Domainrobot
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Domainrobot JSON API
 *
 * Domainrobot JSON API for managing: Domains, SSL            Certificates, DNS and            much more.
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.16-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Domainrobot\Model;

use \ArrayAccess;
use \Domainrobot\ObjectSerializer;

/**
 * CertificateData Class Doc Comment
 *
 * @category Class
 * @package  Domainrobot
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class CertificateData implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'CertificateData';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'plain' => 'string',
        'name' => 'string',
        'san' => 'string[]',
        'histories' => '\Domainrobot\Model\CertificateHistory[]',
        'key_size' => 'int',
        'country_code' => 'string',
        'challenge_password' => 'string',
        'state' => 'string',
        'city' => 'string',
        'organization' => 'string',
        'organization_unit' => 'string',
        'email' => 'string',
        'product' => 'string',
        'authentication' => '\Domainrobot\Model\CertAuthentication[]',
        'algorithm' => '\Domainrobot\Model\CsrHashAlgorithmConstants',
        'signature_hash_algorithm' => '\Domainrobot\Model\SignatureHashAlgorithmConstants',
        'certificate' => '\Domainrobot\Model\Certificate',
        'idn' => 'string',
        'check_caa' => 'bool',
        'business_case' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'plain' => null,
        'name' => null,
        'san' => null,
        'histories' => null,
        'key_size' => 'int32',
        'country_code' => null,
        'challenge_password' => null,
        'state' => null,
        'city' => null,
        'organization' => null,
        'organization_unit' => null,
        'email' => null,
        'product' => null,
        'authentication' => null,
        'algorithm' => null,
        'signature_hash_algorithm' => null,
        'certificate' => null,
        'idn' => null,
        'check_caa' => null,
        'business_case' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'plain' => 'plain',
        'name' => 'name',
        'san' => 'san',
        'histories' => 'histories',
        'key_size' => 'keySize',
        'country_code' => 'countryCode',
        'challenge_password' => 'challengePassword',
        'state' => 'state',
        'city' => 'city',
        'organization' => 'organization',
        'organization_unit' => 'organizationUnit',
        'email' => 'email',
        'product' => 'product',
        'authentication' => 'authentication',
        'algorithm' => 'algorithm',
        'signature_hash_algorithm' => 'signatureHashAlgorithm',
        'certificate' => 'certificate',
        'idn' => 'idn',
        'check_caa' => 'checkCaa',
        'business_case' => 'businessCase'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'plain' => 'setPlain',
        'name' => 'setName',
        'san' => 'setSan',
        'histories' => 'setHistories',
        'key_size' => 'setKeySize',
        'country_code' => 'setCountryCode',
        'challenge_password' => 'setChallengePassword',
        'state' => 'setState',
        'city' => 'setCity',
        'organization' => 'setOrganization',
        'organization_unit' => 'setOrganizationUnit',
        'email' => 'setEmail',
        'product' => 'setProduct',
        'authentication' => 'setAuthentication',
        'algorithm' => 'setAlgorithm',
        'signature_hash_algorithm' => 'setSignatureHashAlgorithm',
        'certificate' => 'setCertificate',
        'idn' => 'setIdn',
        'check_caa' => 'setCheckCaa',
        'business_case' => 'setBusinessCase'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'plain' => 'getPlain',
        'name' => 'getName',
        'san' => 'getSan',
        'histories' => 'getHistories',
        'key_size' => 'getKeySize',
        'country_code' => 'getCountryCode',
        'challenge_password' => 'getChallengePassword',
        'state' => 'getState',
        'city' => 'getCity',
        'organization' => 'getOrganization',
        'organization_unit' => 'getOrganizationUnit',
        'email' => 'getEmail',
        'product' => 'getProduct',
        'authentication' => 'getAuthentication',
        'algorithm' => 'getAlgorithm',
        'signature_hash_algorithm' => 'getSignatureHashAlgorithm',
        'certificate' => 'getCertificate',
        'idn' => 'getIdn',
        'check_caa' => 'getCheckCaa',
        'business_case' => 'getBusinessCase'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['plain'] = isset($data['plain']) ? $this->createData($data['plain'], 'plain')  : null;
        $this->container['name'] = isset($data['name']) ? $this->createData($data['name'], 'name')  : null;
        $this->container['san'] = isset($data['san']) ? $this->createData($data['san'], 'san')  : null;
        $this->container['histories'] = isset($data['histories']) ? $this->createData($data['histories'], 'histories')  : null;
        $this->container['key_size'] = isset($data['key_size']) ? $this->createData($data['key_size'], 'key_size')  : null;
        $this->container['country_code'] = isset($data['country_code']) ? $this->createData($data['country_code'], 'country_code')  : null;
        $this->container['challenge_password'] = isset($data['challenge_password']) ? $this->createData($data['challenge_password'], 'challenge_password')  : null;
        $this->container['state'] = isset($data['state']) ? $this->createData($data['state'], 'state')  : null;
        $this->container['city'] = isset($data['city']) ? $this->createData($data['city'], 'city')  : null;
        $this->container['organization'] = isset($data['organization']) ? $this->createData($data['organization'], 'organization')  : null;
        $this->container['organization_unit'] = isset($data['organization_unit']) ? $this->createData($data['organization_unit'], 'organization_unit')  : null;
        $this->container['email'] = isset($data['email']) ? $this->createData($data['email'], 'email')  : null;
        $this->container['product'] = isset($data['product']) ? $this->createData($data['product'], 'product')  : null;
        $this->container['authentication'] = isset($data['authentication']) ? $this->createData($data['authentication'], 'authentication')  : null;
        $this->container['algorithm'] = isset($data['algorithm']) ? $this->createData($data['algorithm'], 'algorithm')  : null;
        $this->container['signature_hash_algorithm'] = isset($data['signature_hash_algorithm']) ? $this->createData($data['signature_hash_algorithm'], 'signature_hash_algorithm')  : null;
        $this->container['certificate'] = isset($data['certificate']) ? $this->createData($data['certificate'], 'certificate')  : null;
        $this->container['idn'] = isset($data['idn']) ? $this->createData($data['idn'], 'idn')  : null;
        $this->container['check_caa'] = isset($data['check_caa']) ? $this->createData($data['check_caa'], 'check_caa')  : null;
        $this->container['business_case'] = isset($data['business_case']) ? $this->createData($data['business_case'], 'business_case')  : null;
    }

    /**
    *
    * @param mixed[] $data
    * @param string $property
    * @return mixed
    */
    public function createData($data = null, $property){
        if($data === null){
            return '';
        }
        $swaggerType = self::$swaggerTypes[$property];

        preg_match("/([\\\\\w\d]+)(\[\])?/", $swaggerType, $matches);

        if(count($matches) > 0 && count($matches) < 3){
            try {
                $reflection = new \ReflectionClass($swaggerType);
                $reflectionInstance = $reflection->newInstance($data);

                return $reflectionInstance;
            }catch(\Exception $ex){
                return $data;
            }
        }else if(count($matches) >= 3){
            $reflectionInstances = [];
            foreach($data as $d){
                try {
                    $reflection = new \ReflectionClass(str_replace("[]", "", $swaggerType) );
                    $reflectionInstances[] = $reflection->newInstance($d);

                    return $reflectionInstances;
                } catch (\Exception $ex) {
                    return $data;
                }
            }
        }

        return $data;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the 
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets plain
     *
     * @return string
     */
    public function getPlain()
    {
        return $this->container['plain'];
    }

    /**
     * Sets plain
     *
     * @param string $plain The plain csr.
     *
     * @return $this
     */
    public function setPlain($plain)
    {
        $this->container['plain'] = $plain;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name The common name.
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets san
     *
     * @return string[]
     */
    public function getSan()
    {
        return $this->container['san'];
    }

    /**
     * Sets san
     *
     * @param string[] $san The subject alternative names, listed in the csr.
     *
     * @return $this
     */
    public function setSan($san)
    {
        $this->container['san'] = $san;

        return $this;
    }

    /**
     * Gets histories
     *
     * @return \Domainrobot\Model\CertificateHistory[]
     */
    public function getHistories()
    {
        return $this->container['histories'];
    }

    /**
     * Sets histories
     *
     * @param \Domainrobot\Model\CertificateHistory[] $histories The certificate history.
     *
     * @return $this
     */
    public function setHistories($histories)
    {
        $this->container['histories'] = $histories;

        return $this;
    }

    /**
     * Gets key_size
     *
     * @return int
     */
    public function getKeySize()
    {
        return $this->container['key_size'];
    }

    /**
     * Sets key_size
     *
     * @param int $key_size The size of the csr key.
     *
     * @return $this
     */
    public function setKeySize($key_size)
    {
        $this->container['key_size'] = $key_size;

        return $this;
    }

    /**
     * Gets country_code
     *
     * @return string
     */
    public function getCountryCode()
    {
        return $this->container['country_code'];
    }

    /**
     * Sets country_code
     *
     * @param string $country_code The country code defined in the csr.
     *
     * @return $this
     */
    public function setCountryCode($country_code)
    {
        $this->container['country_code'] = $country_code;

        return $this;
    }

    /**
     * Gets challenge_password
     *
     * @return string
     */
    public function getChallengePassword()
    {
        return $this->container['challenge_password'];
    }

    /**
     * Sets challenge_password
     *
     * @param string $challenge_password The password defined in the csr.
     *
     * @return $this
     */
    public function setChallengePassword($challenge_password)
    {
        $this->container['challenge_password'] = $challenge_password;

        return $this;
    }

    /**
     * Gets state
     *
     * @return string
     */
    public function getState()
    {
        return $this->container['state'];
    }

    /**
     * Sets state
     *
     * @param string $state The state defined in the csr.
     *
     * @return $this
     */
    public function setState($state)
    {
        $this->container['state'] = $state;

        return $this;
    }

    /**
     * Gets city
     *
     * @return string
     */
    public function getCity()
    {
        return $this->container['city'];
    }

    /**
     * Sets city
     *
     * @param string $city The city defined in the csr.
     *
     * @return $this
     */
    public function setCity($city)
    {
        $this->container['city'] = $city;

        return $this;
    }

    /**
     * Gets organization
     *
     * @return string
     */
    public function getOrganization()
    {
        return $this->container['organization'];
    }

    /**
     * Sets organization
     *
     * @param string $organization The organization defined in the csr.
     *
     * @return $this
     */
    public function setOrganization($organization)
    {
        $this->container['organization'] = $organization;

        return $this;
    }

    /**
     * Gets organization_unit
     *
     * @return string
     */
    public function getOrganizationUnit()
    {
        return $this->container['organization_unit'];
    }

    /**
     * Sets organization_unit
     *
     * @param string $organization_unit The organization unit defined in the csr.
     *
     * @return $this
     */
    public function setOrganizationUnit($organization_unit)
    {
        $this->container['organization_unit'] = $organization_unit;

        return $this;
    }

    /**
     * Gets email
     *
     * @return string
     */
    public function getEmail()
    {
        return $this->container['email'];
    }

    /**
     * Sets email
     *
     * @param string $email The email defined in the csr.
     *
     * @return $this
     */
    public function setEmail($email)
    {
        $this->container['email'] = $email;

        return $this;
    }

    /**
     * Gets product
     *
     * @return string
     */
    public function getProduct()
    {
        return $this->container['product'];
    }

    /**
     * Sets product
     *
     * @param string $product The ssl product.
     *
     * @return $this
     */
    public function setProduct($product)
    {
        $this->container['product'] = $product;

        return $this;
    }

    /**
     * Gets authentication
     *
     * @return \Domainrobot\Model\CertAuthentication[]
     */
    public function getAuthentication()
    {
        return $this->container['authentication'];
    }

    /**
     * Sets authentication
     *
     * @param \Domainrobot\Model\CertAuthentication[] $authentication The authentication data.
     *
     * @return $this
     */
    public function setAuthentication($authentication)
    {
        $this->container['authentication'] = $authentication;

        return $this;
    }

    /**
     * Gets algorithm
     *
     * @return \Domainrobot\Model\CsrHashAlgorithmConstants
     */
    public function getAlgorithm()
    {
        return $this->container['algorithm'];
    }

    /**
     * Sets algorithm
     *
     * @param \Domainrobot\Model\CsrHashAlgorithmConstants $algorithm The csr algorithm.
     *
     * @return $this
     */
    public function setAlgorithm($algorithm)
    {
        $this->container['algorithm'] = $algorithm;

        return $this;
    }

    /**
     * Gets signature_hash_algorithm
     *
     * @return \Domainrobot\Model\SignatureHashAlgorithmConstants
     */
    public function getSignatureHashAlgorithm()
    {
        return $this->container['signature_hash_algorithm'];
    }

    /**
     * Sets signature_hash_algorithm
     *
     * @param \Domainrobot\Model\SignatureHashAlgorithmConstants $signature_hash_algorithm The signature hash algorithm.
     *
     * @return $this
     */
    public function setSignatureHashAlgorithm($signature_hash_algorithm)
    {
        $this->container['signature_hash_algorithm'] = $signature_hash_algorithm;

        return $this;
    }

    /**
     * Gets certificate
     *
     * @return \Domainrobot\Model\Certificate
     */
    public function getCertificate()
    {
        return $this->container['certificate'];
    }

    /**
     * Sets certificate
     *
     * @param \Domainrobot\Model\Certificate $certificate The certificat. Only necessary if used before reissue, renew and delete.
     *
     * @return $this
     */
    public function setCertificate($certificate)
    {
        $this->container['certificate'] = $certificate;

        return $this;
    }

    /**
     * Gets idn
     *
     * @return string
     */
    public function getIdn()
    {
        return $this->container['idn'];
    }

    /**
     * Sets idn
     *
     * @param string $idn The idn version of the common name.
     *
     * @return $this
     */
    public function setIdn($idn)
    {
        $this->container['idn'] = $idn;

        return $this;
    }

    /**
     * Gets check_caa
     *
     * @return bool
     */
    public function getCheckCaa()
    {
        return $this->container['check_caa'];
    }

    /**
     * Sets check_caa
     *
     * @param bool $check_caa Activates the caa record check.
     *
     * @return $this
     */
    public function setCheckCaa($check_caa)
    {
        $this->container['check_caa'] = $check_caa;

        return $this;
    }

    /**
     * Gets business_case
     *
     * @return string
     */
    public function getBusinessCase()
    {
        return $this->container['business_case'];
    }

    /**
     * Sets business_case
     *
     * @param string $business_case Describes the business case (CREATE, RENEW, REISSUE, DELETE) for which preparation is to be performed.
     *
     * @return $this
     */
    public function setBusinessCase($business_case)
    {
        $this->container['business_case'] = $business_case;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
    
    /**
     * @param boolean $removeEmptyValues [remove all empty values if true]
     * @param array $retrieveKeys [list of keys to get back in any case]
     * 
     * Examples:
     * toArray() => returns only non empty values
     * toArray(true) => returns all values
     */
    public function toArray($retrieveAllValues = false){
        $container = $this->container;
        foreach ($container as $key => &$value) {
            if (!$retrieveAllValues && empty($value)) {
                unset($container[$key]);
                continue;
            }
            
            if (gettype($value) === "object") {
                if(method_exists($value, 'toArray')) {
                    $value = $value->toArray();
                }else{
                    if(get_class($value) === "DateTime"){
                        $value = $value->format("Y-m-d\TH:i:s");
                    }else{
                        $value = (array) $value;
                    }
                }
            }
            if (is_array($value)) {
                foreach ($value as &$v) {
                    if (gettype($v) === "object") {
                        $v = $v->toArray();
                    }
                }
            }
        };
        return $container;
    }
}


