<?php
/**
 * DomainActionConstants
 *
 * PHP version 5
 *
 * @category Class
 * @package  Domainrobot
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Domainrobot JSON API
 *
 * Domainrobot JSON API for managing: Domains, SSL            Certificates, DNS and            much more.
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.16-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Domainrobot\Model;
use \Domainrobot\ObjectSerializer;

/**
 * DomainActionConstants Class Doc Comment
 *
 * @category Class
 * @package  Domainrobot
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class DomainActionConstants
{
    /**
     * Possible values of this enum
     */
    const CREATE = 'CREATE';
    const UPDATE = 'UPDATE';
    const UPDATE_OWNER_CHANGE = 'UPDATE_OWNER_CHANGE';
    const UPDATE_DNSSEC = 'UPDATE_DNSSEC';
    const UPDATE_NAMESERVER = 'UPDATE_NAMESERVER';
    const DELETE = 'DELETE';
    const TRANSIT = 'TRANSIT';
    const TRANSFER = 'TRANSFER';
    const TRANSFER_INTERN = 'TRANSFER_INTERN';
    const TRANSFER_INTERN_REGISTRAR_CHANGE = 'TRANSFER_INTERN_REGISTRAR_CHANGE';
    const TRANSFER_INTERN_REGISTRAR_CHANGE_RUNTIME_TAKEOVER = 'TRANSFER_INTERN_REGISTRAR_CHANGE_RUNTIME_TAKEOVER';
    const IMPORT = 'IMPORT';
    const MIGRATE = 'MIGRATE';
    const RESTORE = 'RESTORE';
    const RESTORE_NE = 'RESTORE_NE';
    const RESTORE_RENEW = 'RESTORE_RENEW';
    const RESTORE_ARGP = 'RESTORE_ARGP';
    const RENEW = 'RENEW';
    const AUTHINFO = 'AUTHINFO';
    const AUTHINFO_2 = 'AUTHINFO_2';
    const UPDATE_STATUS = 'UPDATE_STATUS';
    const REGISTRAR_UPDATE_STATUS = 'REGISTRAR_UPDATE_STATUS';
    const UPDATE_COMMENT = 'UPDATE_COMMENT';
    const AUTOUPDATE_DNS = 'AUTOUPDATE_DNS';
    const OWNERCHANGE = 'OWNERCHANGE';
    const OWNERCHANGE_TRANSFER = 'OWNERCHANGE_TRANSFER';
    const OWNERCHANGE_TRANSFER_INTERN = 'OWNERCHANGE_TRANSFER_INTERN';
    const OWNERCHANGE_TRANSFER_INTERN_REGISTRAR_CHANGE = 'OWNERCHANGE_TRANSFER_INTERN_REGISTRAR_CHANGE';
    const PREACK = 'PREACK';
    const WHOIS_REGISTRY_STATUS = 'WHOIS_REGISTRY_STATUS';
    const DOMAIN_AWAY = 'DOMAIN_AWAY';
    const TRANSFER_OUT_AUTOACK = 'TRANSFER_OUT_AUTOACK';
    const DROP = 'DROP';
    const AUTHINFO_CREATE = 'AUTHINFO_CREATE';
    const AUTHINFO_DELETE = 'AUTHINFO_DELETE';
    const AUTOUPDATE_DEFERRED = 'AUTOUPDATE_DEFERRED';
    const DOMAIN_BUY = 'DOMAIN_BUY';
    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public static function getAllowableEnumValues()
    {
        return [
            self::CREATE,
            self::UPDATE,
            self::UPDATE_OWNER_CHANGE,
            self::UPDATE_DNSSEC,
            self::UPDATE_NAMESERVER,
            self::DELETE,
            self::TRANSIT,
            self::TRANSFER,
            self::TRANSFER_INTERN,
            self::TRANSFER_INTERN_REGISTRAR_CHANGE,
            self::TRANSFER_INTERN_REGISTRAR_CHANGE_RUNTIME_TAKEOVER,
            self::IMPORT,
            self::MIGRATE,
            self::RESTORE,
            self::RESTORE_NE,
            self::RESTORE_RENEW,
            self::RESTORE_ARGP,
            self::RENEW,
            self::AUTHINFO,
            self::AUTHINFO_2,
            self::UPDATE_STATUS,
            self::REGISTRAR_UPDATE_STATUS,
            self::UPDATE_COMMENT,
            self::AUTOUPDATE_DNS,
            self::OWNERCHANGE,
            self::OWNERCHANGE_TRANSFER,
            self::OWNERCHANGE_TRANSFER_INTERN,
            self::OWNERCHANGE_TRANSFER_INTERN_REGISTRAR_CHANGE,
            self::PREACK,
            self::WHOIS_REGISTRY_STATUS,
            self::DOMAIN_AWAY,
            self::TRANSFER_OUT_AUTOACK,
            self::DROP,
            self::AUTHINFO_CREATE,
            self::AUTHINFO_DELETE,
            self::AUTOUPDATE_DEFERRED,
            self::DOMAIN_BUY,
        ];
    }
}


