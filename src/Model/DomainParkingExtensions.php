<?php
/**
 * DomainParkingExtensions
 *
 * PHP version 5
 *
 * @category Class
 * @package  Domainrobot
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Domainrobot JSON API
 *
 * Domainrobot JSON API for managing: Domains, SSL            Certificates, DNS and            much more.
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.12-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Domainrobot\Model;

use \ArrayAccess;
use \Domainrobot\ObjectSerializer;

/**
 * DomainParkingExtensions Class Doc Comment
 *
 * @category Class
 * @package  Domainrobot
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class DomainParkingExtensions implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'DomainParkingExtensions';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'parkingCategory' => 'string',
        'currency' => 'string',
        'domainLanguage' => 'string',
        'forSale' => 'bool',
        'keyword' => 'string',
        'price' => 'double',
        'fixedPrice' => 'bool',
        'minPrice' => 'double'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'parkingCategory' => null,
        'currency' => null,
        'domainLanguage' => null,
        'forSale' => null,
        'keyword' => null,
        'price' => 'double',
        'fixedPrice' => null,
        'minPrice' => 'double'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'parkingCategory' => 'parkingCategory',
        'currency' => 'currency',
        'domainLanguage' => 'domainLanguage',
        'forSale' => 'forSale',
        'keyword' => 'keyword',
        'price' => 'price',
        'fixedPrice' => 'fixedPrice',
        'minPrice' => 'minPrice'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'parkingCategory' => 'setParkingCategory',
        'currency' => 'setCurrency',
        'domainLanguage' => 'setDomainLanguage',
        'forSale' => 'setForSale',
        'keyword' => 'setKeyword',
        'price' => 'setPrice',
        'fixedPrice' => 'setFixedPrice',
        'minPrice' => 'setMinPrice'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'parkingCategory' => 'getParkingCategory',
        'currency' => 'getCurrency',
        'domainLanguage' => 'getDomainLanguage',
        'forSale' => 'getForSale',
        'keyword' => 'getKeyword',
        'price' => 'getPrice',
        'fixedPrice' => 'getFixedPrice',
        'minPrice' => 'getMinPrice'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['parkingCategory'] = isset($data['parkingCategory']) ? $data['parkingCategory'] : null;
        $this->container['currency'] = isset($data['currency']) ? $data['currency'] : null;
        $this->container['domainLanguage'] = isset($data['domainLanguage']) ? $data['domainLanguage'] : null;
        $this->container['forSale'] = isset($data['forSale']) ? $data['forSale'] : null;
        $this->container['keyword'] = isset($data['keyword']) ? $data['keyword'] : null;
        $this->container['price'] = isset($data['price']) ? $data['price'] : null;
        $this->container['fixedPrice'] = isset($data['fixedPrice']) ? $data['fixedPrice'] : null;
        $this->container['minPrice'] = isset($data['minPrice']) ? $data['minPrice'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets parkingCategory
     *
     * @return string
     */
    public function getParkingCategory()
    {
        return $this->container['parkingCategory'];
    }

    /**
     * Sets parkingCategory
     *
     * @param string $parkingCategory parkingCategory
     *
     * @return $this
     */
    public function setParkingCategory($parkingCategory)
    {
        $this->container['parkingCategory'] = $parkingCategory;

        return $this;
    }

    /**
     * Gets currency
     *
     * @return string
     */
    public function getCurrency()
    {
        return $this->container['currency'];
    }

    /**
     * Sets currency
     *
     * @param string $currency The currency of the sale
     *
     * @return $this
     */
    public function setCurrency($currency)
    {
        $this->container['currency'] = $currency;

        return $this;
    }

    /**
     * Gets domainLanguage
     *
     * @return string
     */
    public function getDomainLanguage()
    {
        return $this->container['domainLanguage'];
    }

    /**
     * Sets domainLanguage
     *
     * @param string $domainLanguage The parking
     *
     * @return $this
     */
    public function setDomainLanguage($domainLanguage)
    {
        $this->container['domainLanguage'] = $domainLanguage;

        return $this;
    }

    /**
     * Gets forSale
     *
     * @return bool
     */
    public function getForSale()
    {
        return $this->container['forSale'];
    }

    /**
     * Sets forSale
     *
     * @param bool $forSale Should the domain be listed for sale
     *
     * @return $this
     */
    public function setForSale($forSale)
    {
        $this->container['forSale'] = $forSale;

        return $this;
    }

    /**
     * Gets keyword
     *
     * @return string
     */
    public function getKeyword()
    {
        return $this->container['keyword'];
    }

    /**
     * Sets keyword
     *
     * @param string $keyword The keywords to use
     *
     * @return $this
     */
    public function setKeyword($keyword)
    {
        $this->container['keyword'] = $keyword;

        return $this;
    }

    /**
     * Gets price
     *
     * @return double
     */
    public function getPrice()
    {
        return $this->container['price'];
    }

    /**
     * Sets price
     *
     * @param double $price The price to use
     *
     * @return $this
     */
    public function setPrice($price)
    {
        $this->container['price'] = $price;

        return $this;
    }

    /**
     * Gets fixedPrice
     *
     * @return bool
     */
    public function getFixedPrice()
    {
        return $this->container['fixedPrice'];
    }

    /**
     * Sets fixedPrice
     *
     * @param bool $fixedPrice Is the price fix
     *
     * @return $this
     */
    public function setFixedPrice($fixedPrice)
    {
        $this->container['fixedPrice'] = $fixedPrice;

        return $this;
    }

    /**
     * Gets minPrice
     *
     * @return double
     */
    public function getMinPrice()
    {
        return $this->container['minPrice'];
    }

    /**
     * Sets minPrice
     *
     * @param double $minPrice The minimum of price
     *
     * @return $this
     */
    public function setMinPrice($minPrice)
    {
        $this->container['minPrice'] = $minPrice;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
    
    /**
     * @param boolean $removeEmptyValues [remove all empty values if true]
     * @param array $retrieveKeys [list of keys to get back in any case]
     * 
     * Examples:
     * toArray() => returns only non empty values
     * toArray(true) => returns all values
     */
    public function toArray($retrieveAllValues = false){
        $container = $this->container;
        foreach($container as $key => &$value){
            if(!$retrieveAllValues && empty($value)){
                unset($container[$key]);
                continue;
            }
            
            if(gettype($value) === "object"){
                $value = $value->toArray();
            }
            if(is_array($value)){
                foreach($value as &$v){
                    if (gettype($v) === "object") {
                        $v = $v->toArray();
                    }
                }
            }
        };
        return $container;
    }
}


