<?php
/**
 * DomainPreregAddon
 *
 * PHP version 5
 *
 * @category Class
 * @package  Domainrobot
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Domainrobot JSON API
 *
 * Domainrobot JSON API for managing: Domains, SSL            Certificates, DNS and            much more.
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.16-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Domainrobot\Model;

use \ArrayAccess;
use \Domainrobot\ObjectSerializer;

/**
 * DomainPreregAddon Class Doc Comment
 *
 * @category Class
 * @package  Domainrobot
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class DomainPreregAddon implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'DomainPreregAddon';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'irp_app_capacit' => 'string',
        'irp_app_date' => '\DateTime',
        'irp_cc_locality' => 'string',
        'irp_name' => 'string',
        'irp_number' => 'string',
        'irp_pvrc' => 'string',
        'irp_reg_date' => '\DateTime',
        'mode' => 'string',
        'confirm_order' => 'bool',
        'external_reference' => 'string',
        'not_after' => '\DateTime',
        'confirmed' => '\DateTime',
        'confirm_ip' => 'string',
        'price_class' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'irp_app_capacit' => null,
        'irp_app_date' => 'date-time',
        'irp_cc_locality' => null,
        'irp_name' => null,
        'irp_number' => null,
        'irp_pvrc' => null,
        'irp_reg_date' => 'date-time',
        'mode' => null,
        'confirm_order' => null,
        'external_reference' => null,
        'not_after' => 'date-time',
        'confirmed' => 'date-time',
        'confirm_ip' => null,
        'price_class' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'irp_app_capacit' => 'irpAppCapacit',
        'irp_app_date' => 'irpAppDate',
        'irp_cc_locality' => 'irpCcLocality',
        'irp_name' => 'irpName',
        'irp_number' => 'irpNumber',
        'irp_pvrc' => 'irpPvrc',
        'irp_reg_date' => 'irpRegDate',
        'mode' => 'mode',
        'confirm_order' => 'confirmOrder',
        'external_reference' => 'externalReference',
        'not_after' => 'notAfter',
        'confirmed' => 'confirmed',
        'confirm_ip' => 'confirmIp',
        'price_class' => 'priceClass'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'irp_app_capacit' => 'setIrpAppCapacit',
        'irp_app_date' => 'setIrpAppDate',
        'irp_cc_locality' => 'setIrpCcLocality',
        'irp_name' => 'setIrpName',
        'irp_number' => 'setIrpNumber',
        'irp_pvrc' => 'setIrpPvrc',
        'irp_reg_date' => 'setIrpRegDate',
        'mode' => 'setMode',
        'confirm_order' => 'setConfirmOrder',
        'external_reference' => 'setExternalReference',
        'not_after' => 'setNotAfter',
        'confirmed' => 'setConfirmed',
        'confirm_ip' => 'setConfirmIp',
        'price_class' => 'setPriceClass'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'irp_app_capacit' => 'getIrpAppCapacit',
        'irp_app_date' => 'getIrpAppDate',
        'irp_cc_locality' => 'getIrpCcLocality',
        'irp_name' => 'getIrpName',
        'irp_number' => 'getIrpNumber',
        'irp_pvrc' => 'getIrpPvrc',
        'irp_reg_date' => 'getIrpRegDate',
        'mode' => 'getMode',
        'confirm_order' => 'getConfirmOrder',
        'external_reference' => 'getExternalReference',
        'not_after' => 'getNotAfter',
        'confirmed' => 'getConfirmed',
        'confirm_ip' => 'getConfirmIp',
        'price_class' => 'getPriceClass'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['irp_app_capacit'] = isset($data['irp_app_capacit']) ? $this->createData($data['irp_app_capacit'], 'irp_app_capacit')  : null;
        $this->container['irp_app_date'] = isset($data['irp_app_date']) ? $this->createData($data['irp_app_date'], 'irp_app_date')  : null;
        $this->container['irp_cc_locality'] = isset($data['irp_cc_locality']) ? $this->createData($data['irp_cc_locality'], 'irp_cc_locality')  : null;
        $this->container['irp_name'] = isset($data['irp_name']) ? $this->createData($data['irp_name'], 'irp_name')  : null;
        $this->container['irp_number'] = isset($data['irp_number']) ? $this->createData($data['irp_number'], 'irp_number')  : null;
        $this->container['irp_pvrc'] = isset($data['irp_pvrc']) ? $this->createData($data['irp_pvrc'], 'irp_pvrc')  : null;
        $this->container['irp_reg_date'] = isset($data['irp_reg_date']) ? $this->createData($data['irp_reg_date'], 'irp_reg_date')  : null;
        $this->container['mode'] = isset($data['mode']) ? $this->createData($data['mode'], 'mode')  : null;
        $this->container['confirm_order'] = isset($data['confirm_order']) ? $this->createData($data['confirm_order'], 'confirm_order')  : null;
        $this->container['external_reference'] = isset($data['external_reference']) ? $this->createData($data['external_reference'], 'external_reference')  : null;
        $this->container['not_after'] = isset($data['not_after']) ? $this->createData($data['not_after'], 'not_after')  : null;
        $this->container['confirmed'] = isset($data['confirmed']) ? $this->createData($data['confirmed'], 'confirmed')  : null;
        $this->container['confirm_ip'] = isset($data['confirm_ip']) ? $this->createData($data['confirm_ip'], 'confirm_ip')  : null;
        $this->container['price_class'] = isset($data['price_class']) ? $this->createData($data['price_class'], 'price_class')  : null;
    }

    /**
    *
    * @param mixed[] $data
    * @param string $property
    * @return mixed
    */
    public function createData($data = null, $property){
        if($data === null){
            return '';
        }
        $swaggerType = self::$swaggerTypes[$property];

        preg_match("/([\\\\\w\d]+)(\[\])?/", $swaggerType, $matches);

        if(count($matches) > 0 && count($matches) < 3){
            try {
                $reflection = new \ReflectionClass($swaggerType);
                $reflectionInstance = $reflection->newInstance($data);

                return $reflectionInstance;
            }catch(\Exception $ex){
                return $data;
            }
        }else if(count($matches) >= 3){
            $reflectionInstances = [];
            foreach($data as $d){
                try {
                    $reflection = new \ReflectionClass(str_replace("[]", "", $swaggerType) );
                    $reflectionInstances[] = $reflection->newInstance($d);

                    return $reflectionInstances;
                } catch (\Exception $ex) {
                    return $data;
                }
            }
        }

        return $data;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the 
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets irp_app_capacit
     *
     * @return string
     */
    public function getIrpAppCapacit()
    {
        return $this->container['irp_app_capacit'];
    }

    /**
     * Sets irp_app_capacit
     *
     * @param string $irp_app_capacit The Irp App Capacity.
     *
     * @return $this
     */
    public function setIrpAppCapacit($irp_app_capacit)
    {
        $this->container['irp_app_capacit'] = $irp_app_capacit;

        return $this;
    }

    /**
     * Gets irp_app_date
     *
     * @return \DateTime
     */
    public function getIrpAppDate()
    {
        return $this->container['irp_app_date'];
    }

    /**
     * Sets irp_app_date
     *
     * @param \DateTime $irp_app_date The Irp App Date.
     *
     * @return $this
     */
    public function setIrpAppDate($irp_app_date)
    {
        $this->container['irp_app_date'] = $irp_app_date;

        return $this;
    }

    /**
     * Gets irp_cc_locality
     *
     * @return string
     */
    public function getIrpCcLocality()
    {
        return $this->container['irp_cc_locality'];
    }

    /**
     * Sets irp_cc_locality
     *
     * @param string $irp_cc_locality The Irp Cc Locality.
     *
     * @return $this
     */
    public function setIrpCcLocality($irp_cc_locality)
    {
        $this->container['irp_cc_locality'] = $irp_cc_locality;

        return $this;
    }

    /**
     * Gets irp_name
     *
     * @return string
     */
    public function getIrpName()
    {
        return $this->container['irp_name'];
    }

    /**
     * Sets irp_name
     *
     * @param string $irp_name The Irp Name.
     *
     * @return $this
     */
    public function setIrpName($irp_name)
    {
        $this->container['irp_name'] = $irp_name;

        return $this;
    }

    /**
     * Gets irp_number
     *
     * @return string
     */
    public function getIrpNumber()
    {
        return $this->container['irp_number'];
    }

    /**
     * Sets irp_number
     *
     * @param string $irp_number The Irp Number.
     *
     * @return $this
     */
    public function setIrpNumber($irp_number)
    {
        $this->container['irp_number'] = $irp_number;

        return $this;
    }

    /**
     * Gets irp_pvrc
     *
     * @return string
     */
    public function getIrpPvrc()
    {
        return $this->container['irp_pvrc'];
    }

    /**
     * Sets irp_pvrc
     *
     * @param string $irp_pvrc The Irp Pvrc.
     *
     * @return $this
     */
    public function setIrpPvrc($irp_pvrc)
    {
        $this->container['irp_pvrc'] = $irp_pvrc;

        return $this;
    }

    /**
     * Gets irp_reg_date
     *
     * @return \DateTime
     */
    public function getIrpRegDate()
    {
        return $this->container['irp_reg_date'];
    }

    /**
     * Sets irp_reg_date
     *
     * @param \DateTime $irp_reg_date The Irp Reg Date.
     *
     * @return $this
     */
    public function setIrpRegDate($irp_reg_date)
    {
        $this->container['irp_reg_date'] = $irp_reg_date;

        return $this;
    }

    /**
     * Gets mode
     *
     * @return string
     */
    public function getMode()
    {
        return $this->container['mode'];
    }

    /**
     * Sets mode
     *
     * @param string $mode The addon update mode.
     *
     * @return $this
     */
    public function setMode($mode)
    {
        $this->container['mode'] = $mode;

        return $this;
    }

    /**
     * Gets confirm_order
     *
     * @return bool
     */
    public function getConfirmOrder()
    {
        return $this->container['confirm_order'];
    }

    /**
     * Sets confirm_order
     *
     * @param bool $confirm_order Confirm order.
     *
     * @return $this
     */
    public function setConfirmOrder($confirm_order)
    {
        $this->container['confirm_order'] = $confirm_order;

        return $this;
    }

    /**
     * Gets external_reference
     *
     * @return string
     */
    public function getExternalReference()
    {
        return $this->container['external_reference'];
    }

    /**
     * Sets external_reference
     *
     * @param string $external_reference The external reference.
     *
     * @return $this
     */
    public function setExternalReference($external_reference)
    {
        $this->container['external_reference'] = $external_reference;

        return $this;
    }

    /**
     * Gets not_after
     *
     * @return \DateTime
     */
    public function getNotAfter()
    {
        return $this->container['not_after'];
    }

    /**
     * Sets not_after
     *
     * @param \DateTime $not_after The not after date.
     *
     * @return $this
     */
    public function setNotAfter($not_after)
    {
        $this->container['not_after'] = $not_after;

        return $this;
    }

    /**
     * Gets confirmed
     *
     * @return \DateTime
     */
    public function getConfirmed()
    {
        return $this->container['confirmed'];
    }

    /**
     * Sets confirmed
     *
     * @param \DateTime $confirmed The confirmed date.
     *
     * @return $this
     */
    public function setConfirmed($confirmed)
    {
        $this->container['confirmed'] = $confirmed;

        return $this;
    }

    /**
     * Gets confirm_ip
     *
     * @return string
     */
    public function getConfirmIp()
    {
        return $this->container['confirm_ip'];
    }

    /**
     * Sets confirm_ip
     *
     * @param string $confirm_ip The confirm ip.
     *
     * @return $this
     */
    public function setConfirmIp($confirm_ip)
    {
        $this->container['confirm_ip'] = $confirm_ip;

        return $this;
    }

    /**
     * Gets price_class
     *
     * @return string
     */
    public function getPriceClass()
    {
        return $this->container['price_class'];
    }

    /**
     * Sets price_class
     *
     * @param string $price_class The price class.
     *
     * @return $this
     */
    public function setPriceClass($price_class)
    {
        $this->container['price_class'] = $price_class;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
    
    /**
     * @param boolean $removeEmptyValues [remove all empty values if true]
     * @param array $retrieveKeys [list of keys to get back in any case]
     * 
     * Examples:
     * toArray() => returns only non empty values
     * toArray(true) => returns all values
     */
    public function toArray($retrieveAllValues = false){
        $container = $this->container;
        foreach ($container as $key => &$value) {
            if (!$retrieveAllValues && empty($value)) {
                unset($container[$key]);
                continue;
            }
            
            if (gettype($value) === "object") {
                if(method_exists($value, 'toArray')) {
                    $value = $value->toArray();
                }else{
                    if(get_class($value) === "DateTime"){
                        $value = $value->format("Y-m-d\TH:i:s");
                    }else{
                        $value = (array) $value;
                    }
                }
            }
            if (is_array($value)) {
                foreach ($value as &$v) {
                    if (gettype($v) === "object") {
                        $v = $v->toArray();
                    }
                }
            }
        };
        return $container;
    }
}


