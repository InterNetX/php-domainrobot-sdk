<?php
/**
 * DomainRestore
 *
 * PHP version 5
 *
 * @category Class
 * @package  Domainrobot
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Domainrobot JSON API
 *
 * Domainrobot JSON API for managing: Domains, SSL            Certificates, DNS and            much more.
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.16-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Domainrobot\Model;

use \ArrayAccess;
use \Domainrobot\ObjectSerializer;

/**
 * DomainRestore Class Doc Comment
 *
 * @category Class
 * @package  Domainrobot
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class DomainRestore implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'DomainRestore';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'created' => '\DateTime',
        'updated' => '\DateTime',
        'owner' => '\Domainrobot\Model\BasicUser',
        'updater' => '\Domainrobot\Model\BasicUser',
        'name' => 'string',
        'idn' => 'string',
        'nic_member_label' => 'string',
        'registry_status' => '\Domainrobot\Model\RegistryStatusConstants',
        'name_servers' => '\Domainrobot\Model\NameServer[]',
        'name_server_entries' => 'string[]',
        'period' => '\Domainrobot\Model\TimePeriod',
        'trustee' => 'bool',
        'privacy' => 'bool',
        'authinfo' => 'string',
        'domainsafe' => 'bool',
        'parking' => '\Domainrobot\Model\ParkingProviderConstants',
        'extensions' => '\Domainrobot\Model\DomainExtensions',
        'log_id' => 'int',
        'ns_check' => '\Domainrobot\Model\DNSCheck',
        'confirm_order' => 'bool',
        'confirm_owner_consent' => 'bool',
        'ignore_whois' => 'bool',
        'comment' => 'string',
        'include_www' => 'bool',
        'include_wildcard' => 'bool',
        'registrar_status' => '\Domainrobot\Model\RegistryStatusConstants',
        'registrar_status_reason' => 'string',
        'remove_cancelation' => 'bool',
        'autodns_sec_job' => '\Domainrobot\Model\DNSSecJob',
        'price_class' => 'string',
        'price_class_renew' => 'string',
        'abuse_email' => 'string',
        'general_request_email' => 'string',
        'privacy_plus_mail' => 'string',
        'privacy_plus' => 'bool',
        'name_server_group' => 'string',
        'rdds_opt_in' => '\Domainrobot\Model\RddsOptInConstants',
        'services_add' => '\Domainrobot\Model\DomainServices',
        'services_rem' => '\Domainrobot\Model\DomainServices',
        'deleted' => '\DateTime',
        'restore_phase_end' => '\DateTime',
        'ownerc' => '\Domainrobot\Model\Contact',
        'adminc' => '\Domainrobot\Model\Contact',
        'techc' => '\Domainrobot\Model\Contact',
        'zonec' => '\Domainrobot\Model\Contact',
        'expire' => '\DateTime',
        'payable' => '\DateTime',
        'action' => '\Domainrobot\Model\DomainActionConstants',
        'auto_dnssec' => 'bool',
        'dnssec' => 'bool',
        'valid_certificate' => 'bool',
        'cancelation_status' => '\Domainrobot\Model\CancelationStatusConstants',
        'auto_renew_status' => '\Domainrobot\Model\AutoRenewStatusConstants',
        'dnssec_data' => '\Domainrobot\Model\DNSSec[]',
        'zone' => '\Domainrobot\Model\Zone'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'created' => 'date-time',
        'updated' => 'date-time',
        'owner' => null,
        'updater' => null,
        'name' => null,
        'idn' => null,
        'nic_member_label' => null,
        'registry_status' => null,
        'name_servers' => null,
        'name_server_entries' => null,
        'period' => null,
        'trustee' => null,
        'privacy' => null,
        'authinfo' => null,
        'domainsafe' => null,
        'parking' => null,
        'extensions' => null,
        'log_id' => 'int64',
        'ns_check' => null,
        'confirm_order' => null,
        'confirm_owner_consent' => null,
        'ignore_whois' => null,
        'comment' => null,
        'include_www' => null,
        'include_wildcard' => null,
        'registrar_status' => null,
        'registrar_status_reason' => null,
        'remove_cancelation' => null,
        'autodns_sec_job' => null,
        'price_class' => null,
        'price_class_renew' => null,
        'abuse_email' => null,
        'general_request_email' => null,
        'privacy_plus_mail' => null,
        'privacy_plus' => null,
        'name_server_group' => null,
        'rdds_opt_in' => null,
        'services_add' => null,
        'services_rem' => null,
        'deleted' => 'date-time',
        'restore_phase_end' => 'date-time',
        'ownerc' => null,
        'adminc' => null,
        'techc' => null,
        'zonec' => null,
        'expire' => 'date-time',
        'payable' => 'date-time',
        'action' => null,
        'auto_dnssec' => null,
        'dnssec' => null,
        'valid_certificate' => null,
        'cancelation_status' => null,
        'auto_renew_status' => null,
        'dnssec_data' => null,
        'zone' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'created' => 'created',
        'updated' => 'updated',
        'owner' => 'owner',
        'updater' => 'updater',
        'name' => 'name',
        'idn' => 'idn',
        'nic_member_label' => 'nicMemberLabel',
        'registry_status' => 'registryStatus',
        'name_servers' => 'nameServers',
        'name_server_entries' => 'nameServerEntries',
        'period' => 'period',
        'trustee' => 'trustee',
        'privacy' => 'privacy',
        'authinfo' => 'authinfo',
        'domainsafe' => 'domainsafe',
        'parking' => 'parking',
        'extensions' => 'extensions',
        'log_id' => 'logId',
        'ns_check' => 'nsCheck',
        'confirm_order' => 'confirmOrder',
        'confirm_owner_consent' => 'confirmOwnerConsent',
        'ignore_whois' => 'ignoreWhois',
        'comment' => 'comment',
        'include_www' => 'includeWWW',
        'include_wildcard' => 'includeWildcard',
        'registrar_status' => 'registrarStatus',
        'registrar_status_reason' => 'registrarStatusReason',
        'remove_cancelation' => 'removeCancelation',
        'autodns_sec_job' => 'autodnsSecJob',
        'price_class' => 'priceClass',
        'price_class_renew' => 'priceClassRenew',
        'abuse_email' => 'abuseEmail',
        'general_request_email' => 'generalRequestEmail',
        'privacy_plus_mail' => 'privacyPlusMail',
        'privacy_plus' => 'privacyPlus',
        'name_server_group' => 'nameServerGroup',
        'rdds_opt_in' => 'rddsOptIn',
        'services_add' => 'servicesAdd',
        'services_rem' => 'servicesRem',
        'deleted' => 'deleted',
        'restore_phase_end' => 'restorePhaseEnd',
        'ownerc' => 'ownerc',
        'adminc' => 'adminc',
        'techc' => 'techc',
        'zonec' => 'zonec',
        'expire' => 'expire',
        'payable' => 'payable',
        'action' => 'action',
        'auto_dnssec' => 'autoDnssec',
        'dnssec' => 'dnssec',
        'valid_certificate' => 'validCertificate',
        'cancelation_status' => 'cancelationStatus',
        'auto_renew_status' => 'autoRenewStatus',
        'dnssec_data' => 'dnssecData',
        'zone' => 'zone'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'created' => 'setCreated',
        'updated' => 'setUpdated',
        'owner' => 'setOwner',
        'updater' => 'setUpdater',
        'name' => 'setName',
        'idn' => 'setIdn',
        'nic_member_label' => 'setNicMemberLabel',
        'registry_status' => 'setRegistryStatus',
        'name_servers' => 'setNameServers',
        'name_server_entries' => 'setNameServerEntries',
        'period' => 'setPeriod',
        'trustee' => 'setTrustee',
        'privacy' => 'setPrivacy',
        'authinfo' => 'setAuthinfo',
        'domainsafe' => 'setDomainsafe',
        'parking' => 'setParking',
        'extensions' => 'setExtensions',
        'log_id' => 'setLogId',
        'ns_check' => 'setNsCheck',
        'confirm_order' => 'setConfirmOrder',
        'confirm_owner_consent' => 'setConfirmOwnerConsent',
        'ignore_whois' => 'setIgnoreWhois',
        'comment' => 'setComment',
        'include_www' => 'setIncludeWww',
        'include_wildcard' => 'setIncludeWildcard',
        'registrar_status' => 'setRegistrarStatus',
        'registrar_status_reason' => 'setRegistrarStatusReason',
        'remove_cancelation' => 'setRemoveCancelation',
        'autodns_sec_job' => 'setAutodnsSecJob',
        'price_class' => 'setPriceClass',
        'price_class_renew' => 'setPriceClassRenew',
        'abuse_email' => 'setAbuseEmail',
        'general_request_email' => 'setGeneralRequestEmail',
        'privacy_plus_mail' => 'setPrivacyPlusMail',
        'privacy_plus' => 'setPrivacyPlus',
        'name_server_group' => 'setNameServerGroup',
        'rdds_opt_in' => 'setRddsOptIn',
        'services_add' => 'setServicesAdd',
        'services_rem' => 'setServicesRem',
        'deleted' => 'setDeleted',
        'restore_phase_end' => 'setRestorePhaseEnd',
        'ownerc' => 'setOwnerc',
        'adminc' => 'setAdminc',
        'techc' => 'setTechc',
        'zonec' => 'setZonec',
        'expire' => 'setExpire',
        'payable' => 'setPayable',
        'action' => 'setAction',
        'auto_dnssec' => 'setAutoDnssec',
        'dnssec' => 'setDnssec',
        'valid_certificate' => 'setValidCertificate',
        'cancelation_status' => 'setCancelationStatus',
        'auto_renew_status' => 'setAutoRenewStatus',
        'dnssec_data' => 'setDnssecData',
        'zone' => 'setZone'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'created' => 'getCreated',
        'updated' => 'getUpdated',
        'owner' => 'getOwner',
        'updater' => 'getUpdater',
        'name' => 'getName',
        'idn' => 'getIdn',
        'nic_member_label' => 'getNicMemberLabel',
        'registry_status' => 'getRegistryStatus',
        'name_servers' => 'getNameServers',
        'name_server_entries' => 'getNameServerEntries',
        'period' => 'getPeriod',
        'trustee' => 'getTrustee',
        'privacy' => 'getPrivacy',
        'authinfo' => 'getAuthinfo',
        'domainsafe' => 'getDomainsafe',
        'parking' => 'getParking',
        'extensions' => 'getExtensions',
        'log_id' => 'getLogId',
        'ns_check' => 'getNsCheck',
        'confirm_order' => 'getConfirmOrder',
        'confirm_owner_consent' => 'getConfirmOwnerConsent',
        'ignore_whois' => 'getIgnoreWhois',
        'comment' => 'getComment',
        'include_www' => 'getIncludeWww',
        'include_wildcard' => 'getIncludeWildcard',
        'registrar_status' => 'getRegistrarStatus',
        'registrar_status_reason' => 'getRegistrarStatusReason',
        'remove_cancelation' => 'getRemoveCancelation',
        'autodns_sec_job' => 'getAutodnsSecJob',
        'price_class' => 'getPriceClass',
        'price_class_renew' => 'getPriceClassRenew',
        'abuse_email' => 'getAbuseEmail',
        'general_request_email' => 'getGeneralRequestEmail',
        'privacy_plus_mail' => 'getPrivacyPlusMail',
        'privacy_plus' => 'getPrivacyPlus',
        'name_server_group' => 'getNameServerGroup',
        'rdds_opt_in' => 'getRddsOptIn',
        'services_add' => 'getServicesAdd',
        'services_rem' => 'getServicesRem',
        'deleted' => 'getDeleted',
        'restore_phase_end' => 'getRestorePhaseEnd',
        'ownerc' => 'getOwnerc',
        'adminc' => 'getAdminc',
        'techc' => 'getTechc',
        'zonec' => 'getZonec',
        'expire' => 'getExpire',
        'payable' => 'getPayable',
        'action' => 'getAction',
        'auto_dnssec' => 'getAutoDnssec',
        'dnssec' => 'getDnssec',
        'valid_certificate' => 'getValidCertificate',
        'cancelation_status' => 'getCancelationStatus',
        'auto_renew_status' => 'getAutoRenewStatus',
        'dnssec_data' => 'getDnssecData',
        'zone' => 'getZone'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['created'] = isset($data['created']) ? $this->createData($data['created'], 'created')  : null;
        $this->container['updated'] = isset($data['updated']) ? $this->createData($data['updated'], 'updated')  : null;
        $this->container['owner'] = isset($data['owner']) ? $this->createData($data['owner'], 'owner')  : null;
        $this->container['updater'] = isset($data['updater']) ? $this->createData($data['updater'], 'updater')  : null;
        $this->container['name'] = isset($data['name']) ? $this->createData($data['name'], 'name')  : null;
        $this->container['idn'] = isset($data['idn']) ? $this->createData($data['idn'], 'idn')  : null;
        $this->container['nic_member_label'] = isset($data['nic_member_label']) ? $this->createData($data['nic_member_label'], 'nic_member_label')  : null;
        $this->container['registry_status'] = isset($data['registry_status']) ? $this->createData($data['registry_status'], 'registry_status')  : null;
        $this->container['name_servers'] = isset($data['name_servers']) ? $this->createData($data['name_servers'], 'name_servers')  : null;
        $this->container['name_server_entries'] = isset($data['name_server_entries']) ? $this->createData($data['name_server_entries'], 'name_server_entries')  : null;
        $this->container['period'] = isset($data['period']) ? $this->createData($data['period'], 'period')  : null;
        $this->container['trustee'] = isset($data['trustee']) ? $this->createData($data['trustee'], 'trustee')  : null;
        $this->container['privacy'] = isset($data['privacy']) ? $this->createData($data['privacy'], 'privacy')  : null;
        $this->container['authinfo'] = isset($data['authinfo']) ? $this->createData($data['authinfo'], 'authinfo')  : null;
        $this->container['domainsafe'] = isset($data['domainsafe']) ? $this->createData($data['domainsafe'], 'domainsafe')  : null;
        $this->container['parking'] = isset($data['parking']) ? $this->createData($data['parking'], 'parking')  : null;
        $this->container['extensions'] = isset($data['extensions']) ? $this->createData($data['extensions'], 'extensions')  : null;
        $this->container['log_id'] = isset($data['log_id']) ? $this->createData($data['log_id'], 'log_id')  : null;
        $this->container['ns_check'] = isset($data['ns_check']) ? $this->createData($data['ns_check'], 'ns_check')  : null;
        $this->container['confirm_order'] = isset($data['confirm_order']) ? $this->createData($data['confirm_order'], 'confirm_order')  : null;
        $this->container['confirm_owner_consent'] = isset($data['confirm_owner_consent']) ? $this->createData($data['confirm_owner_consent'], 'confirm_owner_consent')  : null;
        $this->container['ignore_whois'] = isset($data['ignore_whois']) ? $this->createData($data['ignore_whois'], 'ignore_whois')  : null;
        $this->container['comment'] = isset($data['comment']) ? $this->createData($data['comment'], 'comment')  : null;
        $this->container['include_www'] = isset($data['include_www']) ? $this->createData($data['include_www'], 'include_www')  : null;
        $this->container['include_wildcard'] = isset($data['include_wildcard']) ? $this->createData($data['include_wildcard'], 'include_wildcard')  : null;
        $this->container['registrar_status'] = isset($data['registrar_status']) ? $this->createData($data['registrar_status'], 'registrar_status')  : null;
        $this->container['registrar_status_reason'] = isset($data['registrar_status_reason']) ? $this->createData($data['registrar_status_reason'], 'registrar_status_reason')  : null;
        $this->container['remove_cancelation'] = isset($data['remove_cancelation']) ? $this->createData($data['remove_cancelation'], 'remove_cancelation')  : null;
        $this->container['autodns_sec_job'] = isset($data['autodns_sec_job']) ? $this->createData($data['autodns_sec_job'], 'autodns_sec_job')  : null;
        $this->container['price_class'] = isset($data['price_class']) ? $this->createData($data['price_class'], 'price_class')  : null;
        $this->container['price_class_renew'] = isset($data['price_class_renew']) ? $this->createData($data['price_class_renew'], 'price_class_renew')  : null;
        $this->container['abuse_email'] = isset($data['abuse_email']) ? $this->createData($data['abuse_email'], 'abuse_email')  : null;
        $this->container['general_request_email'] = isset($data['general_request_email']) ? $this->createData($data['general_request_email'], 'general_request_email')  : null;
        $this->container['privacy_plus_mail'] = isset($data['privacy_plus_mail']) ? $this->createData($data['privacy_plus_mail'], 'privacy_plus_mail')  : null;
        $this->container['privacy_plus'] = isset($data['privacy_plus']) ? $this->createData($data['privacy_plus'], 'privacy_plus')  : null;
        $this->container['name_server_group'] = isset($data['name_server_group']) ? $this->createData($data['name_server_group'], 'name_server_group')  : null;
        $this->container['rdds_opt_in'] = isset($data['rdds_opt_in']) ? $this->createData($data['rdds_opt_in'], 'rdds_opt_in')  : null;
        $this->container['services_add'] = isset($data['services_add']) ? $this->createData($data['services_add'], 'services_add')  : null;
        $this->container['services_rem'] = isset($data['services_rem']) ? $this->createData($data['services_rem'], 'services_rem')  : null;
        $this->container['deleted'] = isset($data['deleted']) ? $this->createData($data['deleted'], 'deleted')  : null;
        $this->container['restore_phase_end'] = isset($data['restore_phase_end']) ? $this->createData($data['restore_phase_end'], 'restore_phase_end')  : null;
        $this->container['ownerc'] = isset($data['ownerc']) ? $this->createData($data['ownerc'], 'ownerc')  : null;
        $this->container['adminc'] = isset($data['adminc']) ? $this->createData($data['adminc'], 'adminc')  : null;
        $this->container['techc'] = isset($data['techc']) ? $this->createData($data['techc'], 'techc')  : null;
        $this->container['zonec'] = isset($data['zonec']) ? $this->createData($data['zonec'], 'zonec')  : null;
        $this->container['expire'] = isset($data['expire']) ? $this->createData($data['expire'], 'expire')  : null;
        $this->container['payable'] = isset($data['payable']) ? $this->createData($data['payable'], 'payable')  : null;
        $this->container['action'] = isset($data['action']) ? $this->createData($data['action'], 'action')  : null;
        $this->container['auto_dnssec'] = isset($data['auto_dnssec']) ? $this->createData($data['auto_dnssec'], 'auto_dnssec')  : null;
        $this->container['dnssec'] = isset($data['dnssec']) ? $this->createData($data['dnssec'], 'dnssec')  : null;
        $this->container['valid_certificate'] = isset($data['valid_certificate']) ? $this->createData($data['valid_certificate'], 'valid_certificate')  : null;
        $this->container['cancelation_status'] = isset($data['cancelation_status']) ? $this->createData($data['cancelation_status'], 'cancelation_status')  : null;
        $this->container['auto_renew_status'] = isset($data['auto_renew_status']) ? $this->createData($data['auto_renew_status'], 'auto_renew_status')  : null;
        $this->container['dnssec_data'] = isset($data['dnssec_data']) ? $this->createData($data['dnssec_data'], 'dnssec_data')  : null;
        $this->container['zone'] = isset($data['zone']) ? $this->createData($data['zone'], 'zone')  : null;
    }

    /**
    *
    * @param mixed[] $data
    * @param string $property
    * @return mixed
    */
    public function createData($data = null, $property){
        if($data === null){
            return '';
        }
        $swaggerType = self::$swaggerTypes[$property];

        preg_match("/([\\\\\w\d]+)(\[\])?/", $swaggerType, $matches);

        if(count($matches) > 0 && count($matches) < 3){
            try {
                $reflection = new \ReflectionClass($swaggerType);
                $reflectionInstance = $reflection->newInstance($data);

                return $reflectionInstance;
            }catch(\Exception $ex){
                return $data;
            }
        }else if(count($matches) >= 3){
            $reflectionInstances = [];
            foreach($data as $d){
                try {
                    $reflection = new \ReflectionClass(str_replace("[]", "", $swaggerType) );
                    $reflectionInstances[] = $reflection->newInstance($d);

                    return $reflectionInstances;
                } catch (\Exception $ex) {
                    return $data;
                }
            }
        }

        return $data;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['name'] === null) {
            $invalidProperties[] = "'name' can't be null";
        }
        if ($this->container['remove_cancelation'] === null) {
            $invalidProperties[] = "'remove_cancelation' can't be null";
        }
        if ($this->container['payable'] === null) {
            $invalidProperties[] = "'payable' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the 
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets created
     *
     * @return \DateTime
     */
    public function getCreated()
    {
        return $this->container['created'];
    }

    /**
     * Sets created
     *
     * @param \DateTime $created The created date.
     *
     * @return $this
     */
    public function setCreated($created)
    {
        $this->container['created'] = $created;

        return $this;
    }

    /**
     * Gets updated
     *
     * @return \DateTime
     */
    public function getUpdated()
    {
        return $this->container['updated'];
    }

    /**
     * Sets updated
     *
     * @param \DateTime $updated The updated date.
     *
     * @return $this
     */
    public function setUpdated($updated)
    {
        $this->container['updated'] = $updated;

        return $this;
    }

    /**
     * Gets owner
     *
     * @return \Domainrobot\Model\BasicUser
     */
    public function getOwner()
    {
        return $this->container['owner'];
    }

    /**
     * Sets owner
     *
     * @param \Domainrobot\Model\BasicUser $owner The owner of the object.
     *
     * @return $this
     */
    public function setOwner($owner)
    {
        $this->container['owner'] = $owner;

        return $this;
    }

    /**
     * Gets updater
     *
     * @return \Domainrobot\Model\BasicUser
     */
    public function getUpdater()
    {
        return $this->container['updater'];
    }

    /**
     * Sets updater
     *
     * @param \Domainrobot\Model\BasicUser $updater The updater of the object.
     *
     * @return $this
     */
    public function setUpdater($updater)
    {
        $this->container['updater'] = $updater;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name The name of the domain.
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets idn
     *
     * @return string
     */
    public function getIdn()
    {
        return $this->container['idn'];
    }

    /**
     * Sets idn
     *
     * @param string $idn The unicode domain name
     *
     * @return $this
     */
    public function setIdn($idn)
    {
        $this->container['idn'] = $idn;

        return $this;
    }

    /**
     * Gets nic_member_label
     *
     * @return string
     */
    public function getNicMemberLabel()
    {
        return $this->container['nic_member_label'];
    }

    /**
     * Sets nic_member_label
     *
     * @param string $nic_member_label The nic member label.
     *
     * @return $this
     */
    public function setNicMemberLabel($nic_member_label)
    {
        $this->container['nic_member_label'] = $nic_member_label;

        return $this;
    }

    /**
     * Gets registry_status
     *
     * @return \Domainrobot\Model\RegistryStatusConstants
     */
    public function getRegistryStatus()
    {
        return $this->container['registry_status'];
    }

    /**
     * Sets registry_status
     *
     * @param \Domainrobot\Model\RegistryStatusConstants $registry_status The registry status.
     *
     * @return $this
     */
    public function setRegistryStatus($registry_status)
    {
        $this->container['registry_status'] = $registry_status;

        return $this;
    }

    /**
     * Gets name_servers
     *
     * @return \Domainrobot\Model\NameServer[]
     */
    public function getNameServers()
    {
        return $this->container['name_servers'];
    }

    /**
     * Sets name_servers
     *
     * @param \Domainrobot\Model\NameServer[] $name_servers The nameservers.
     *
     * @return $this
     */
    public function setNameServers($name_servers)
    {
        $this->container['name_servers'] = $name_servers;

        return $this;
    }

    /**
     * Gets name_server_entries
     *
     * @return string[]
     */
    public function getNameServerEntries()
    {
        return $this->container['name_server_entries'];
    }

    /**
     * Sets name_server_entries
     *
     * @param string[] $name_server_entries NSentry is only be provided for .DE. If NSentry is used, nameServers is not allowed.
     *
     * @return $this
     */
    public function setNameServerEntries($name_server_entries)
    {
        $this->container['name_server_entries'] = $name_server_entries;

        return $this;
    }

    /**
     * Gets period
     *
     * @return \Domainrobot\Model\TimePeriod
     */
    public function getPeriod()
    {
        return $this->container['period'];
    }

    /**
     * Sets period
     *
     * @param \Domainrobot\Model\TimePeriod $period The renew period in years.
     *
     * @return $this
     */
    public function setPeriod($period)
    {
        $this->container['period'] = $period;

        return $this;
    }

    /**
     * Gets trustee
     *
     * @return bool
     */
    public function getTrustee()
    {
        return $this->container['trustee'];
    }

    /**
     * Sets trustee
     *
     * @param bool $trustee Enable trustee service for the domain.
     *
     * @return $this
     */
    public function setTrustee($trustee)
    {
        $this->container['trustee'] = $trustee;

        return $this;
    }

    /**
     * Gets privacy
     *
     * @return bool
     */
    public function getPrivacy()
    {
        return $this->container['privacy'];
    }

    /**
     * Sets privacy
     *
     * @param bool $privacy Enable privacy service for the domain.
     *
     * @return $this
     */
    public function setPrivacy($privacy)
    {
        $this->container['privacy'] = $privacy;

        return $this;
    }

    /**
     * Gets authinfo
     *
     * @return string
     */
    public function getAuthinfo()
    {
        return $this->container['authinfo'];
    }

    /**
     * Sets authinfo
     *
     * @param string $authinfo The authinfo.
     *
     * @return $this
     */
    public function setAuthinfo($authinfo)
    {
        $this->container['authinfo'] = $authinfo;

        return $this;
    }

    /**
     * Gets domainsafe
     *
     * @return bool
     */
    public function getDomainsafe()
    {
        return $this->container['domainsafe'];
    }

    /**
     * Sets domainsafe
     *
     * @param bool $domainsafe Enable domainsafe.
     *
     * @return $this
     */
    public function setDomainsafe($domainsafe)
    {
        $this->container['domainsafe'] = $domainsafe;

        return $this;
    }

    /**
     * Gets parking
     *
     * @return \Domainrobot\Model\ParkingProviderConstants
     */
    public function getParking()
    {
        return $this->container['parking'];
    }

    /**
     * Sets parking
     *
     * @param \Domainrobot\Model\ParkingProviderConstants $parking The parking provider.
     *
     * @return $this
     */
    public function setParking($parking)
    {
        $this->container['parking'] = $parking;

        return $this;
    }

    /**
     * Gets extensions
     *
     * @return \Domainrobot\Model\DomainExtensions
     */
    public function getExtensions()
    {
        return $this->container['extensions'];
    }

    /**
     * Sets extensions
     *
     * @param \Domainrobot\Model\DomainExtensions $extensions The domain extensions.
     *
     * @return $this
     */
    public function setExtensions($extensions)
    {
        $this->container['extensions'] = $extensions;

        return $this;
    }

    /**
     * Gets log_id
     *
     * @return int
     */
    public function getLogId()
    {
        return $this->container['log_id'];
    }

    /**
     * Sets log_id
     *
     * @param int $log_id The logId
     *
     * @return $this
     */
    public function setLogId($log_id)
    {
        $this->container['log_id'] = $log_id;

        return $this;
    }

    /**
     * Gets ns_check
     *
     * @return \Domainrobot\Model\DNSCheck
     */
    public function getNsCheck()
    {
        return $this->container['ns_check'];
    }

    /**
     * Sets ns_check
     *
     * @param \Domainrobot\Model\DNSCheck $ns_check An additional nameserver check will be carried out.
     *
     * @return $this
     */
    public function setNsCheck($ns_check)
    {
        $this->container['ns_check'] = $ns_check;

        return $this;
    }

    /**
     * Gets confirm_order
     *
     * @return bool
     */
    public function getConfirmOrder()
    {
        return $this->container['confirm_order'];
    }

    /**
     * Sets confirm_order
     *
     * @param bool $confirm_order Some TLDs require a confirmation of the “Terms and Conditions of Registration.
     *
     * @return $this
     */
    public function setConfirmOrder($confirm_order)
    {
        $this->container['confirm_order'] = $confirm_order;

        return $this;
    }

    /**
     * Gets confirm_owner_consent
     *
     * @return bool
     */
    public function getConfirmOwnerConsent()
    {
        return $this->container['confirm_owner_consent'];
    }

    /**
     * Sets confirm_owner_consent
     *
     * @param bool $confirm_owner_consent Confirms the consent of the domainowner for the changes. Required for gTLDs and new gTLDs when changing the name, the email address or the organization of the domain owner.
     *
     * @return $this
     */
    public function setConfirmOwnerConsent($confirm_owner_consent)
    {
        $this->container['confirm_owner_consent'] = $confirm_owner_consent;

        return $this;
    }

    /**
     * Gets ignore_whois
     *
     * @return bool
     */
    public function getIgnoreWhois()
    {
        return $this->container['ignore_whois'];
    }

    /**
     * Sets ignore_whois
     *
     * @param bool $ignore_whois Ignore whois.
     *
     * @return $this
     */
    public function setIgnoreWhois($ignore_whois)
    {
        $this->container['ignore_whois'] = $ignore_whois;

        return $this;
    }

    /**
     * Gets comment
     *
     * @return string
     */
    public function getComment()
    {
        return $this->container['comment'];
    }

    /**
     * Sets comment
     *
     * @param string $comment A custom field. Can only be updated via PUT /domain/{name}/_comment. Requires appropriate ACLs.
     *
     * @return $this
     */
    public function setComment($comment)
    {
        $this->container['comment'] = $comment;

        return $this;
    }

    /**
     * Gets include_www
     *
     * @return bool
     */
    public function getIncludeWww()
    {
        return $this->container['include_www'];
    }

    /**
     * Sets include_www
     *
     * @param bool $include_www Enable utomatic creation of the www subdomain.
     *
     * @return $this
     */
    public function setIncludeWww($include_www)
    {
        $this->container['include_www'] = $include_www;

        return $this;
    }

    /**
     * Gets include_wildcard
     *
     * @return bool
     */
    public function getIncludeWildcard()
    {
        return $this->container['include_wildcard'];
    }

    /**
     * Sets include_wildcard
     *
     * @param bool $include_wildcard Enable include wildcard.
     *
     * @return $this
     */
    public function setIncludeWildcard($include_wildcard)
    {
        $this->container['include_wildcard'] = $include_wildcard;

        return $this;
    }

    /**
     * Gets registrar_status
     *
     * @return \Domainrobot\Model\RegistryStatusConstants
     */
    public function getRegistrarStatus()
    {
        return $this->container['registrar_status'];
    }

    /**
     * Sets registrar_status
     *
     * @param \Domainrobot\Model\RegistryStatusConstants $registrar_status The registrar status.
     *
     * @return $this
     */
    public function setRegistrarStatus($registrar_status)
    {
        $this->container['registrar_status'] = $registrar_status;

        return $this;
    }

    /**
     * Gets registrar_status_reason
     *
     * @return string
     */
    public function getRegistrarStatusReason()
    {
        return $this->container['registrar_status_reason'];
    }

    /**
     * Sets registrar_status_reason
     *
     * @param string $registrar_status_reason The registrar status reason.
     *
     * @return $this
     */
    public function setRegistrarStatusReason($registrar_status_reason)
    {
        $this->container['registrar_status_reason'] = $registrar_status_reason;

        return $this;
    }

    /**
     * Gets remove_cancelation
     *
     * @return bool
     */
    public function getRemoveCancelation()
    {
        return $this->container['remove_cancelation'];
    }

    /**
     * Sets remove_cancelation
     *
     * @param bool $remove_cancelation Remove cancelation.
     *
     * @return $this
     */
    public function setRemoveCancelation($remove_cancelation)
    {
        $this->container['remove_cancelation'] = $remove_cancelation;

        return $this;
    }

    /**
     * Gets autodns_sec_job
     *
     * @return \Domainrobot\Model\DNSSecJob
     */
    public function getAutodnsSecJob()
    {
        return $this->container['autodns_sec_job'];
    }

    /**
     * Sets autodns_sec_job
     *
     * @param \Domainrobot\Model\DNSSecJob $autodns_sec_job AutodnsSecJob
     *
     * @return $this
     */
    public function setAutodnsSecJob($autodns_sec_job)
    {
        $this->container['autodns_sec_job'] = $autodns_sec_job;

        return $this;
    }

    /**
     * Gets price_class
     *
     * @return string
     */
    public function getPriceClass()
    {
        return $this->container['price_class'];
    }

    /**
     * Sets price_class
     *
     * @param string $price_class The priceclass for the registration of the domain.
     *
     * @return $this
     */
    public function setPriceClass($price_class)
    {
        $this->container['price_class'] = $price_class;

        return $this;
    }

    /**
     * Gets price_class_renew
     *
     * @return string
     */
    public function getPriceClassRenew()
    {
        return $this->container['price_class_renew'];
    }

    /**
     * Sets price_class_renew
     *
     * @param string $price_class_renew The priceclass for the renew of the domain.
     *
     * @return $this
     */
    public function setPriceClassRenew($price_class_renew)
    {
        $this->container['price_class_renew'] = $price_class_renew;

        return $this;
    }

    /**
     * Gets abuse_email
     *
     * @return string
     */
    public function getAbuseEmail()
    {
        return $this->container['abuse_email'];
    }

    /**
     * Sets abuse_email
     *
     * @param string $abuse_email The abuse email.
     *
     * @return $this
     */
    public function setAbuseEmail($abuse_email)
    {
        $this->container['abuse_email'] = $abuse_email;

        return $this;
    }

    /**
     * Gets general_request_email
     *
     * @return string
     */
    public function getGeneralRequestEmail()
    {
        return $this->container['general_request_email'];
    }

    /**
     * Sets general_request_email
     *
     * @param string $general_request_email The general request mail.
     *
     * @return $this
     */
    public function setGeneralRequestEmail($general_request_email)
    {
        $this->container['general_request_email'] = $general_request_email;

        return $this;
    }

    /**
     * Gets privacy_plus_mail
     *
     * @return string
     */
    public function getPrivacyPlusMail()
    {
        return $this->container['privacy_plus_mail'];
    }

    /**
     * Sets privacy_plus_mail
     *
     * @param string $privacy_plus_mail The privacy plus mail.
     *
     * @return $this
     */
    public function setPrivacyPlusMail($privacy_plus_mail)
    {
        $this->container['privacy_plus_mail'] = $privacy_plus_mail;

        return $this;
    }

    /**
     * Gets privacy_plus
     *
     * @return bool
     */
    public function getPrivacyPlus()
    {
        return $this->container['privacy_plus'];
    }

    /**
     * Sets privacy_plus
     *
     * @param bool $privacy_plus Enable privacy plus.
     *
     * @return $this
     */
    public function setPrivacyPlus($privacy_plus)
    {
        $this->container['privacy_plus'] = $privacy_plus;

        return $this;
    }

    /**
     * Gets name_server_group
     *
     * @return string
     */
    public function getNameServerGroup()
    {
        return $this->container['name_server_group'];
    }

    /**
     * Sets name_server_group
     *
     * @param string $name_server_group The nameserver group.
     *
     * @return $this
     */
    public function setNameServerGroup($name_server_group)
    {
        $this->container['name_server_group'] = $name_server_group;

        return $this;
    }

    /**
     * Gets rdds_opt_in
     *
     * @return \Domainrobot\Model\RddsOptInConstants
     */
    public function getRddsOptIn()
    {
        return $this->container['rdds_opt_in'];
    }

    /**
     * Sets rdds_opt_in
     *
     * @param \Domainrobot\Model\RddsOptInConstants $rdds_opt_in Enables the whois output to show redacted contacts.
     *
     * @return $this
     */
    public function setRddsOptIn($rdds_opt_in)
    {
        $this->container['rdds_opt_in'] = $rdds_opt_in;

        return $this;
    }

    /**
     * Gets services_add
     *
     * @return \Domainrobot\Model\DomainServices
     */
    public function getServicesAdd()
    {
        return $this->container['services_add'];
    }

    /**
     * Sets services_add
     *
     * @param \Domainrobot\Model\DomainServices $services_add Adds pending services like BackupMX and MailProxy.
     *
     * @return $this
     */
    public function setServicesAdd($services_add)
    {
        $this->container['services_add'] = $services_add;

        return $this;
    }

    /**
     * Gets services_rem
     *
     * @return \Domainrobot\Model\DomainServices
     */
    public function getServicesRem()
    {
        return $this->container['services_rem'];
    }

    /**
     * Sets services_rem
     *
     * @param \Domainrobot\Model\DomainServices $services_rem Removes pending services like BackupMX and MailProxy.
     *
     * @return $this
     */
    public function setServicesRem($services_rem)
    {
        $this->container['services_rem'] = $services_rem;

        return $this;
    }

    /**
     * Gets deleted
     *
     * @return \DateTime
     */
    public function getDeleted()
    {
        return $this->container['deleted'];
    }

    /**
     * Sets deleted
     *
     * @param \DateTime $deleted The date at deletion of the domain
     *
     * @return $this
     */
    public function setDeleted($deleted)
    {
        $this->container['deleted'] = $deleted;

        return $this;
    }

    /**
     * Gets restore_phase_end
     *
     * @return \DateTime
     */
    public function getRestorePhaseEnd()
    {
        return $this->container['restore_phase_end'];
    }

    /**
     * Sets restore_phase_end
     *
     * @param \DateTime $restore_phase_end The end of current restore phase
     *
     * @return $this
     */
    public function setRestorePhaseEnd($restore_phase_end)
    {
        $this->container['restore_phase_end'] = $restore_phase_end;

        return $this;
    }

    /**
     * Gets ownerc
     *
     * @return \Domainrobot\Model\Contact
     */
    public function getOwnerc()
    {
        return $this->container['ownerc'];
    }

    /**
     * Sets ownerc
     *
     * @param \Domainrobot\Model\Contact $ownerc The owner contact.
     *
     * @return $this
     */
    public function setOwnerc($ownerc)
    {
        $this->container['ownerc'] = $ownerc;

        return $this;
    }

    /**
     * Gets adminc
     *
     * @return \Domainrobot\Model\Contact
     */
    public function getAdminc()
    {
        return $this->container['adminc'];
    }

    /**
     * Sets adminc
     *
     * @param \Domainrobot\Model\Contact $adminc The administrative contact.
     *
     * @return $this
     */
    public function setAdminc($adminc)
    {
        $this->container['adminc'] = $adminc;

        return $this;
    }

    /**
     * Gets techc
     *
     * @return \Domainrobot\Model\Contact
     */
    public function getTechc()
    {
        return $this->container['techc'];
    }

    /**
     * Sets techc
     *
     * @param \Domainrobot\Model\Contact $techc The technical contact reference.
     *
     * @return $this
     */
    public function setTechc($techc)
    {
        $this->container['techc'] = $techc;

        return $this;
    }

    /**
     * Gets zonec
     *
     * @return \Domainrobot\Model\Contact
     */
    public function getZonec()
    {
        return $this->container['zonec'];
    }

    /**
     * Sets zonec
     *
     * @param \Domainrobot\Model\Contact $zonec The dns contact.
     *
     * @return $this
     */
    public function setZonec($zonec)
    {
        $this->container['zonec'] = $zonec;

        return $this;
    }

    /**
     * Gets expire
     *
     * @return \DateTime
     */
    public function getExpire()
    {
        return $this->container['expire'];
    }

    /**
     * Sets expire
     *
     * @param \DateTime $expire The expire date of the domain.
     *
     * @return $this
     */
    public function setExpire($expire)
    {
        $this->container['expire'] = $expire;

        return $this;
    }

    /**
     * Gets payable
     *
     * @return \DateTime
     */
    public function getPayable()
    {
        return $this->container['payable'];
    }

    /**
     * Sets payable
     *
     * @param \DateTime $payable The payable date of the domain.
     *
     * @return $this
     */
    public function setPayable($payable)
    {
        $this->container['payable'] = $payable;

        return $this;
    }

    /**
     * Gets action
     *
     * @return \Domainrobot\Model\DomainActionConstants
     */
    public function getAction()
    {
        return $this->container['action'];
    }

    /**
     * Sets action
     *
     * @param \Domainrobot\Model\DomainActionConstants $action The last action.
     *
     * @return $this
     */
    public function setAction($action)
    {
        $this->container['action'] = $action;

        return $this;
    }

    /**
     * Gets auto_dnssec
     *
     * @return bool
     */
    public function getAutoDnssec()
    {
        return $this->container['auto_dnssec'];
    }

    /**
     * Sets auto_dnssec
     *
     * @param bool $auto_dnssec Enables or disables automatic DNSSEC for certain name servers (e.g. NodeSecure).
     *
     * @return $this
     */
    public function setAutoDnssec($auto_dnssec)
    {
        $this->container['auto_dnssec'] = $auto_dnssec;

        return $this;
    }

    /**
     * Gets dnssec
     *
     * @return bool
     */
    public function getDnssec()
    {
        return $this->container['dnssec'];
    }

    /**
     * Sets dnssec
     *
     * @param bool $dnssec Indicates whether DNSSEC is enabled for the domain or not.
     *
     * @return $this
     */
    public function setDnssec($dnssec)
    {
        $this->container['dnssec'] = $dnssec;

        return $this;
    }

    /**
     * Gets valid_certificate
     *
     * @return bool
     */
    public function getValidCertificate()
    {
        return $this->container['valid_certificate'];
    }

    /**
     * Sets valid_certificate
     *
     * @param bool $valid_certificate Domain has an matching certificate.
     *
     * @return $this
     */
    public function setValidCertificate($valid_certificate)
    {
        $this->container['valid_certificate'] = $valid_certificate;

        return $this;
    }

    /**
     * Gets cancelation_status
     *
     * @return \Domainrobot\Model\CancelationStatusConstants
     */
    public function getCancelationStatus()
    {
        return $this->container['cancelation_status'];
    }

    /**
     * Sets cancelation_status
     *
     * @param \Domainrobot\Model\CancelationStatusConstants $cancelation_status The cancelation status.
     *
     * @return $this
     */
    public function setCancelationStatus($cancelation_status)
    {
        $this->container['cancelation_status'] = $cancelation_status;

        return $this;
    }

    /**
     * Gets auto_renew_status
     *
     * @return \Domainrobot\Model\AutoRenewStatusConstants
     */
    public function getAutoRenewStatus()
    {
        return $this->container['auto_renew_status'];
    }

    /**
     * Sets auto_renew_status
     *
     * @param \Domainrobot\Model\AutoRenewStatusConstants $auto_renew_status The autorenew status.
     *
     * @return $this
     */
    public function setAutoRenewStatus($auto_renew_status)
    {
        $this->container['auto_renew_status'] = $auto_renew_status;

        return $this;
    }

    /**
     * Gets dnssec_data
     *
     * @return \Domainrobot\Model\DNSSec[]
     */
    public function getDnssecData()
    {
        return $this->container['dnssec_data'];
    }

    /**
     * Sets dnssec_data
     *
     * @param \Domainrobot\Model\DNSSec[] $dnssec_data Submits the key material to the registry. If the list is empty, the key material is deleted at the registry. If the key is omitted during an update, the data is retained.
     *
     * @return $this
     */
    public function setDnssecData($dnssec_data)
    {
        $this->container['dnssec_data'] = $dnssec_data;

        return $this;
    }

    /**
     * Gets zone
     *
     * @return \Domainrobot\Model\Zone
     */
    public function getZone()
    {
        return $this->container['zone'];
    }

    /**
     * Sets zone
     *
     * @param \Domainrobot\Model\Zone $zone The zone to create.
     *
     * @return $this
     */
    public function setZone($zone)
    {
        $this->container['zone'] = $zone;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
    
    /**
     * @param boolean $removeEmptyValues [remove all empty values if true]
     * @param array $retrieveKeys [list of keys to get back in any case]
     * 
     * Examples:
     * toArray() => returns only non empty values
     * toArray(true) => returns all values
     */
    public function toArray($retrieveAllValues = false){
        $container = $this->container;
        foreach ($container as $key => &$value) {
            if (!$retrieveAllValues && empty($value)) {
                unset($container[$key]);
                continue;
            }
            
            if (gettype($value) === "object") {
                if(method_exists($value, 'toArray')) {
                    $value = $value->toArray();
                }else{
                    if(get_class($value) === "DateTime"){
                        $value = $value->format("Y-m-d\TH:i:s");
                    }else{
                        $value = (array) $value;
                    }
                }
            }
            if (is_array($value)) {
                foreach ($value as &$v) {
                    if (gettype($v) === "object") {
                        $v = $v->toArray();
                    }
                }
            }
        };
        return $container;
    }
}


