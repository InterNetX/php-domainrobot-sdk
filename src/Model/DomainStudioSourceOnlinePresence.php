<?php
/**
 * DomainStudioSourceOnlinePresence
 *
 * PHP version 5
 *
 * @category Class
 * @package  Domainrobot
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Domainrobot JSON API
 *
 * Domainrobot JSON API for managing: Domains, SSL            Certificates, DNS and            much more.
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.16-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Domainrobot\Model;

use \ArrayAccess;
use \Domainrobot\ObjectSerializer;

/**
 * DomainStudioSourceOnlinePresence Class Doc Comment
 *
 * @category Class
 * @package  Domainrobot
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class DomainStudioSourceOnlinePresence implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'DomainStudioSourceOnlinePresence';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'services' => '\Domainrobot\Model\DomainEnvelopeSearchService[]',
        'max' => 'int',
        'max_sld_length' => 'int',
        'use_dash' => 'bool',
        'tlds' => 'string[]',
        'online_presence_url' => 'string',
        'online_presence_title' => 'string',
        'related_urls' => 'string[]',
        'category' => 'string',
        'online_presence_description' => 'string',
        'preferred_name' => 'string',
        'location' => 'string',
        'business' => 'bool',
        'short_name' => 'string',
        'full_name' => 'string',
        'first_name' => 'string',
        'middle_names' => 'string[]',
        'last_name' => 'string',
        'email' => 'string',
        'hometown' => 'string',
        'skills' => 'string[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'services' => null,
        'max' => 'int32',
        'max_sld_length' => 'int32',
        'use_dash' => null,
        'tlds' => null,
        'online_presence_url' => null,
        'online_presence_title' => null,
        'related_urls' => null,
        'category' => null,
        'online_presence_description' => null,
        'preferred_name' => null,
        'location' => null,
        'business' => null,
        'short_name' => null,
        'full_name' => null,
        'first_name' => null,
        'middle_names' => null,
        'last_name' => null,
        'email' => null,
        'hometown' => null,
        'skills' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'services' => 'services',
        'max' => 'max',
        'max_sld_length' => 'maxSldLength',
        'use_dash' => 'useDash',
        'tlds' => 'tlds',
        'online_presence_url' => 'onlinePresenceUrl',
        'online_presence_title' => 'onlinePresenceTitle',
        'related_urls' => 'relatedUrls',
        'category' => 'category',
        'online_presence_description' => 'onlinePresenceDescription',
        'preferred_name' => 'preferredName',
        'location' => 'location',
        'business' => 'business',
        'short_name' => 'shortName',
        'full_name' => 'fullName',
        'first_name' => 'firstName',
        'middle_names' => 'middleNames',
        'last_name' => 'lastName',
        'email' => 'email',
        'hometown' => 'hometown',
        'skills' => 'skills'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'services' => 'setServices',
        'max' => 'setMax',
        'max_sld_length' => 'setMaxSldLength',
        'use_dash' => 'setUseDash',
        'tlds' => 'setTlds',
        'online_presence_url' => 'setOnlinePresenceUrl',
        'online_presence_title' => 'setOnlinePresenceTitle',
        'related_urls' => 'setRelatedUrls',
        'category' => 'setCategory',
        'online_presence_description' => 'setOnlinePresenceDescription',
        'preferred_name' => 'setPreferredName',
        'location' => 'setLocation',
        'business' => 'setBusiness',
        'short_name' => 'setShortName',
        'full_name' => 'setFullName',
        'first_name' => 'setFirstName',
        'middle_names' => 'setMiddleNames',
        'last_name' => 'setLastName',
        'email' => 'setEmail',
        'hometown' => 'setHometown',
        'skills' => 'setSkills'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'services' => 'getServices',
        'max' => 'getMax',
        'max_sld_length' => 'getMaxSldLength',
        'use_dash' => 'getUseDash',
        'tlds' => 'getTlds',
        'online_presence_url' => 'getOnlinePresenceUrl',
        'online_presence_title' => 'getOnlinePresenceTitle',
        'related_urls' => 'getRelatedUrls',
        'category' => 'getCategory',
        'online_presence_description' => 'getOnlinePresenceDescription',
        'preferred_name' => 'getPreferredName',
        'location' => 'getLocation',
        'business' => 'getBusiness',
        'short_name' => 'getShortName',
        'full_name' => 'getFullName',
        'first_name' => 'getFirstName',
        'middle_names' => 'getMiddleNames',
        'last_name' => 'getLastName',
        'email' => 'getEmail',
        'hometown' => 'getHometown',
        'skills' => 'getSkills'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['services'] = isset($data['services']) ? $this->createData($data['services'], 'services')  : null;
        $this->container['max'] = isset($data['max']) ? $this->createData($data['max'], 'max')  : null;
        $this->container['max_sld_length'] = isset($data['max_sld_length']) ? $this->createData($data['max_sld_length'], 'max_sld_length')  : null;
        $this->container['use_dash'] = isset($data['use_dash']) ? $this->createData($data['use_dash'], 'use_dash')  : null;
        $this->container['tlds'] = isset($data['tlds']) ? $this->createData($data['tlds'], 'tlds')  : null;
        $this->container['online_presence_url'] = isset($data['online_presence_url']) ? $this->createData($data['online_presence_url'], 'online_presence_url')  : null;
        $this->container['online_presence_title'] = isset($data['online_presence_title']) ? $this->createData($data['online_presence_title'], 'online_presence_title')  : null;
        $this->container['related_urls'] = isset($data['related_urls']) ? $this->createData($data['related_urls'], 'related_urls')  : null;
        $this->container['category'] = isset($data['category']) ? $this->createData($data['category'], 'category')  : null;
        $this->container['online_presence_description'] = isset($data['online_presence_description']) ? $this->createData($data['online_presence_description'], 'online_presence_description')  : null;
        $this->container['preferred_name'] = isset($data['preferred_name']) ? $this->createData($data['preferred_name'], 'preferred_name')  : null;
        $this->container['location'] = isset($data['location']) ? $this->createData($data['location'], 'location')  : null;
        $this->container['business'] = isset($data['business']) ? $this->createData($data['business'], 'business')  : null;
        $this->container['short_name'] = isset($data['short_name']) ? $this->createData($data['short_name'], 'short_name')  : null;
        $this->container['full_name'] = isset($data['full_name']) ? $this->createData($data['full_name'], 'full_name')  : null;
        $this->container['first_name'] = isset($data['first_name']) ? $this->createData($data['first_name'], 'first_name')  : null;
        $this->container['middle_names'] = isset($data['middle_names']) ? $this->createData($data['middle_names'], 'middle_names')  : null;
        $this->container['last_name'] = isset($data['last_name']) ? $this->createData($data['last_name'], 'last_name')  : null;
        $this->container['email'] = isset($data['email']) ? $this->createData($data['email'], 'email')  : null;
        $this->container['hometown'] = isset($data['hometown']) ? $this->createData($data['hometown'], 'hometown')  : null;
        $this->container['skills'] = isset($data['skills']) ? $this->createData($data['skills'], 'skills')  : null;
    }

    /**
    *
    * @param mixed[] $data
    * @param string $property
    * @return mixed
    */
    public function createData($data = null, $property){
        if($data === null){
            return '';
        }
        $swaggerType = self::$swaggerTypes[$property];

        preg_match("/([\\\\\w\d]+)(\[\])?/", $swaggerType, $matches);

        if(count($matches) > 0 && count($matches) < 3){
            try {
                $reflection = new \ReflectionClass($swaggerType);
                $reflectionInstance = $reflection->newInstance($data);

                return $reflectionInstance;
            }catch(\Exception $ex){
                return $data;
            }
        }else if(count($matches) >= 3){
            $reflectionInstances = [];
            foreach($data as $d){
                try {
                    $reflection = new \ReflectionClass(str_replace("[]", "", $swaggerType) );
                    $reflectionInstances[] = $reflection->newInstance($d);

                    return $reflectionInstances;
                } catch (\Exception $ex) {
                    return $data;
                }
            }
        }

        return $data;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the 
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets services
     *
     * @return \Domainrobot\Model\DomainEnvelopeSearchService[]
     */
    public function getServices()
    {
        return $this->container['services'];
    }

    /**
     * Sets services
     *
     * @param \Domainrobot\Model\DomainEnvelopeSearchService[] $services The services to fetch extra data from for this source
     *
     * @return $this
     */
    public function setServices($services)
    {
        $this->container['services'] = $services;

        return $this;
    }

    /**
     * Gets max
     *
     * @return int
     */
    public function getMax()
    {
        return $this->container['max'];
    }

    /**
     * Sets max
     *
     * @param int $max Maximum fetched suggested domains
     *
     * @return $this
     */
    public function setMax($max)
    {
        $this->container['max'] = $max;

        return $this;
    }

    /**
     * Gets max_sld_length
     *
     * @return int
     */
    public function getMaxSldLength()
    {
        return $this->container['max_sld_length'];
    }

    /**
     * Sets max_sld_length
     *
     * @param int $max_sld_length Maximum sld length for suggested domains
     *
     * @return $this
     */
    public function setMaxSldLength($max_sld_length)
    {
        $this->container['max_sld_length'] = $max_sld_length;

        return $this;
    }

    /**
     * Gets use_dash
     *
     * @return bool
     */
    public function getUseDash()
    {
        return $this->container['use_dash'];
    }

    /**
     * Sets use_dash
     *
     * @param bool $use_dash Suggested domains with dash
     *
     * @return $this
     */
    public function setUseDash($use_dash)
    {
        $this->container['use_dash'] = $use_dash;

        return $this;
    }

    /**
     * Gets tlds
     *
     * @return string[]
     */
    public function getTlds()
    {
        return $this->container['tlds'];
    }

    /**
     * Sets tlds
     *
     * @param string[] $tlds Selected tlds
     *
     * @return $this
     */
    public function setTlds($tlds)
    {
        $this->container['tlds'] = $tlds;

        return $this;
    }

    /**
     * Gets online_presence_url
     *
     * @return string
     */
    public function getOnlinePresenceUrl()
    {
        return $this->container['online_presence_url'];
    }

    /**
     * Sets online_presence_url
     *
     * @param string $online_presence_url The primary online presence URL.
     *
     * @return $this
     */
    public function setOnlinePresenceUrl($online_presence_url)
    {
        $this->container['online_presence_url'] = $online_presence_url;

        return $this;
    }

    /**
     * Gets online_presence_title
     *
     * @return string
     */
    public function getOnlinePresenceTitle()
    {
        return $this->container['online_presence_title'];
    }

    /**
     * Sets online_presence_title
     *
     * @param string $online_presence_title The title of a website or a page.
     *
     * @return $this
     */
    public function setOnlinePresenceTitle($online_presence_title)
    {
        $this->container['online_presence_title'] = $online_presence_title;

        return $this;
    }

    /**
     * Gets related_urls
     *
     * @return string[]
     */
    public function getRelatedUrls()
    {
        return $this->container['related_urls'];
    }

    /**
     * Sets related_urls
     *
     * @param string[] $related_urls List of related URLs.
     *
     * @return $this
     */
    public function setRelatedUrls($related_urls)
    {
        $this->container['related_urls'] = $related_urls;

        return $this;
    }

    /**
     * Gets category
     *
     * @return string
     */
    public function getCategory()
    {
        return $this->container['category'];
    }

    /**
     * Sets category
     *
     * @param string $category Business category.
     *
     * @return $this
     */
    public function setCategory($category)
    {
        $this->container['category'] = $category;

        return $this;
    }

    /**
     * Gets online_presence_description
     *
     * @return string
     */
    public function getOnlinePresenceDescription()
    {
        return $this->container['online_presence_description'];
    }

    /**
     * Sets online_presence_description
     *
     * @param string $online_presence_description Description of the page.
     *
     * @return $this
     */
    public function setOnlinePresenceDescription($online_presence_description)
    {
        $this->container['online_presence_description'] = $online_presence_description;

        return $this;
    }

    /**
     * Gets preferred_name
     *
     * @return string
     */
    public function getPreferredName()
    {
        return $this->container['preferred_name'];
    }

    /**
     * Sets preferred_name
     *
     * @param string $preferred_name Preferred name. This parameter value isused to create exact match suggestions inpreferred TLDs prioritizing them aboveother suggestions.
     *
     * @return $this
     */
    public function setPreferredName($preferred_name)
    {
        $this->container['preferred_name'] = $preferred_name;

        return $this;
    }

    /**
     * Gets location
     *
     * @return string
     */
    public function getLocation()
    {
        return $this->container['location'];
    }

    /**
     * Sets location
     *
     * @param string $location Location of the business.
     *
     * @return $this
     */
    public function setLocation($location)
    {
        $this->container['location'] = $location;

        return $this;
    }

    /**
     * Gets business
     *
     * @return bool
     */
    public function getBusiness()
    {
        return $this->container['business'];
    }

    /**
     * Sets business
     *
     * @param bool $business A flag indicating if the online presence is a business ornot.
     *
     * @return $this
     */
    public function setBusiness($business)
    {
        $this->container['business'] = $business;

        return $this;
    }

    /**
     * Gets short_name
     *
     * @return string
     */
    public function getShortName()
    {
        return $this->container['short_name'];
    }

    /**
     * Sets short_name
     *
     * @param string $short_name Short name (nick name).
     *
     * @return $this
     */
    public function setShortName($short_name)
    {
        $this->container['short_name'] = $short_name;

        return $this;
    }

    /**
     * Gets full_name
     *
     * @return string
     */
    public function getFullName()
    {
        return $this->container['full_name'];
    }

    /**
     * Sets full_name
     *
     * @param string $full_name Full name.
     *
     * @return $this
     */
    public function setFullName($full_name)
    {
        $this->container['full_name'] = $full_name;

        return $this;
    }

    /**
     * Gets first_name
     *
     * @return string
     */
    public function getFirstName()
    {
        return $this->container['first_name'];
    }

    /**
     * Sets first_name
     *
     * @param string $first_name First name.
     *
     * @return $this
     */
    public function setFirstName($first_name)
    {
        $this->container['first_name'] = $first_name;

        return $this;
    }

    /**
     * Gets middle_names
     *
     * @return string[]
     */
    public function getMiddleNames()
    {
        return $this->container['middle_names'];
    }

    /**
     * Sets middle_names
     *
     * @param string[] $middle_names List of middle names.
     *
     * @return $this
     */
    public function setMiddleNames($middle_names)
    {
        $this->container['middle_names'] = $middle_names;

        return $this;
    }

    /**
     * Gets last_name
     *
     * @return string
     */
    public function getLastName()
    {
        return $this->container['last_name'];
    }

    /**
     * Sets last_name
     *
     * @param string $last_name Last name.
     *
     * @return $this
     */
    public function setLastName($last_name)
    {
        $this->container['last_name'] = $last_name;

        return $this;
    }

    /**
     * Gets email
     *
     * @return string
     */
    public function getEmail()
    {
        return $this->container['email'];
    }

    /**
     * Sets email
     *
     * @param string $email Email.
     *
     * @return $this
     */
    public function setEmail($email)
    {
        $this->container['email'] = $email;

        return $this;
    }

    /**
     * Gets hometown
     *
     * @return string
     */
    public function getHometown()
    {
        return $this->container['hometown'];
    }

    /**
     * Sets hometown
     *
     * @param string $hometown Hometown.
     *
     * @return $this
     */
    public function setHometown($hometown)
    {
        $this->container['hometown'] = $hometown;

        return $this;
    }

    /**
     * Gets skills
     *
     * @return string[]
     */
    public function getSkills()
    {
        return $this->container['skills'];
    }

    /**
     * Sets skills
     *
     * @param string[] $skills List of skills.
     *
     * @return $this
     */
    public function setSkills($skills)
    {
        $this->container['skills'] = $skills;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
    
    /**
     * @param boolean $removeEmptyValues [remove all empty values if true]
     * @param array $retrieveKeys [list of keys to get back in any case]
     * 
     * Examples:
     * toArray() => returns only non empty values
     * toArray(true) => returns all values
     */
    public function toArray($retrieveAllValues = false){
        $container = $this->container;
        foreach ($container as $key => &$value) {
            if (!$retrieveAllValues && empty($value)) {
                unset($container[$key]);
                continue;
            }
            
            if (gettype($value) === "object") {
                if(method_exists($value, 'toArray')) {
                    $value = $value->toArray();
                }else{
                    if(get_class($value) === "DateTime"){
                        $value = $value->format("Y-m-d\TH:i:s");
                    }else{
                        $value = (array) $value;
                    }
                }
            }
            if (is_array($value)) {
                foreach ($value as &$v) {
                    if (gettype($v) === "object") {
                        $v = $v->toArray();
                    }
                }
            }
        };
        return $container;
    }
}


