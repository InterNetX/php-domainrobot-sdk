<?php
/**
 * EstimationParameters
 *
 * PHP version 5
 *
 * @category Class
 * @package  Domainrobot
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Service Pricer API
 *
 * The documentation for the internal price estimation API.<br> Every request expects the following headers:<ul><li>Content-Type: application/json</li><li>Accept: application/json</li></ul>
 *
 * OpenAPI spec version: 1.2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.16-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Domainrobot\Model;

use \ArrayAccess;
use \Domainrobot\ObjectSerializer;

/**
 * EstimationParameters Class Doc Comment
 *
 * @category Class
 * @package  Domainrobot
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class EstimationParameters implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'EstimationParameters';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'average_keyword_frequency' => 'string',
        'average_keyword_price' => 'string',
        'average_length_frequency' => 'string',
        'average_length_price' => 'string',
        'average_tld_frequency' => 'string',
        'average_tld_price' => 'string',
        'char' => 'string',
        'com_domain' => 'string',
        'completely_num' => 'string',
        'found_keywords' => 'string',
        'found_prefix' => 'string',
        'found_suffix' => 'string',
        'hyph' => 'string',
        'idn_encoding' => 'string',
        'keyword_count' => 'string',
        'majestics_global_rank' => 'string',
        'majestics_prev_global_rank' => 'string',
        'majestics_prev_ref_i_ps' => 'string',
        'majestics_prev_ref_sub_nets' => 'string',
        'majestics_prev_tld_rank' => 'string',
        'majestics_ref_i_ps' => 'string',
        'majestics_ref_sub_nets' => 'string',
        'majestics_tld_rank' => 'string',
        'name_seg' => 'string',
        'num' => 'string',
        'num_words' => 'string',
        'tld' => 'string',
        'tld_num_domains' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'average_keyword_frequency' => null,
        'average_keyword_price' => null,
        'average_length_frequency' => null,
        'average_length_price' => null,
        'average_tld_frequency' => null,
        'average_tld_price' => null,
        'char' => null,
        'com_domain' => null,
        'completely_num' => null,
        'found_keywords' => null,
        'found_prefix' => null,
        'found_suffix' => null,
        'hyph' => null,
        'idn_encoding' => null,
        'keyword_count' => null,
        'majestics_global_rank' => null,
        'majestics_prev_global_rank' => null,
        'majestics_prev_ref_i_ps' => null,
        'majestics_prev_ref_sub_nets' => null,
        'majestics_prev_tld_rank' => null,
        'majestics_ref_i_ps' => null,
        'majestics_ref_sub_nets' => null,
        'majestics_tld_rank' => null,
        'name_seg' => null,
        'num' => null,
        'num_words' => null,
        'tld' => null,
        'tld_num_domains' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'average_keyword_frequency' => 'averageKeywordFrequency',
        'average_keyword_price' => 'averageKeywordPrice',
        'average_length_frequency' => 'averageLengthFrequency',
        'average_length_price' => 'averageLengthPrice',
        'average_tld_frequency' => 'averageTldFrequency',
        'average_tld_price' => 'averageTldPrice',
        'char' => 'char',
        'com_domain' => 'comDomain',
        'completely_num' => 'completelyNum',
        'found_keywords' => 'foundKeywords',
        'found_prefix' => 'foundPrefix',
        'found_suffix' => 'foundSuffix',
        'hyph' => 'hyph',
        'idn_encoding' => 'idnEncoding',
        'keyword_count' => 'keywordCount',
        'majestics_global_rank' => 'majesticsGlobalRank',
        'majestics_prev_global_rank' => 'majesticsPrevGlobalRank',
        'majestics_prev_ref_i_ps' => 'majesticsPrevRefIPs',
        'majestics_prev_ref_sub_nets' => 'majesticsPrevRefSubNets',
        'majestics_prev_tld_rank' => 'majesticsPrevTldRank',
        'majestics_ref_i_ps' => 'majesticsRefIPs',
        'majestics_ref_sub_nets' => 'majesticsRefSubNets',
        'majestics_tld_rank' => 'majesticsTldRank',
        'name_seg' => 'nameSeg',
        'num' => 'num',
        'num_words' => 'numWords',
        'tld' => 'tld',
        'tld_num_domains' => 'tldNumDomains'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'average_keyword_frequency' => 'setAverageKeywordFrequency',
        'average_keyword_price' => 'setAverageKeywordPrice',
        'average_length_frequency' => 'setAverageLengthFrequency',
        'average_length_price' => 'setAverageLengthPrice',
        'average_tld_frequency' => 'setAverageTldFrequency',
        'average_tld_price' => 'setAverageTldPrice',
        'char' => 'setChar',
        'com_domain' => 'setComDomain',
        'completely_num' => 'setCompletelyNum',
        'found_keywords' => 'setFoundKeywords',
        'found_prefix' => 'setFoundPrefix',
        'found_suffix' => 'setFoundSuffix',
        'hyph' => 'setHyph',
        'idn_encoding' => 'setIdnEncoding',
        'keyword_count' => 'setKeywordCount',
        'majestics_global_rank' => 'setMajesticsGlobalRank',
        'majestics_prev_global_rank' => 'setMajesticsPrevGlobalRank',
        'majestics_prev_ref_i_ps' => 'setMajesticsPrevRefIPs',
        'majestics_prev_ref_sub_nets' => 'setMajesticsPrevRefSubNets',
        'majestics_prev_tld_rank' => 'setMajesticsPrevTldRank',
        'majestics_ref_i_ps' => 'setMajesticsRefIPs',
        'majestics_ref_sub_nets' => 'setMajesticsRefSubNets',
        'majestics_tld_rank' => 'setMajesticsTldRank',
        'name_seg' => 'setNameSeg',
        'num' => 'setNum',
        'num_words' => 'setNumWords',
        'tld' => 'setTld',
        'tld_num_domains' => 'setTldNumDomains'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'average_keyword_frequency' => 'getAverageKeywordFrequency',
        'average_keyword_price' => 'getAverageKeywordPrice',
        'average_length_frequency' => 'getAverageLengthFrequency',
        'average_length_price' => 'getAverageLengthPrice',
        'average_tld_frequency' => 'getAverageTldFrequency',
        'average_tld_price' => 'getAverageTldPrice',
        'char' => 'getChar',
        'com_domain' => 'getComDomain',
        'completely_num' => 'getCompletelyNum',
        'found_keywords' => 'getFoundKeywords',
        'found_prefix' => 'getFoundPrefix',
        'found_suffix' => 'getFoundSuffix',
        'hyph' => 'getHyph',
        'idn_encoding' => 'getIdnEncoding',
        'keyword_count' => 'getKeywordCount',
        'majestics_global_rank' => 'getMajesticsGlobalRank',
        'majestics_prev_global_rank' => 'getMajesticsPrevGlobalRank',
        'majestics_prev_ref_i_ps' => 'getMajesticsPrevRefIPs',
        'majestics_prev_ref_sub_nets' => 'getMajesticsPrevRefSubNets',
        'majestics_prev_tld_rank' => 'getMajesticsPrevTldRank',
        'majestics_ref_i_ps' => 'getMajesticsRefIPs',
        'majestics_ref_sub_nets' => 'getMajesticsRefSubNets',
        'majestics_tld_rank' => 'getMajesticsTldRank',
        'name_seg' => 'getNameSeg',
        'num' => 'getNum',
        'num_words' => 'getNumWords',
        'tld' => 'getTld',
        'tld_num_domains' => 'getTldNumDomains'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['average_keyword_frequency'] = isset($data['average_keyword_frequency']) ? $this->createData($data['average_keyword_frequency'], 'average_keyword_frequency')  : null;
        $this->container['average_keyword_price'] = isset($data['average_keyword_price']) ? $this->createData($data['average_keyword_price'], 'average_keyword_price')  : null;
        $this->container['average_length_frequency'] = isset($data['average_length_frequency']) ? $this->createData($data['average_length_frequency'], 'average_length_frequency')  : null;
        $this->container['average_length_price'] = isset($data['average_length_price']) ? $this->createData($data['average_length_price'], 'average_length_price')  : null;
        $this->container['average_tld_frequency'] = isset($data['average_tld_frequency']) ? $this->createData($data['average_tld_frequency'], 'average_tld_frequency')  : null;
        $this->container['average_tld_price'] = isset($data['average_tld_price']) ? $this->createData($data['average_tld_price'], 'average_tld_price')  : null;
        $this->container['char'] = isset($data['char']) ? $this->createData($data['char'], 'char')  : null;
        $this->container['com_domain'] = isset($data['com_domain']) ? $this->createData($data['com_domain'], 'com_domain')  : null;
        $this->container['completely_num'] = isset($data['completely_num']) ? $this->createData($data['completely_num'], 'completely_num')  : null;
        $this->container['found_keywords'] = isset($data['found_keywords']) ? $this->createData($data['found_keywords'], 'found_keywords')  : null;
        $this->container['found_prefix'] = isset($data['found_prefix']) ? $this->createData($data['found_prefix'], 'found_prefix')  : null;
        $this->container['found_suffix'] = isset($data['found_suffix']) ? $this->createData($data['found_suffix'], 'found_suffix')  : null;
        $this->container['hyph'] = isset($data['hyph']) ? $this->createData($data['hyph'], 'hyph')  : null;
        $this->container['idn_encoding'] = isset($data['idn_encoding']) ? $this->createData($data['idn_encoding'], 'idn_encoding')  : null;
        $this->container['keyword_count'] = isset($data['keyword_count']) ? $this->createData($data['keyword_count'], 'keyword_count')  : null;
        $this->container['majestics_global_rank'] = isset($data['majestics_global_rank']) ? $this->createData($data['majestics_global_rank'], 'majestics_global_rank')  : null;
        $this->container['majestics_prev_global_rank'] = isset($data['majestics_prev_global_rank']) ? $this->createData($data['majestics_prev_global_rank'], 'majestics_prev_global_rank')  : null;
        $this->container['majestics_prev_ref_i_ps'] = isset($data['majestics_prev_ref_i_ps']) ? $this->createData($data['majestics_prev_ref_i_ps'], 'majestics_prev_ref_i_ps')  : null;
        $this->container['majestics_prev_ref_sub_nets'] = isset($data['majestics_prev_ref_sub_nets']) ? $this->createData($data['majestics_prev_ref_sub_nets'], 'majestics_prev_ref_sub_nets')  : null;
        $this->container['majestics_prev_tld_rank'] = isset($data['majestics_prev_tld_rank']) ? $this->createData($data['majestics_prev_tld_rank'], 'majestics_prev_tld_rank')  : null;
        $this->container['majestics_ref_i_ps'] = isset($data['majestics_ref_i_ps']) ? $this->createData($data['majestics_ref_i_ps'], 'majestics_ref_i_ps')  : null;
        $this->container['majestics_ref_sub_nets'] = isset($data['majestics_ref_sub_nets']) ? $this->createData($data['majestics_ref_sub_nets'], 'majestics_ref_sub_nets')  : null;
        $this->container['majestics_tld_rank'] = isset($data['majestics_tld_rank']) ? $this->createData($data['majestics_tld_rank'], 'majestics_tld_rank')  : null;
        $this->container['name_seg'] = isset($data['name_seg']) ? $this->createData($data['name_seg'], 'name_seg')  : null;
        $this->container['num'] = isset($data['num']) ? $this->createData($data['num'], 'num')  : null;
        $this->container['num_words'] = isset($data['num_words']) ? $this->createData($data['num_words'], 'num_words')  : null;
        $this->container['tld'] = isset($data['tld']) ? $this->createData($data['tld'], 'tld')  : null;
        $this->container['tld_num_domains'] = isset($data['tld_num_domains']) ? $this->createData($data['tld_num_domains'], 'tld_num_domains')  : null;
    }

    /**
    *
    * @param mixed[] $data
    * @param string $property
    * @return mixed
    */
    public function createData($data = null, $property){
        if($data === null){
            return '';
        }
        $swaggerType = self::$swaggerTypes[$property];

        preg_match("/([\\\\\w\d]+)(\[\])?/", $swaggerType, $matches);

        if(count($matches) > 0 && count($matches) < 3){
            try {
                $reflection = new \ReflectionClass($swaggerType);
                $reflectionInstance = $reflection->newInstance($data);

                return $reflectionInstance;
            }catch(\Exception $ex){
                return $data;
            }
        }else if(count($matches) >= 3){
            $reflectionInstances = [];
            foreach($data as $d){
                try {
                    $reflection = new \ReflectionClass(str_replace("[]", "", $swaggerType) );
                    $reflectionInstances[] = $reflection->newInstance($d);

                    return $reflectionInstances;
                } catch (\Exception $ex) {
                    return $data;
                }
            }
        }

        return $data;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the 
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets average_keyword_frequency
     *
     * @return string
     */
    public function getAverageKeywordFrequency()
    {
        return $this->container['average_keyword_frequency'];
    }

    /**
     * Sets average_keyword_frequency
     *
     * @param string $average_keyword_frequency average_keyword_frequency
     *
     * @return $this
     */
    public function setAverageKeywordFrequency($average_keyword_frequency)
    {
        $this->container['average_keyword_frequency'] = $average_keyword_frequency;

        return $this;
    }

    /**
     * Gets average_keyword_price
     *
     * @return string
     */
    public function getAverageKeywordPrice()
    {
        return $this->container['average_keyword_price'];
    }

    /**
     * Sets average_keyword_price
     *
     * @param string $average_keyword_price average_keyword_price
     *
     * @return $this
     */
    public function setAverageKeywordPrice($average_keyword_price)
    {
        $this->container['average_keyword_price'] = $average_keyword_price;

        return $this;
    }

    /**
     * Gets average_length_frequency
     *
     * @return string
     */
    public function getAverageLengthFrequency()
    {
        return $this->container['average_length_frequency'];
    }

    /**
     * Sets average_length_frequency
     *
     * @param string $average_length_frequency average_length_frequency
     *
     * @return $this
     */
    public function setAverageLengthFrequency($average_length_frequency)
    {
        $this->container['average_length_frequency'] = $average_length_frequency;

        return $this;
    }

    /**
     * Gets average_length_price
     *
     * @return string
     */
    public function getAverageLengthPrice()
    {
        return $this->container['average_length_price'];
    }

    /**
     * Sets average_length_price
     *
     * @param string $average_length_price average_length_price
     *
     * @return $this
     */
    public function setAverageLengthPrice($average_length_price)
    {
        $this->container['average_length_price'] = $average_length_price;

        return $this;
    }

    /**
     * Gets average_tld_frequency
     *
     * @return string
     */
    public function getAverageTldFrequency()
    {
        return $this->container['average_tld_frequency'];
    }

    /**
     * Sets average_tld_frequency
     *
     * @param string $average_tld_frequency average_tld_frequency
     *
     * @return $this
     */
    public function setAverageTldFrequency($average_tld_frequency)
    {
        $this->container['average_tld_frequency'] = $average_tld_frequency;

        return $this;
    }

    /**
     * Gets average_tld_price
     *
     * @return string
     */
    public function getAverageTldPrice()
    {
        return $this->container['average_tld_price'];
    }

    /**
     * Sets average_tld_price
     *
     * @param string $average_tld_price average_tld_price
     *
     * @return $this
     */
    public function setAverageTldPrice($average_tld_price)
    {
        $this->container['average_tld_price'] = $average_tld_price;

        return $this;
    }

    /**
     * Gets char
     *
     * @return string
     */
    public function getChar()
    {
        return $this->container['char'];
    }

    /**
     * Sets char
     *
     * @param string $char char
     *
     * @return $this
     */
    public function setChar($char)
    {
        $this->container['char'] = $char;

        return $this;
    }

    /**
     * Gets com_domain
     *
     * @return string
     */
    public function getComDomain()
    {
        return $this->container['com_domain'];
    }

    /**
     * Sets com_domain
     *
     * @param string $com_domain com_domain
     *
     * @return $this
     */
    public function setComDomain($com_domain)
    {
        $this->container['com_domain'] = $com_domain;

        return $this;
    }

    /**
     * Gets completely_num
     *
     * @return string
     */
    public function getCompletelyNum()
    {
        return $this->container['completely_num'];
    }

    /**
     * Sets completely_num
     *
     * @param string $completely_num completely_num
     *
     * @return $this
     */
    public function setCompletelyNum($completely_num)
    {
        $this->container['completely_num'] = $completely_num;

        return $this;
    }

    /**
     * Gets found_keywords
     *
     * @return string
     */
    public function getFoundKeywords()
    {
        return $this->container['found_keywords'];
    }

    /**
     * Sets found_keywords
     *
     * @param string $found_keywords found_keywords
     *
     * @return $this
     */
    public function setFoundKeywords($found_keywords)
    {
        $this->container['found_keywords'] = $found_keywords;

        return $this;
    }

    /**
     * Gets found_prefix
     *
     * @return string
     */
    public function getFoundPrefix()
    {
        return $this->container['found_prefix'];
    }

    /**
     * Sets found_prefix
     *
     * @param string $found_prefix found_prefix
     *
     * @return $this
     */
    public function setFoundPrefix($found_prefix)
    {
        $this->container['found_prefix'] = $found_prefix;

        return $this;
    }

    /**
     * Gets found_suffix
     *
     * @return string
     */
    public function getFoundSuffix()
    {
        return $this->container['found_suffix'];
    }

    /**
     * Sets found_suffix
     *
     * @param string $found_suffix found_suffix
     *
     * @return $this
     */
    public function setFoundSuffix($found_suffix)
    {
        $this->container['found_suffix'] = $found_suffix;

        return $this;
    }

    /**
     * Gets hyph
     *
     * @return string
     */
    public function getHyph()
    {
        return $this->container['hyph'];
    }

    /**
     * Sets hyph
     *
     * @param string $hyph hyph
     *
     * @return $this
     */
    public function setHyph($hyph)
    {
        $this->container['hyph'] = $hyph;

        return $this;
    }

    /**
     * Gets idn_encoding
     *
     * @return string
     */
    public function getIdnEncoding()
    {
        return $this->container['idn_encoding'];
    }

    /**
     * Sets idn_encoding
     *
     * @param string $idn_encoding idn_encoding
     *
     * @return $this
     */
    public function setIdnEncoding($idn_encoding)
    {
        $this->container['idn_encoding'] = $idn_encoding;

        return $this;
    }

    /**
     * Gets keyword_count
     *
     * @return string
     */
    public function getKeywordCount()
    {
        return $this->container['keyword_count'];
    }

    /**
     * Sets keyword_count
     *
     * @param string $keyword_count keyword_count
     *
     * @return $this
     */
    public function setKeywordCount($keyword_count)
    {
        $this->container['keyword_count'] = $keyword_count;

        return $this;
    }

    /**
     * Gets majestics_global_rank
     *
     * @return string
     */
    public function getMajesticsGlobalRank()
    {
        return $this->container['majestics_global_rank'];
    }

    /**
     * Sets majestics_global_rank
     *
     * @param string $majestics_global_rank majestics_global_rank
     *
     * @return $this
     */
    public function setMajesticsGlobalRank($majestics_global_rank)
    {
        $this->container['majestics_global_rank'] = $majestics_global_rank;

        return $this;
    }

    /**
     * Gets majestics_prev_global_rank
     *
     * @return string
     */
    public function getMajesticsPrevGlobalRank()
    {
        return $this->container['majestics_prev_global_rank'];
    }

    /**
     * Sets majestics_prev_global_rank
     *
     * @param string $majestics_prev_global_rank majestics_prev_global_rank
     *
     * @return $this
     */
    public function setMajesticsPrevGlobalRank($majestics_prev_global_rank)
    {
        $this->container['majestics_prev_global_rank'] = $majestics_prev_global_rank;

        return $this;
    }

    /**
     * Gets majestics_prev_ref_i_ps
     *
     * @return string
     */
    public function getMajesticsPrevRefIPs()
    {
        return $this->container['majestics_prev_ref_i_ps'];
    }

    /**
     * Sets majestics_prev_ref_i_ps
     *
     * @param string $majestics_prev_ref_i_ps majestics_prev_ref_i_ps
     *
     * @return $this
     */
    public function setMajesticsPrevRefIPs($majestics_prev_ref_i_ps)
    {
        $this->container['majestics_prev_ref_i_ps'] = $majestics_prev_ref_i_ps;

        return $this;
    }

    /**
     * Gets majestics_prev_ref_sub_nets
     *
     * @return string
     */
    public function getMajesticsPrevRefSubNets()
    {
        return $this->container['majestics_prev_ref_sub_nets'];
    }

    /**
     * Sets majestics_prev_ref_sub_nets
     *
     * @param string $majestics_prev_ref_sub_nets majestics_prev_ref_sub_nets
     *
     * @return $this
     */
    public function setMajesticsPrevRefSubNets($majestics_prev_ref_sub_nets)
    {
        $this->container['majestics_prev_ref_sub_nets'] = $majestics_prev_ref_sub_nets;

        return $this;
    }

    /**
     * Gets majestics_prev_tld_rank
     *
     * @return string
     */
    public function getMajesticsPrevTldRank()
    {
        return $this->container['majestics_prev_tld_rank'];
    }

    /**
     * Sets majestics_prev_tld_rank
     *
     * @param string $majestics_prev_tld_rank majestics_prev_tld_rank
     *
     * @return $this
     */
    public function setMajesticsPrevTldRank($majestics_prev_tld_rank)
    {
        $this->container['majestics_prev_tld_rank'] = $majestics_prev_tld_rank;

        return $this;
    }

    /**
     * Gets majestics_ref_i_ps
     *
     * @return string
     */
    public function getMajesticsRefIPs()
    {
        return $this->container['majestics_ref_i_ps'];
    }

    /**
     * Sets majestics_ref_i_ps
     *
     * @param string $majestics_ref_i_ps majestics_ref_i_ps
     *
     * @return $this
     */
    public function setMajesticsRefIPs($majestics_ref_i_ps)
    {
        $this->container['majestics_ref_i_ps'] = $majestics_ref_i_ps;

        return $this;
    }

    /**
     * Gets majestics_ref_sub_nets
     *
     * @return string
     */
    public function getMajesticsRefSubNets()
    {
        return $this->container['majestics_ref_sub_nets'];
    }

    /**
     * Sets majestics_ref_sub_nets
     *
     * @param string $majestics_ref_sub_nets majestics_ref_sub_nets
     *
     * @return $this
     */
    public function setMajesticsRefSubNets($majestics_ref_sub_nets)
    {
        $this->container['majestics_ref_sub_nets'] = $majestics_ref_sub_nets;

        return $this;
    }

    /**
     * Gets majestics_tld_rank
     *
     * @return string
     */
    public function getMajesticsTldRank()
    {
        return $this->container['majestics_tld_rank'];
    }

    /**
     * Sets majestics_tld_rank
     *
     * @param string $majestics_tld_rank majestics_tld_rank
     *
     * @return $this
     */
    public function setMajesticsTldRank($majestics_tld_rank)
    {
        $this->container['majestics_tld_rank'] = $majestics_tld_rank;

        return $this;
    }

    /**
     * Gets name_seg
     *
     * @return string
     */
    public function getNameSeg()
    {
        return $this->container['name_seg'];
    }

    /**
     * Sets name_seg
     *
     * @param string $name_seg name_seg
     *
     * @return $this
     */
    public function setNameSeg($name_seg)
    {
        $this->container['name_seg'] = $name_seg;

        return $this;
    }

    /**
     * Gets num
     *
     * @return string
     */
    public function getNum()
    {
        return $this->container['num'];
    }

    /**
     * Sets num
     *
     * @param string $num num
     *
     * @return $this
     */
    public function setNum($num)
    {
        $this->container['num'] = $num;

        return $this;
    }

    /**
     * Gets num_words
     *
     * @return string
     */
    public function getNumWords()
    {
        return $this->container['num_words'];
    }

    /**
     * Sets num_words
     *
     * @param string $num_words num_words
     *
     * @return $this
     */
    public function setNumWords($num_words)
    {
        $this->container['num_words'] = $num_words;

        return $this;
    }

    /**
     * Gets tld
     *
     * @return string
     */
    public function getTld()
    {
        return $this->container['tld'];
    }

    /**
     * Sets tld
     *
     * @param string $tld tld
     *
     * @return $this
     */
    public function setTld($tld)
    {
        $this->container['tld'] = $tld;

        return $this;
    }

    /**
     * Gets tld_num_domains
     *
     * @return string
     */
    public function getTldNumDomains()
    {
        return $this->container['tld_num_domains'];
    }

    /**
     * Sets tld_num_domains
     *
     * @param string $tld_num_domains tld_num_domains
     *
     * @return $this
     */
    public function setTldNumDomains($tld_num_domains)
    {
        $this->container['tld_num_domains'] = $tld_num_domains;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
    
    /**
     * @param boolean $removeEmptyValues [remove all empty values if true]
     * @param array $retrieveKeys [list of keys to get back in any case]
     * 
     * Examples:
     * toArray() => returns only non empty values
     * toArray(true) => returns all values
     */
    public function toArray($retrieveAllValues = false){
        $container = $this->container;
        foreach ($container as $key => &$value) {
            if (!$retrieveAllValues && empty($value)) {
                unset($container[$key]);
                continue;
            }
            
            if (gettype($value) === "object") {
                if(method_exists($value, 'toArray')) {
                    $value = $value->toArray();
                }else{
                    if(get_class($value) === "DateTime"){
                        $value = $value->format("Y-m-d\TH:i:s");
                    }else{
                        $value = (array) $value;
                    }
                }
            }
            if (is_array($value)) {
                foreach ($value as &$v) {
                    if (gettype($v) === "object") {
                        $v = $v->toArray();
                    }
                }
            }
        };
        return $container;
    }
}


