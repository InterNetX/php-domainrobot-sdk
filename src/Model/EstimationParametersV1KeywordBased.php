<?php
/**
 * EstimationParametersV1KeywordBased
 *
 * PHP version 5
 *
 * @category Class
 * @package  Domainrobot
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Service Pricer API
 *
 * The documentation for the internal price estimation API.<br> Every request expects the following headers:<ul><li>Content-Type: application/json</li><li>Accept: application/json</li></ul>
 *
 * OpenAPI spec version: 1.2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.16-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Domainrobot\Model;

use \ArrayAccess;
use \Domainrobot\ObjectSerializer;

/**
 * EstimationParametersV1KeywordBased Class Doc Comment
 *
 * @category Class
 * @package  Domainrobot
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class EstimationParametersV1KeywordBased implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'EstimationParametersV1_keywordBased';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'word' => 'object',
        'version' => 'object',
        'segments' => 'null[]',
        'num_words' => 'object',
        'keywords' => 'null[]',
        'num_keywords' => 'object',
        'average_keyword_frequency' => 'object',
        'average_keyword_price' => 'object',
        'prefix' => 'object',
        'average_prefix_frequency' => 'object',
        'average_prefix_price' => 'object',
        'suffix' => 'object',
        'average_suffix_frequency' => 'object',
        'average_suffix_price' => 'object'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'word' => null,
        'version' => null,
        'segments' => null,
        'num_words' => null,
        'keywords' => null,
        'num_keywords' => null,
        'average_keyword_frequency' => null,
        'average_keyword_price' => null,
        'prefix' => null,
        'average_prefix_frequency' => null,
        'average_prefix_price' => null,
        'suffix' => null,
        'average_suffix_frequency' => null,
        'average_suffix_price' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'word' => 'word',
        'version' => 'version',
        'segments' => 'segments',
        'num_words' => 'numWords',
        'keywords' => 'keywords',
        'num_keywords' => 'numKeywords',
        'average_keyword_frequency' => 'averageKeywordFrequency',
        'average_keyword_price' => 'averageKeywordPrice',
        'prefix' => 'prefix&quot;',
        'average_prefix_frequency' => 'averagePrefixFrequency',
        'average_prefix_price' => 'averagePrefixPrice',
        'suffix' => 'suffix&quot;',
        'average_suffix_frequency' => 'averageSuffixFrequency',
        'average_suffix_price' => 'averageSuffixPrice&quot;'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'word' => 'setWord',
        'version' => 'setVersion',
        'segments' => 'setSegments',
        'num_words' => 'setNumWords',
        'keywords' => 'setKeywords',
        'num_keywords' => 'setNumKeywords',
        'average_keyword_frequency' => 'setAverageKeywordFrequency',
        'average_keyword_price' => 'setAverageKeywordPrice',
        'prefix' => 'setPrefix',
        'average_prefix_frequency' => 'setAveragePrefixFrequency',
        'average_prefix_price' => 'setAveragePrefixPrice',
        'suffix' => 'setSuffix',
        'average_suffix_frequency' => 'setAverageSuffixFrequency',
        'average_suffix_price' => 'setAverageSuffixPrice'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'word' => 'getWord',
        'version' => 'getVersion',
        'segments' => 'getSegments',
        'num_words' => 'getNumWords',
        'keywords' => 'getKeywords',
        'num_keywords' => 'getNumKeywords',
        'average_keyword_frequency' => 'getAverageKeywordFrequency',
        'average_keyword_price' => 'getAverageKeywordPrice',
        'prefix' => 'getPrefix',
        'average_prefix_frequency' => 'getAveragePrefixFrequency',
        'average_prefix_price' => 'getAveragePrefixPrice',
        'suffix' => 'getSuffix',
        'average_suffix_frequency' => 'getAverageSuffixFrequency',
        'average_suffix_price' => 'getAverageSuffixPrice'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['word'] = isset($data['word']) ? $this->createData($data['word'], 'word')  : null;
        $this->container['version'] = isset($data['version']) ? $this->createData($data['version'], 'version')  : null;
        $this->container['segments'] = isset($data['segments']) ? $this->createData($data['segments'], 'segments')  : null;
        $this->container['num_words'] = isset($data['num_words']) ? $this->createData($data['num_words'], 'num_words')  : null;
        $this->container['keywords'] = isset($data['keywords']) ? $this->createData($data['keywords'], 'keywords')  : null;
        $this->container['num_keywords'] = isset($data['num_keywords']) ? $this->createData($data['num_keywords'], 'num_keywords')  : null;
        $this->container['average_keyword_frequency'] = isset($data['average_keyword_frequency']) ? $this->createData($data['average_keyword_frequency'], 'average_keyword_frequency')  : null;
        $this->container['average_keyword_price'] = isset($data['average_keyword_price']) ? $this->createData($data['average_keyword_price'], 'average_keyword_price')  : null;
        $this->container['prefix'] = isset($data['prefix']) ? $this->createData($data['prefix'], 'prefix')  : null;
        $this->container['average_prefix_frequency'] = isset($data['average_prefix_frequency']) ? $this->createData($data['average_prefix_frequency'], 'average_prefix_frequency')  : null;
        $this->container['average_prefix_price'] = isset($data['average_prefix_price']) ? $this->createData($data['average_prefix_price'], 'average_prefix_price')  : null;
        $this->container['suffix'] = isset($data['suffix']) ? $this->createData($data['suffix'], 'suffix')  : null;
        $this->container['average_suffix_frequency'] = isset($data['average_suffix_frequency']) ? $this->createData($data['average_suffix_frequency'], 'average_suffix_frequency')  : null;
        $this->container['average_suffix_price'] = isset($data['average_suffix_price']) ? $this->createData($data['average_suffix_price'], 'average_suffix_price')  : null;
    }

    /**
    *
    * @param mixed[] $data
    * @param string $property
    * @return mixed
    */
    public function createData($data = null, $property){
        if($data === null){
            return '';
        }
        $swaggerType = self::$swaggerTypes[$property];

        preg_match("/([\\\\\w\d]+)(\[\])?/", $swaggerType, $matches);

        if(count($matches) > 0 && count($matches) < 3){
            try {
                $reflection = new \ReflectionClass($swaggerType);
                $reflectionInstance = $reflection->newInstance($data);

                return $reflectionInstance;
            }catch(\Exception $ex){
                return $data;
            }
        }else if(count($matches) >= 3){
            $reflectionInstances = [];
            foreach($data as $d){
                try {
                    $reflection = new \ReflectionClass(str_replace("[]", "", $swaggerType) );
                    $reflectionInstances[] = $reflection->newInstance($d);

                    return $reflectionInstances;
                } catch (\Exception $ex) {
                    return $data;
                }
            }
        }

        return $data;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the 
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets word
     *
     * @return object
     */
    public function getWord()
    {
        return $this->container['word'];
    }

    /**
     * Sets word
     *
     * @param object $word word
     *
     * @return $this
     */
    public function setWord($word)
    {
        $this->container['word'] = $word;

        return $this;
    }

    /**
     * Gets version
     *
     * @return object
     */
    public function getVersion()
    {
        return $this->container['version'];
    }

    /**
     * Sets version
     *
     * @param object $version version
     *
     * @return $this
     */
    public function setVersion($version)
    {
        $this->container['version'] = $version;

        return $this;
    }

    /**
     * Gets segments
     *
     * @return null[]
     */
    public function getSegments()
    {
        return $this->container['segments'];
    }

    /**
     * Sets segments
     *
     * @param null[] $segments segments
     *
     * @return $this
     */
    public function setSegments($segments)
    {
        $this->container['segments'] = $segments;

        return $this;
    }

    /**
     * Gets num_words
     *
     * @return object
     */
    public function getNumWords()
    {
        return $this->container['num_words'];
    }

    /**
     * Sets num_words
     *
     * @param object $num_words num_words
     *
     * @return $this
     */
    public function setNumWords($num_words)
    {
        $this->container['num_words'] = $num_words;

        return $this;
    }

    /**
     * Gets keywords
     *
     * @return null[]
     */
    public function getKeywords()
    {
        return $this->container['keywords'];
    }

    /**
     * Sets keywords
     *
     * @param null[] $keywords keywords
     *
     * @return $this
     */
    public function setKeywords($keywords)
    {
        $this->container['keywords'] = $keywords;

        return $this;
    }

    /**
     * Gets num_keywords
     *
     * @return object
     */
    public function getNumKeywords()
    {
        return $this->container['num_keywords'];
    }

    /**
     * Sets num_keywords
     *
     * @param object $num_keywords num_keywords
     *
     * @return $this
     */
    public function setNumKeywords($num_keywords)
    {
        $this->container['num_keywords'] = $num_keywords;

        return $this;
    }

    /**
     * Gets average_keyword_frequency
     *
     * @return object
     */
    public function getAverageKeywordFrequency()
    {
        return $this->container['average_keyword_frequency'];
    }

    /**
     * Sets average_keyword_frequency
     *
     * @param object $average_keyword_frequency average_keyword_frequency
     *
     * @return $this
     */
    public function setAverageKeywordFrequency($average_keyword_frequency)
    {
        $this->container['average_keyword_frequency'] = $average_keyword_frequency;

        return $this;
    }

    /**
     * Gets average_keyword_price
     *
     * @return object
     */
    public function getAverageKeywordPrice()
    {
        return $this->container['average_keyword_price'];
    }

    /**
     * Sets average_keyword_price
     *
     * @param object $average_keyword_price average_keyword_price
     *
     * @return $this
     */
    public function setAverageKeywordPrice($average_keyword_price)
    {
        $this->container['average_keyword_price'] = $average_keyword_price;

        return $this;
    }

    /**
     * Gets prefix
     *
     * @return object
     */
    public function getPrefix()
    {
        return $this->container['prefix'];
    }

    /**
     * Sets prefix
     *
     * @param object $prefix prefix
     *
     * @return $this
     */
    public function setPrefix($prefix)
    {
        $this->container['prefix'] = $prefix;

        return $this;
    }

    /**
     * Gets average_prefix_frequency
     *
     * @return object
     */
    public function getAveragePrefixFrequency()
    {
        return $this->container['average_prefix_frequency'];
    }

    /**
     * Sets average_prefix_frequency
     *
     * @param object $average_prefix_frequency average_prefix_frequency
     *
     * @return $this
     */
    public function setAveragePrefixFrequency($average_prefix_frequency)
    {
        $this->container['average_prefix_frequency'] = $average_prefix_frequency;

        return $this;
    }

    /**
     * Gets average_prefix_price
     *
     * @return object
     */
    public function getAveragePrefixPrice()
    {
        return $this->container['average_prefix_price'];
    }

    /**
     * Sets average_prefix_price
     *
     * @param object $average_prefix_price average_prefix_price
     *
     * @return $this
     */
    public function setAveragePrefixPrice($average_prefix_price)
    {
        $this->container['average_prefix_price'] = $average_prefix_price;

        return $this;
    }

    /**
     * Gets suffix
     *
     * @return object
     */
    public function getSuffix()
    {
        return $this->container['suffix'];
    }

    /**
     * Sets suffix
     *
     * @param object $suffix suffix
     *
     * @return $this
     */
    public function setSuffix($suffix)
    {
        $this->container['suffix'] = $suffix;

        return $this;
    }

    /**
     * Gets average_suffix_frequency
     *
     * @return object
     */
    public function getAverageSuffixFrequency()
    {
        return $this->container['average_suffix_frequency'];
    }

    /**
     * Sets average_suffix_frequency
     *
     * @param object $average_suffix_frequency average_suffix_frequency
     *
     * @return $this
     */
    public function setAverageSuffixFrequency($average_suffix_frequency)
    {
        $this->container['average_suffix_frequency'] = $average_suffix_frequency;

        return $this;
    }

    /**
     * Gets average_suffix_price
     *
     * @return object
     */
    public function getAverageSuffixPrice()
    {
        return $this->container['average_suffix_price'];
    }

    /**
     * Sets average_suffix_price
     *
     * @param object $average_suffix_price average_suffix_price
     *
     * @return $this
     */
    public function setAverageSuffixPrice($average_suffix_price)
    {
        $this->container['average_suffix_price'] = $average_suffix_price;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
    
    /**
     * @param boolean $removeEmptyValues [remove all empty values if true]
     * @param array $retrieveKeys [list of keys to get back in any case]
     * 
     * Examples:
     * toArray() => returns only non empty values
     * toArray(true) => returns all values
     */
    public function toArray($retrieveAllValues = false){
        $container = $this->container;
        foreach ($container as $key => &$value) {
            if (!$retrieveAllValues && empty($value)) {
                unset($container[$key]);
                continue;
            }
            
            if (gettype($value) === "object") {
                if(method_exists($value, 'toArray')) {
                    $value = $value->toArray();
                }else{
                    if(get_class($value) === "DateTime"){
                        $value = $value->format("Y-m-d\TH:i:s");
                    }else{
                        $value = (array) $value;
                    }
                }
            }
            if (is_array($value)) {
                foreach ($value as &$v) {
                    if (gettype($v) === "object") {
                        $v = $v->toArray();
                    }
                }
            }
        };
        return $container;
    }
}


