<?php
/**
 * EstimationParametersV1TldBased
 *
 * PHP version 5
 *
 * @category Class
 * @package  Domainrobot
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Service Pricer API
 *
 * The documentation for the internal price estimation API.<br> Every request expects the following headers:<ul><li>Content-Type: application/json</li><li>Accept: application/json</li></ul>
 *
 * OpenAPI spec version: 1.2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.12-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Domainrobot\Model;

use \ArrayAccess;
use \Domainrobot\ObjectSerializer;

/**
 * EstimationParametersV1TldBased Class Doc Comment
 *
 * @category Class
 * @package  Domainrobot
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class EstimationParametersV1TldBased implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'EstimationParametersV1_tldBased';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'tld' => 'string',
        'subtld' => 'string',
        'averageTldFrequency' => 'float',
        'averageTldPrice' => 'float',
        'averagSubtTldFrequency' => 'float',
        'averageSubtldPrice' => 'float',
        'tldNumDomains' => 'float',
        'tldGlobaleRank' => 'float',
        'subtldNumDomains' => 'float',
        'subtldGlobaleRank' => 'float',
        'languageTldMatch' => 'float'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'tld' => null,
        'subtld' => null,
        'averageTldFrequency' => null,
        'averageTldPrice' => null,
        'averagSubtTldFrequency' => null,
        'averageSubtldPrice' => null,
        'tldNumDomains' => null,
        'tldGlobaleRank' => null,
        'subtldNumDomains' => null,
        'subtldGlobaleRank' => null,
        'languageTldMatch' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'tld' => 'tld',
        'subtld' => 'subtld',
        'averageTldFrequency' => 'averageTldFrequency',
        'averageTldPrice' => 'averageTldPrice',
        'averagSubtTldFrequency' => 'averagSubtTldFrequency',
        'averageSubtldPrice' => 'averageSubtldPrice',
        'tldNumDomains' => 'tldNumDomains',
        'tldGlobaleRank' => 'tldGlobaleRank',
        'subtldNumDomains' => 'subtldNumDomains',
        'subtldGlobaleRank' => 'subtldGlobaleRank',
        'languageTldMatch' => 'languageTldMatch'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'tld' => 'setTld',
        'subtld' => 'setSubtld',
        'averageTldFrequency' => 'setAverageTldFrequency',
        'averageTldPrice' => 'setAverageTldPrice',
        'averagSubtTldFrequency' => 'setAveragSubtTldFrequency',
        'averageSubtldPrice' => 'setAverageSubtldPrice',
        'tldNumDomains' => 'setTldNumDomains',
        'tldGlobaleRank' => 'setTldGlobaleRank',
        'subtldNumDomains' => 'setSubtldNumDomains',
        'subtldGlobaleRank' => 'setSubtldGlobaleRank',
        'languageTldMatch' => 'setLanguageTldMatch'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'tld' => 'getTld',
        'subtld' => 'getSubtld',
        'averageTldFrequency' => 'getAverageTldFrequency',
        'averageTldPrice' => 'getAverageTldPrice',
        'averagSubtTldFrequency' => 'getAveragSubtTldFrequency',
        'averageSubtldPrice' => 'getAverageSubtldPrice',
        'tldNumDomains' => 'getTldNumDomains',
        'tldGlobaleRank' => 'getTldGlobaleRank',
        'subtldNumDomains' => 'getSubtldNumDomains',
        'subtldGlobaleRank' => 'getSubtldGlobaleRank',
        'languageTldMatch' => 'getLanguageTldMatch'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['tld'] = isset($data['tld']) ? $data['tld'] : null;
        $this->container['subtld'] = isset($data['subtld']) ? $data['subtld'] : null;
        $this->container['averageTldFrequency'] = isset($data['averageTldFrequency']) ? $data['averageTldFrequency'] : null;
        $this->container['averageTldPrice'] = isset($data['averageTldPrice']) ? $data['averageTldPrice'] : null;
        $this->container['averagSubtTldFrequency'] = isset($data['averagSubtTldFrequency']) ? $data['averagSubtTldFrequency'] : null;
        $this->container['averageSubtldPrice'] = isset($data['averageSubtldPrice']) ? $data['averageSubtldPrice'] : null;
        $this->container['tldNumDomains'] = isset($data['tldNumDomains']) ? $data['tldNumDomains'] : null;
        $this->container['tldGlobaleRank'] = isset($data['tldGlobaleRank']) ? $data['tldGlobaleRank'] : null;
        $this->container['subtldNumDomains'] = isset($data['subtldNumDomains']) ? $data['subtldNumDomains'] : null;
        $this->container['subtldGlobaleRank'] = isset($data['subtldGlobaleRank']) ? $data['subtldGlobaleRank'] : null;
        $this->container['languageTldMatch'] = isset($data['languageTldMatch']) ? $data['languageTldMatch'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets tld
     *
     * @return string
     */
    public function getTld()
    {
        return $this->container['tld'];
    }

    /**
     * Sets tld
     *
     * @param string $tld tld
     *
     * @return $this
     */
    public function setTld($tld)
    {
        $this->container['tld'] = $tld;

        return $this;
    }

    /**
     * Gets subtld
     *
     * @return string
     */
    public function getSubtld()
    {
        return $this->container['subtld'];
    }

    /**
     * Sets subtld
     *
     * @param string $subtld subtld
     *
     * @return $this
     */
    public function setSubtld($subtld)
    {
        $this->container['subtld'] = $subtld;

        return $this;
    }

    /**
     * Gets averageTldFrequency
     *
     * @return float
     */
    public function getAverageTldFrequency()
    {
        return $this->container['averageTldFrequency'];
    }

    /**
     * Sets averageTldFrequency
     *
     * @param float $averageTldFrequency averageTldFrequency
     *
     * @return $this
     */
    public function setAverageTldFrequency($averageTldFrequency)
    {
        $this->container['averageTldFrequency'] = $averageTldFrequency;

        return $this;
    }

    /**
     * Gets averageTldPrice
     *
     * @return float
     */
    public function getAverageTldPrice()
    {
        return $this->container['averageTldPrice'];
    }

    /**
     * Sets averageTldPrice
     *
     * @param float $averageTldPrice averageTldPrice
     *
     * @return $this
     */
    public function setAverageTldPrice($averageTldPrice)
    {
        $this->container['averageTldPrice'] = $averageTldPrice;

        return $this;
    }

    /**
     * Gets averagSubtTldFrequency
     *
     * @return float
     */
    public function getAveragSubtTldFrequency()
    {
        return $this->container['averagSubtTldFrequency'];
    }

    /**
     * Sets averagSubtTldFrequency
     *
     * @param float $averagSubtTldFrequency averagSubtTldFrequency
     *
     * @return $this
     */
    public function setAveragSubtTldFrequency($averagSubtTldFrequency)
    {
        $this->container['averagSubtTldFrequency'] = $averagSubtTldFrequency;

        return $this;
    }

    /**
     * Gets averageSubtldPrice
     *
     * @return float
     */
    public function getAverageSubtldPrice()
    {
        return $this->container['averageSubtldPrice'];
    }

    /**
     * Sets averageSubtldPrice
     *
     * @param float $averageSubtldPrice averageSubtldPrice
     *
     * @return $this
     */
    public function setAverageSubtldPrice($averageSubtldPrice)
    {
        $this->container['averageSubtldPrice'] = $averageSubtldPrice;

        return $this;
    }

    /**
     * Gets tldNumDomains
     *
     * @return float
     */
    public function getTldNumDomains()
    {
        return $this->container['tldNumDomains'];
    }

    /**
     * Sets tldNumDomains
     *
     * @param float $tldNumDomains tldNumDomains
     *
     * @return $this
     */
    public function setTldNumDomains($tldNumDomains)
    {
        $this->container['tldNumDomains'] = $tldNumDomains;

        return $this;
    }

    /**
     * Gets tldGlobaleRank
     *
     * @return float
     */
    public function getTldGlobaleRank()
    {
        return $this->container['tldGlobaleRank'];
    }

    /**
     * Sets tldGlobaleRank
     *
     * @param float $tldGlobaleRank tldGlobaleRank
     *
     * @return $this
     */
    public function setTldGlobaleRank($tldGlobaleRank)
    {
        $this->container['tldGlobaleRank'] = $tldGlobaleRank;

        return $this;
    }

    /**
     * Gets subtldNumDomains
     *
     * @return float
     */
    public function getSubtldNumDomains()
    {
        return $this->container['subtldNumDomains'];
    }

    /**
     * Sets subtldNumDomains
     *
     * @param float $subtldNumDomains subtldNumDomains
     *
     * @return $this
     */
    public function setSubtldNumDomains($subtldNumDomains)
    {
        $this->container['subtldNumDomains'] = $subtldNumDomains;

        return $this;
    }

    /**
     * Gets subtldGlobaleRank
     *
     * @return float
     */
    public function getSubtldGlobaleRank()
    {
        return $this->container['subtldGlobaleRank'];
    }

    /**
     * Sets subtldGlobaleRank
     *
     * @param float $subtldGlobaleRank subtldGlobaleRank
     *
     * @return $this
     */
    public function setSubtldGlobaleRank($subtldGlobaleRank)
    {
        $this->container['subtldGlobaleRank'] = $subtldGlobaleRank;

        return $this;
    }

    /**
     * Gets languageTldMatch
     *
     * @return float
     */
    public function getLanguageTldMatch()
    {
        return $this->container['languageTldMatch'];
    }

    /**
     * Sets languageTldMatch
     *
     * @param float $languageTldMatch languageTldMatch
     *
     * @return $this
     */
    public function setLanguageTldMatch($languageTldMatch)
    {
        $this->container['languageTldMatch'] = $languageTldMatch;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
    
    /**
     * @param boolean $removeEmptyValues [remove all empty values if true]
     * @param array $retrieveKeys [list of keys to get back in any case]
     * 
     * Examples:
     * toArray() => returns only non empty values
     * toArray(true) => returns all values
     */
    public function toArray($retrieveAllValues = false){
        $container = $this->container;
        foreach($container as $key => &$value){
            if(!$retrieveAllValues && empty($value)){
                unset($container[$key]);
                continue;
            }
            
            if(gettype($value) === "object"){
                $value = $value->toArray();
            }
            if(is_array($value)){
                foreach($value as &$v){
                    if (gettype($v) === "object") {
                        $v = $v->toArray();
                    }
                }
            }
        };
        return $container;
    }
}


