<?php
/**
 * PreregConfig
 *
 * PHP version 5
 *
 * @category Class
 * @package  Domainrobot
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Domainrobot JSON API
 *
 * Domainrobot JSON API for managing: Domains, SSL            Certificates, DNS and            much more.
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.16-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Domainrobot\Model;

use \ArrayAccess;
use \Domainrobot\ObjectSerializer;

/**
 * PreregConfig Class Doc Comment
 *
 * @category Class
 * @package  Domainrobot
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class PreregConfig implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'PreregConfig';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'created' => '\DateTime',
        'updated' => '\DateTime',
        'name' => 'string',
        'phase' => 'string',
        'confirmation_start' => '\DateTime',
        'confirmation_end' => '\DateTime',
        'period_start' => '\DateTime',
        'period_end' => '\DateTime',
        'nic_member_label' => 'string',
        'niccom_start' => '\DateTime',
        'niccom_end' => '\DateTime',
        'autoupdate_dns' => 'bool',
        'category' => 'string',
        'ui_fields' => 'string',
        'registration_type' => '\Domainrobot\Model\RegistrationTypeConstants',
        'message_type' => '\Domainrobot\Model\MessageTypeConstants',
        'min_period' => '\Domainrobot\Model\TimePeriod'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'created' => 'date-time',
        'updated' => 'date-time',
        'name' => null,
        'phase' => null,
        'confirmation_start' => 'date-time',
        'confirmation_end' => 'date-time',
        'period_start' => 'date-time',
        'period_end' => 'date-time',
        'nic_member_label' => null,
        'niccom_start' => 'date-time',
        'niccom_end' => 'date-time',
        'autoupdate_dns' => null,
        'category' => null,
        'ui_fields' => null,
        'registration_type' => null,
        'message_type' => null,
        'min_period' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'created' => 'created',
        'updated' => 'updated',
        'name' => 'name',
        'phase' => 'phase',
        'confirmation_start' => 'confirmationStart',
        'confirmation_end' => 'confirmationEnd',
        'period_start' => 'periodStart',
        'period_end' => 'periodEnd',
        'nic_member_label' => 'nicMemberLabel',
        'niccom_start' => 'niccomStart',
        'niccom_end' => 'niccomEnd',
        'autoupdate_dns' => 'autoupdateDns',
        'category' => 'category',
        'ui_fields' => 'uiFields',
        'registration_type' => 'registrationType',
        'message_type' => 'messageType',
        'min_period' => 'minPeriod'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'created' => 'setCreated',
        'updated' => 'setUpdated',
        'name' => 'setName',
        'phase' => 'setPhase',
        'confirmation_start' => 'setConfirmationStart',
        'confirmation_end' => 'setConfirmationEnd',
        'period_start' => 'setPeriodStart',
        'period_end' => 'setPeriodEnd',
        'nic_member_label' => 'setNicMemberLabel',
        'niccom_start' => 'setNiccomStart',
        'niccom_end' => 'setNiccomEnd',
        'autoupdate_dns' => 'setAutoupdateDns',
        'category' => 'setCategory',
        'ui_fields' => 'setUiFields',
        'registration_type' => 'setRegistrationType',
        'message_type' => 'setMessageType',
        'min_period' => 'setMinPeriod'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'created' => 'getCreated',
        'updated' => 'getUpdated',
        'name' => 'getName',
        'phase' => 'getPhase',
        'confirmation_start' => 'getConfirmationStart',
        'confirmation_end' => 'getConfirmationEnd',
        'period_start' => 'getPeriodStart',
        'period_end' => 'getPeriodEnd',
        'nic_member_label' => 'getNicMemberLabel',
        'niccom_start' => 'getNiccomStart',
        'niccom_end' => 'getNiccomEnd',
        'autoupdate_dns' => 'getAutoupdateDns',
        'category' => 'getCategory',
        'ui_fields' => 'getUiFields',
        'registration_type' => 'getRegistrationType',
        'message_type' => 'getMessageType',
        'min_period' => 'getMinPeriod'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['created'] = isset($data['created']) ? $this->createData($data['created'], 'created')  : null;
        $this->container['updated'] = isset($data['updated']) ? $this->createData($data['updated'], 'updated')  : null;
        $this->container['name'] = isset($data['name']) ? $this->createData($data['name'], 'name')  : null;
        $this->container['phase'] = isset($data['phase']) ? $this->createData($data['phase'], 'phase')  : null;
        $this->container['confirmation_start'] = isset($data['confirmation_start']) ? $this->createData($data['confirmation_start'], 'confirmation_start')  : null;
        $this->container['confirmation_end'] = isset($data['confirmation_end']) ? $this->createData($data['confirmation_end'], 'confirmation_end')  : null;
        $this->container['period_start'] = isset($data['period_start']) ? $this->createData($data['period_start'], 'period_start')  : null;
        $this->container['period_end'] = isset($data['period_end']) ? $this->createData($data['period_end'], 'period_end')  : null;
        $this->container['nic_member_label'] = isset($data['nic_member_label']) ? $this->createData($data['nic_member_label'], 'nic_member_label')  : null;
        $this->container['niccom_start'] = isset($data['niccom_start']) ? $this->createData($data['niccom_start'], 'niccom_start')  : null;
        $this->container['niccom_end'] = isset($data['niccom_end']) ? $this->createData($data['niccom_end'], 'niccom_end')  : null;
        $this->container['autoupdate_dns'] = isset($data['autoupdate_dns']) ? $this->createData($data['autoupdate_dns'], 'autoupdate_dns')  : null;
        $this->container['category'] = isset($data['category']) ? $this->createData($data['category'], 'category')  : null;
        $this->container['ui_fields'] = isset($data['ui_fields']) ? $this->createData($data['ui_fields'], 'ui_fields')  : null;
        $this->container['registration_type'] = isset($data['registration_type']) ? $this->createData($data['registration_type'], 'registration_type')  : null;
        $this->container['message_type'] = isset($data['message_type']) ? $this->createData($data['message_type'], 'message_type')  : null;
        $this->container['min_period'] = isset($data['min_period']) ? $this->createData($data['min_period'], 'min_period')  : null;
    }

    /**
    *
    * @param mixed[] $data
    * @param string $property
    * @return mixed
    */
    public function createData($data = null, $property){
        if($data === null){
            return '';
        }
        $swaggerType = self::$swaggerTypes[$property];

        preg_match("/([\\\\\w\d]+)(\[\])?/", $swaggerType, $matches);

        if(count($matches) > 0 && count($matches) < 3){
            try {
                $reflection = new \ReflectionClass($swaggerType);
                $reflectionInstance = $reflection->newInstance($data);

                return $reflectionInstance;
            }catch(\Exception $ex){
                return $data;
            }
        }else if(count($matches) >= 3){
            $reflectionInstances = [];
            foreach($data as $d){
                try {
                    $reflection = new \ReflectionClass(str_replace("[]", "", $swaggerType) );
                    $reflectionInstances[] = $reflection->newInstance($d);

                    return $reflectionInstances;
                } catch (\Exception $ex) {
                    return $data;
                }
            }
        }

        return $data;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['name'] === null) {
            $invalidProperties[] = "'name' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the 
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets created
     *
     * @return \DateTime
     */
    public function getCreated()
    {
        return $this->container['created'];
    }

    /**
     * Sets created
     *
     * @param \DateTime $created The created date.
     *
     * @return $this
     */
    public function setCreated($created)
    {
        $this->container['created'] = $created;

        return $this;
    }

    /**
     * Gets updated
     *
     * @return \DateTime
     */
    public function getUpdated()
    {
        return $this->container['updated'];
    }

    /**
     * Sets updated
     *
     * @param \DateTime $updated The updated date.
     *
     * @return $this
     */
    public function setUpdated($updated)
    {
        $this->container['updated'] = $updated;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name name
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets phase
     *
     * @return string
     */
    public function getPhase()
    {
        return $this->container['phase'];
    }

    /**
     * Sets phase
     *
     * @param string $phase phase
     *
     * @return $this
     */
    public function setPhase($phase)
    {
        $this->container['phase'] = $phase;

        return $this;
    }

    /**
     * Gets confirmation_start
     *
     * @return \DateTime
     */
    public function getConfirmationStart()
    {
        return $this->container['confirmation_start'];
    }

    /**
     * Sets confirmation_start
     *
     * @param \DateTime $confirmation_start confirmation_start
     *
     * @return $this
     */
    public function setConfirmationStart($confirmation_start)
    {
        $this->container['confirmation_start'] = $confirmation_start;

        return $this;
    }

    /**
     * Gets confirmation_end
     *
     * @return \DateTime
     */
    public function getConfirmationEnd()
    {
        return $this->container['confirmation_end'];
    }

    /**
     * Sets confirmation_end
     *
     * @param \DateTime $confirmation_end confirmation_end
     *
     * @return $this
     */
    public function setConfirmationEnd($confirmation_end)
    {
        $this->container['confirmation_end'] = $confirmation_end;

        return $this;
    }

    /**
     * Gets period_start
     *
     * @return \DateTime
     */
    public function getPeriodStart()
    {
        return $this->container['period_start'];
    }

    /**
     * Sets period_start
     *
     * @param \DateTime $period_start period_start
     *
     * @return $this
     */
    public function setPeriodStart($period_start)
    {
        $this->container['period_start'] = $period_start;

        return $this;
    }

    /**
     * Gets period_end
     *
     * @return \DateTime
     */
    public function getPeriodEnd()
    {
        return $this->container['period_end'];
    }

    /**
     * Sets period_end
     *
     * @param \DateTime $period_end period_end
     *
     * @return $this
     */
    public function setPeriodEnd($period_end)
    {
        $this->container['period_end'] = $period_end;

        return $this;
    }

    /**
     * Gets nic_member_label
     *
     * @return string
     */
    public function getNicMemberLabel()
    {
        return $this->container['nic_member_label'];
    }

    /**
     * Sets nic_member_label
     *
     * @param string $nic_member_label nic_member_label
     *
     * @return $this
     */
    public function setNicMemberLabel($nic_member_label)
    {
        $this->container['nic_member_label'] = $nic_member_label;

        return $this;
    }

    /**
     * Gets niccom_start
     *
     * @return \DateTime
     */
    public function getNiccomStart()
    {
        return $this->container['niccom_start'];
    }

    /**
     * Sets niccom_start
     *
     * @param \DateTime $niccom_start niccom_start
     *
     * @return $this
     */
    public function setNiccomStart($niccom_start)
    {
        $this->container['niccom_start'] = $niccom_start;

        return $this;
    }

    /**
     * Gets niccom_end
     *
     * @return \DateTime
     */
    public function getNiccomEnd()
    {
        return $this->container['niccom_end'];
    }

    /**
     * Sets niccom_end
     *
     * @param \DateTime $niccom_end niccom_end
     *
     * @return $this
     */
    public function setNiccomEnd($niccom_end)
    {
        $this->container['niccom_end'] = $niccom_end;

        return $this;
    }

    /**
     * Gets autoupdate_dns
     *
     * @return bool
     */
    public function getAutoupdateDns()
    {
        return $this->container['autoupdate_dns'];
    }

    /**
     * Sets autoupdate_dns
     *
     * @param bool $autoupdate_dns autoupdate_dns
     *
     * @return $this
     */
    public function setAutoupdateDns($autoupdate_dns)
    {
        $this->container['autoupdate_dns'] = $autoupdate_dns;

        return $this;
    }

    /**
     * Gets category
     *
     * @return string
     */
    public function getCategory()
    {
        return $this->container['category'];
    }

    /**
     * Sets category
     *
     * @param string $category category
     *
     * @return $this
     */
    public function setCategory($category)
    {
        $this->container['category'] = $category;

        return $this;
    }

    /**
     * Gets ui_fields
     *
     * @return string
     */
    public function getUiFields()
    {
        return $this->container['ui_fields'];
    }

    /**
     * Sets ui_fields
     *
     * @param string $ui_fields ui_fields
     *
     * @return $this
     */
    public function setUiFields($ui_fields)
    {
        $this->container['ui_fields'] = $ui_fields;

        return $this;
    }

    /**
     * Gets registration_type
     *
     * @return \Domainrobot\Model\RegistrationTypeConstants
     */
    public function getRegistrationType()
    {
        return $this->container['registration_type'];
    }

    /**
     * Sets registration_type
     *
     * @param \Domainrobot\Model\RegistrationTypeConstants $registration_type registration_type
     *
     * @return $this
     */
    public function setRegistrationType($registration_type)
    {
        $this->container['registration_type'] = $registration_type;

        return $this;
    }

    /**
     * Gets message_type
     *
     * @return \Domainrobot\Model\MessageTypeConstants
     */
    public function getMessageType()
    {
        return $this->container['message_type'];
    }

    /**
     * Sets message_type
     *
     * @param \Domainrobot\Model\MessageTypeConstants $message_type message_type
     *
     * @return $this
     */
    public function setMessageType($message_type)
    {
        $this->container['message_type'] = $message_type;

        return $this;
    }

    /**
     * Gets min_period
     *
     * @return \Domainrobot\Model\TimePeriod
     */
    public function getMinPeriod()
    {
        return $this->container['min_period'];
    }

    /**
     * Sets min_period
     *
     * @param \Domainrobot\Model\TimePeriod $min_period min_period
     *
     * @return $this
     */
    public function setMinPeriod($min_period)
    {
        $this->container['min_period'] = $min_period;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
    
    /**
     * @param boolean $removeEmptyValues [remove all empty values if true]
     * @param array $retrieveKeys [list of keys to get back in any case]
     * 
     * Examples:
     * toArray() => returns only non empty values
     * toArray(true) => returns all values
     */
    public function toArray($retrieveAllValues = false){
        $container = $this->container;
        foreach ($container as $key => &$value) {
            if (!$retrieveAllValues && empty($value)) {
                unset($container[$key]);
                continue;
            }
            
            if (gettype($value) === "object") {
                if(method_exists($value, 'toArray')) {
                    $value = $value->toArray();
                }else{
                    if(get_class($value) === "DateTime"){
                        $value = $value->format("Y-m-d\TH:i:s");
                    }else{
                        $value = (array) $value;
                    }
                }
            }
            if (is_array($value)) {
                foreach ($value as &$v) {
                    if (gettype($v) === "object") {
                        $v = $v->toArray();
                    }
                }
            }
        };
        return $container;
    }
}


