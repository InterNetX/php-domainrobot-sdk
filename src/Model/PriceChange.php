<?php
/**
 * PriceChange
 *
 * PHP version 5
 *
 * @category Class
 * @package  Domainrobot
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Domainrobot JSON API
 *
 * Domainrobot JSON API for managing: Domains, SSL                                             Certificates, DNS and                                             much more.
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.16-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Domainrobot\Model;

use \ArrayAccess;
use \Domainrobot\ObjectSerializer;

/**
 * PriceChange Class Doc Comment
 *
 * @category Class
 * @package  Domainrobot
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class PriceChange implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'PriceChange';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'created' => '\DateTime',
        'updated' => '\DateTime',
        'owner' => '\Domainrobot\Model\BasicUser',
        'updater' => '\Domainrobot\Model\BasicUser',
        'id' => 'int',
        'primary' => '\Domainrobot\Model\PriceChange',
        'name' => 'string',
        'customer' => '\Domainrobot\Model\GenericCustomer',
        'customerData' => '\Domainrobot\Model\BasicCustomer',
        'article' => '\Domainrobot\Model\Article',
        'comment' => 'string',
        'type' => '\Domainrobot\Model\PriceChangeTypeConstants',
        'status' => '\Domainrobot\Model\PriceChangeStatusConstants',
        'confirmed' => '\DateTime',
        'validFrom' => '\DateTime',
        'validUntil' => '\DateTime',
        'messageSend' => '\DateTime',
        'priceTemplates' => '\Domainrobot\Model\ProductPriceTemplate[]',
        'priceClassTemplates' => '\Domainrobot\Model\PriceClassTemplate[]',
        'priceChangeExcludes' => '\Domainrobot\Model\PriceChangeExclude[]',
        'priceChangeExcludesAdd' => '\Domainrobot\Model\PriceChangeExclude[]',
        'priceChangeExcludesRem' => '\Domainrobot\Model\PriceChangeExclude[]',
        'worker' => 'string',
        'ticketNumber' => 'string',
        'priceClassPrefix' => 'string',
        'priceClassType' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'created' => 'date-time',
        'updated' => 'date-time',
        'owner' => null,
        'updater' => null,
        'id' => 'int32',
        'primary' => null,
        'name' => null,
        'customer' => null,
        'customerData' => null,
        'article' => null,
        'comment' => null,
        'type' => null,
        'status' => null,
        'confirmed' => 'date-time',
        'validFrom' => 'date-time',
        'validUntil' => 'date-time',
        'messageSend' => 'date-time',
        'priceTemplates' => null,
        'priceClassTemplates' => null,
        'priceChangeExcludes' => null,
        'priceChangeExcludesAdd' => null,
        'priceChangeExcludesRem' => null,
        'worker' => null,
        'ticketNumber' => null,
        'priceClassPrefix' => null,
        'priceClassType' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'created' => 'created',
        'updated' => 'updated',
        'owner' => 'owner',
        'updater' => 'updater',
        'id' => 'id',
        'primary' => 'primary',
        'name' => 'name',
        'customer' => 'customer',
        'customerData' => 'customerData',
        'article' => 'article',
        'comment' => 'comment',
        'type' => 'type',
        'status' => 'status',
        'confirmed' => 'confirmed',
        'validFrom' => 'validFrom',
        'validUntil' => 'validUntil',
        'messageSend' => 'messageSend',
        'priceTemplates' => 'priceTemplates',
        'priceClassTemplates' => 'priceClassTemplates',
        'priceChangeExcludes' => 'priceChangeExcludes',
        'priceChangeExcludesAdd' => 'priceChangeExcludesAdd',
        'priceChangeExcludesRem' => 'priceChangeExcludesRem',
        'worker' => 'worker',
        'ticketNumber' => 'ticketNumber',
        'priceClassPrefix' => 'priceClassPrefix',
        'priceClassType' => 'priceClassType'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'created' => 'setCreated',
        'updated' => 'setUpdated',
        'owner' => 'setOwner',
        'updater' => 'setUpdater',
        'id' => 'setId',
        'primary' => 'setPrimary',
        'name' => 'setName',
        'customer' => 'setCustomer',
        'customerData' => 'setCustomerData',
        'article' => 'setArticle',
        'comment' => 'setComment',
        'type' => 'setType',
        'status' => 'setStatus',
        'confirmed' => 'setConfirmed',
        'validFrom' => 'setValidFrom',
        'validUntil' => 'setValidUntil',
        'messageSend' => 'setMessageSend',
        'priceTemplates' => 'setPriceTemplates',
        'priceClassTemplates' => 'setPriceClassTemplates',
        'priceChangeExcludes' => 'setPriceChangeExcludes',
        'priceChangeExcludesAdd' => 'setPriceChangeExcludesAdd',
        'priceChangeExcludesRem' => 'setPriceChangeExcludesRem',
        'worker' => 'setWorker',
        'ticketNumber' => 'setTicketNumber',
        'priceClassPrefix' => 'setPriceClassPrefix',
        'priceClassType' => 'setPriceClassType'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'created' => 'getCreated',
        'updated' => 'getUpdated',
        'owner' => 'getOwner',
        'updater' => 'getUpdater',
        'id' => 'getId',
        'primary' => 'getPrimary',
        'name' => 'getName',
        'customer' => 'getCustomer',
        'customerData' => 'getCustomerData',
        'article' => 'getArticle',
        'comment' => 'getComment',
        'type' => 'getType',
        'status' => 'getStatus',
        'confirmed' => 'getConfirmed',
        'validFrom' => 'getValidFrom',
        'validUntil' => 'getValidUntil',
        'messageSend' => 'getMessageSend',
        'priceTemplates' => 'getPriceTemplates',
        'priceClassTemplates' => 'getPriceClassTemplates',
        'priceChangeExcludes' => 'getPriceChangeExcludes',
        'priceChangeExcludesAdd' => 'getPriceChangeExcludesAdd',
        'priceChangeExcludesRem' => 'getPriceChangeExcludesRem',
        'worker' => 'getWorker',
        'ticketNumber' => 'getTicketNumber',
        'priceClassPrefix' => 'getPriceClassPrefix',
        'priceClassType' => 'getPriceClassType'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['created'] = isset($data['created']) ? $this->createData($data['created'], 'created')  : null;
        $this->container['updated'] = isset($data['updated']) ? $this->createData($data['updated'], 'updated')  : null;
        $this->container['owner'] = isset($data['owner']) ? $this->createData($data['owner'], 'owner')  : null;
        $this->container['updater'] = isset($data['updater']) ? $this->createData($data['updater'], 'updater')  : null;
        $this->container['id'] = isset($data['id']) ? $this->createData($data['id'], 'id')  : null;
        $this->container['primary'] = isset($data['primary']) ? $this->createData($data['primary'], 'primary')  : null;
        $this->container['name'] = isset($data['name']) ? $this->createData($data['name'], 'name')  : null;
        $this->container['customer'] = isset($data['customer']) ? $this->createData($data['customer'], 'customer')  : null;
        $this->container['customerData'] = isset($data['customerData']) ? $this->createData($data['customerData'], 'customerData')  : null;
        $this->container['article'] = isset($data['article']) ? $this->createData($data['article'], 'article')  : null;
        $this->container['comment'] = isset($data['comment']) ? $this->createData($data['comment'], 'comment')  : null;
        $this->container['type'] = isset($data['type']) ? $this->createData($data['type'], 'type')  : null;
        $this->container['status'] = isset($data['status']) ? $this->createData($data['status'], 'status')  : null;
        $this->container['confirmed'] = isset($data['confirmed']) ? $this->createData($data['confirmed'], 'confirmed')  : null;
        $this->container['validFrom'] = isset($data['validFrom']) ? $this->createData($data['validFrom'], 'validFrom')  : null;
        $this->container['validUntil'] = isset($data['validUntil']) ? $this->createData($data['validUntil'], 'validUntil')  : null;
        $this->container['messageSend'] = isset($data['messageSend']) ? $this->createData($data['messageSend'], 'messageSend')  : null;
        $this->container['priceTemplates'] = isset($data['priceTemplates']) ? $this->createData($data['priceTemplates'], 'priceTemplates')  : null;
        $this->container['priceClassTemplates'] = isset($data['priceClassTemplates']) ? $this->createData($data['priceClassTemplates'], 'priceClassTemplates')  : null;
        $this->container['priceChangeExcludes'] = isset($data['priceChangeExcludes']) ? $this->createData($data['priceChangeExcludes'], 'priceChangeExcludes')  : null;
        $this->container['priceChangeExcludesAdd'] = isset($data['priceChangeExcludesAdd']) ? $this->createData($data['priceChangeExcludesAdd'], 'priceChangeExcludesAdd')  : null;
        $this->container['priceChangeExcludesRem'] = isset($data['priceChangeExcludesRem']) ? $this->createData($data['priceChangeExcludesRem'], 'priceChangeExcludesRem')  : null;
        $this->container['worker'] = isset($data['worker']) ? $this->createData($data['worker'], 'worker')  : null;
        $this->container['ticketNumber'] = isset($data['ticketNumber']) ? $this->createData($data['ticketNumber'], 'ticketNumber')  : null;
        $this->container['priceClassPrefix'] = isset($data['priceClassPrefix']) ? $this->createData($data['priceClassPrefix'], 'priceClassPrefix')  : null;
        $this->container['priceClassType'] = isset($data['priceClassType']) ? $this->createData($data['priceClassType'], 'priceClassType')  : null;
    }

    /**
     * create data according to types;
     * non object types will just be returend as is:
     * object types will return an instance of themselves or and array of instances
     *
     * @param mixed[] $data
     * @param string $property
     * @return mixed
     */
    public function createData($data = null, $property = '')
    {
        if ($data === null || $property === '') {
            return '';
        }
        $swaggerType = self::$swaggerTypes[$property];

        preg_match("/([\\\\\w\d]+)(\[\])?/", $swaggerType, $matches);

        // handle object types
        if (count($matches) > 0 && count($matches) < 3) {
            try {
                if (!is_array($data)) {
                    return $data;
                }
                
                $reflection = new \ReflectionClass($swaggerType);
                $reflectionInstance = $reflection->newInstance($data);

                return $reflectionInstance;
            } catch (\Exception $ex) {
                return $data;
            }
        } elseif (count($matches) >= 3) {
            // Object[]
            // arrays of objects have to be handled differently
            $reflectionInstances = [];
            foreach($data as $d){
                try {
                    if(!is_array($d)){
                        $reflectionInstances[] = $d;
                        continue;
                    }
                    $reflection = new \ReflectionClass(str_replace("[]", "", $swaggerType) );
                    $reflectionInstances[] = $reflection->newInstance($d);                   
                } catch (\Exception $ex) {
                    return $d;
                }
            }

            return $reflectionInstances;
        }

        return $data;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['type'] === null) {
            $invalidProperties[] = "'type' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the 
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets created
     *
     * @return \DateTime
     */
    public function getCreated()
    {
        return $this->container['created'];
    }

    /**
     * Sets created
     *
     * @param \DateTime $created Date of creation.
     *
     * @return $this
     */
    public function setCreated($created)
    {
        $this->container['created'] = $created;

        return $this;
    }

    /**
     * Gets updated
     *
     * @return \DateTime
     */
    public function getUpdated()
    {
        return $this->container['updated'];
    }

    /**
     * Sets updated
     *
     * @param \DateTime $updated Date of the last update.
     *
     * @return $this
     */
    public function setUpdated($updated)
    {
        $this->container['updated'] = $updated;

        return $this;
    }

    /**
     * Gets owner
     *
     * @return \Domainrobot\Model\BasicUser
     */
    public function getOwner()
    {
        return $this->container['owner'];
    }

    /**
     * Sets owner
     *
     * @param \Domainrobot\Model\BasicUser $owner The object owner.
     *
     * @return $this
     */
    public function setOwner($owner)
    {
        $this->container['owner'] = $owner;

        return $this;
    }

    /**
     * Gets updater
     *
     * @return \Domainrobot\Model\BasicUser
     */
    public function getUpdater()
    {
        return $this->container['updater'];
    }

    /**
     * Sets updater
     *
     * @param \Domainrobot\Model\BasicUser $updater User who performed the last update.
     *
     * @return $this
     */
    public function setUpdater($updater)
    {
        $this->container['updater'] = $updater;

        return $this;
    }

    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id The id.
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets primary
     *
     * @return \Domainrobot\Model\PriceChange
     */
    public function getPrimary()
    {
        return $this->container['primary'];
    }

    /**
     * Sets primary
     *
     * @param \Domainrobot\Model\PriceChange $primary The optional primary price change
     *
     * @return $this
     */
    public function setPrimary($primary)
    {
        $this->container['primary'] = $primary;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name The name of the priceChange.
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets customer
     *
     * @return \Domainrobot\Model\GenericCustomer
     */
    public function getCustomer()
    {
        return $this->container['customer'];
    }

    /**
     * Sets customer
     *
     * @param \Domainrobot\Model\GenericCustomer $customer the customer or customer group used for the price change
     *
     * @return $this
     */
    public function setCustomer($customer)
    {
        $this->container['customer'] = $customer;

        return $this;
    }

    /**
     * Gets customerData
     *
     * @return \Domainrobot\Model\BasicCustomer
     */
    public function getCustomerData()
    {
        return $this->container['customerData'];
    }

    /**
     * Sets customerData
     *
     * @param \Domainrobot\Model\BasicCustomer $customerData The new customer data
     *
     * @return $this
     */
    public function setCustomerData($customerData)
    {
        $this->container['customerData'] = $customerData;

        return $this;
    }

    /**
     * Gets article
     *
     * @return \Domainrobot\Model\Article
     */
    public function getArticle()
    {
        return $this->container['article'];
    }

    /**
     * Sets article
     *
     * @param \Domainrobot\Model\Article $article Article
     *
     * @return $this
     */
    public function setArticle($article)
    {
        $this->container['article'] = $article;

        return $this;
    }

    /**
     * Gets comment
     *
     * @return string
     */
    public function getComment()
    {
        return $this->container['comment'];
    }

    /**
     * Sets comment
     *
     * @param string $comment comment
     *
     * @return $this
     */
    public function setComment($comment)
    {
        $this->container['comment'] = $comment;

        return $this;
    }

    /**
     * Gets type
     *
     * @return \Domainrobot\Model\PriceChangeTypeConstants
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param \Domainrobot\Model\PriceChangeTypeConstants $type type
     *
     * @return $this
     */
    public function setType($type)
    {
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets status
     *
     * @return \Domainrobot\Model\PriceChangeStatusConstants
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param \Domainrobot\Model\PriceChangeStatusConstants $status status
     *
     * @return $this
     */
    public function setStatus($status)
    {
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets confirmed
     *
     * @return \DateTime
     */
    public function getConfirmed()
    {
        return $this->container['confirmed'];
    }

    /**
     * Sets confirmed
     *
     * @param \DateTime $confirmed the confirmed date of the priceChange
     *
     * @return $this
     */
    public function setConfirmed($confirmed)
    {
        $this->container['confirmed'] = $confirmed;

        return $this;
    }

    /**
     * Gets validFrom
     *
     * @return \DateTime
     */
    public function getValidFrom()
    {
        return $this->container['validFrom'];
    }

    /**
     * Sets validFrom
     *
     * @param \DateTime $validFrom the validFrom date of the priceChange
     *
     * @return $this
     */
    public function setValidFrom($validFrom)
    {
        $this->container['validFrom'] = $validFrom;

        return $this;
    }

    /**
     * Gets validUntil
     *
     * @return \DateTime
     */
    public function getValidUntil()
    {
        return $this->container['validUntil'];
    }

    /**
     * Sets validUntil
     *
     * @param \DateTime $validUntil the validUntil date of the priceChange
     *
     * @return $this
     */
    public function setValidUntil($validUntil)
    {
        $this->container['validUntil'] = $validUntil;

        return $this;
    }

    /**
     * Gets messageSend
     *
     * @return \DateTime
     */
    public function getMessageSend()
    {
        return $this->container['messageSend'];
    }

    /**
     * Sets messageSend
     *
     * @param \DateTime $messageSend the messageSend date of the priceChange
     *
     * @return $this
     */
    public function setMessageSend($messageSend)
    {
        $this->container['messageSend'] = $messageSend;

        return $this;
    }

    /**
     * Gets priceTemplates
     *
     * @return \Domainrobot\Model\ProductPriceTemplate[]
     */
    public function getPriceTemplates()
    {
        return $this->container['priceTemplates'];
    }

    /**
     * Sets priceTemplates
     *
     * @param \Domainrobot\Model\ProductPriceTemplate[] $priceTemplates priceTemplates
     *
     * @return $this
     */
    public function setPriceTemplates($priceTemplates)
    {
        $this->container['priceTemplates'] = $priceTemplates;

        return $this;
    }

    /**
     * Gets priceClassTemplates
     *
     * @return \Domainrobot\Model\PriceClassTemplate[]
     */
    public function getPriceClassTemplates()
    {
        return $this->container['priceClassTemplates'];
    }

    /**
     * Sets priceClassTemplates
     *
     * @param \Domainrobot\Model\PriceClassTemplate[] $priceClassTemplates priceClassTemplates
     *
     * @return $this
     */
    public function setPriceClassTemplates($priceClassTemplates)
    {
        $this->container['priceClassTemplates'] = $priceClassTemplates;

        return $this;
    }

    /**
     * Gets priceChangeExcludes
     *
     * @return \Domainrobot\Model\PriceChangeExclude[]
     */
    public function getPriceChangeExcludes()
    {
        return $this->container['priceChangeExcludes'];
    }

    /**
     * Sets priceChangeExcludes
     *
     * @param \Domainrobot\Model\PriceChangeExclude[] $priceChangeExcludes priceChangeExcludes
     *
     * @return $this
     */
    public function setPriceChangeExcludes($priceChangeExcludes)
    {
        $this->container['priceChangeExcludes'] = $priceChangeExcludes;

        return $this;
    }

    /**
     * Gets priceChangeExcludesAdd
     *
     * @return \Domainrobot\Model\PriceChangeExclude[]
     */
    public function getPriceChangeExcludesAdd()
    {
        return $this->container['priceChangeExcludesAdd'];
    }

    /**
     * Sets priceChangeExcludesAdd
     *
     * @param \Domainrobot\Model\PriceChangeExclude[] $priceChangeExcludesAdd Used by the patch route
     *
     * @return $this
     */
    public function setPriceChangeExcludesAdd($priceChangeExcludesAdd)
    {
        $this->container['priceChangeExcludesAdd'] = $priceChangeExcludesAdd;

        return $this;
    }

    /**
     * Gets priceChangeExcludesRem
     *
     * @return \Domainrobot\Model\PriceChangeExclude[]
     */
    public function getPriceChangeExcludesRem()
    {
        return $this->container['priceChangeExcludesRem'];
    }

    /**
     * Sets priceChangeExcludesRem
     *
     * @param \Domainrobot\Model\PriceChangeExclude[] $priceChangeExcludesRem Used by the patch route
     *
     * @return $this
     */
    public function setPriceChangeExcludesRem($priceChangeExcludesRem)
    {
        $this->container['priceChangeExcludesRem'] = $priceChangeExcludesRem;

        return $this;
    }

    /**
     * Gets worker
     *
     * @return string
     */
    public function getWorker()
    {
        return $this->container['worker'];
    }

    /**
     * Sets worker
     *
     * @param string $worker the worker of the priceChange
     *
     * @return $this
     */
    public function setWorker($worker)
    {
        $this->container['worker'] = $worker;

        return $this;
    }

    /**
     * Gets ticketNumber
     *
     * @return string
     */
    public function getTicketNumber()
    {
        return $this->container['ticketNumber'];
    }

    /**
     * Sets ticketNumber
     *
     * @param string $ticketNumber The ticketing number if available.
     *
     * @return $this
     */
    public function setTicketNumber($ticketNumber)
    {
        $this->container['ticketNumber'] = $ticketNumber;

        return $this;
    }

    /**
     * Gets priceClassPrefix
     *
     * @return string
     */
    public function getPriceClassPrefix()
    {
        return $this->container['priceClassPrefix'];
    }

    /**
     * Sets priceClassPrefix
     *
     * @param string $priceClassPrefix prefix of the price class
     *
     * @return $this
     */
    public function setPriceClassPrefix($priceClassPrefix)
    {
        $this->container['priceClassPrefix'] = $priceClassPrefix;

        return $this;
    }

    /**
     * Gets priceClassType
     *
     * @return string
     */
    public function getPriceClassType()
    {
        return $this->container['priceClassType'];
    }

    /**
     * Sets priceClassType
     *
     * @param string $priceClassType type of the priceClass article
     *
     * @return $this
     */
    public function setPriceClassType($priceClassType)
    {
        $this->container['priceClassType'] = $priceClassType;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
    
    /**
     * @param boolean $removeEmptyValues [remove all empty values if true]
     * @param array $retrieveKeys [list of keys to get back in any case]
     * 
     * Examples:
     * toArray() => returns only non empty values
     * toArray(true) => returns all values
     */
    public function toArray($retrieveAllValues = false){
        $container = $this->container;

        $cleanContainer = [];
        foreach ($container as $key => &$value) {
            if (
                $retrieveAllValues === false && 
                empty($value) === true &&
                $value !== false &&
                $value !== '' &&
                $value !== 0 &&
                $value !== '0'
            ) {
                unset($container[$key]);
                continue;
            }
            
            if (gettype($value) === "object") {
                if(method_exists($value, 'toArray')) {
                    $value = $value->toArray($retrieveAllValues);
                }else{
                    if(get_class($value) === "DateTime"){
                        $value = $value->format("Y-m-d\TH:i:s");
                    }else{
                        $value = (array) $value;
                    }
                }
            }
            if (is_array($value)) {
                foreach ($value as &$v) {
                    if (gettype($v) === "object") {
                        $v = $v->toArray($retrieveAllValues);
                    }
                }
            }
            $cleanContainer[self::$attributeMap[$key]] = $value;
        };
        return $cleanContainer;
    }
}


