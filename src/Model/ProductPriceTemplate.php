<?php
/**
 * ProductPriceTemplate
 *
 * PHP version 5
 *
 * @category Class
 * @package  Domainrobot
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Domainrobot JSON API
 *
 * Domainrobot JSON API for managing: Domains, SSL                                             Certificates, DNS and                                             much more.
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.16-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Domainrobot\Model;

use \ArrayAccess;
use \Domainrobot\ObjectSerializer;

/**
 * ProductPriceTemplate Class Doc Comment
 *
 * @category Class
 * @package  Domainrobot
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ProductPriceTemplate implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'ProductPriceTemplate';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'created' => '\DateTime',
        'updated' => '\DateTime',
        'id' => 'int',
        'priceChange' => '\Domainrobot\Model\PriceChange',
        'product' => '\Domainrobot\Model\Product',
        'amount' => 'double',
        'currency' => 'string',
        'customer' => '\Domainrobot\Model\GenericCustomer',
        'priority' => '\Domainrobot\Model\PriorityConstants',
        'discountable' => 'bool',
        'period' => '\Domainrobot\Model\TimePeriod',
        'relative' => '\Domainrobot\Model\RelativeConstants',
        'priceConditions' => '\Domainrobot\Model\PriceServiceEntity[]',
        'actualAmount' => 'double',
        'actualCurrency' => 'string',
        'purchaseAmount' => 'double',
        'margin' => 'float'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'created' => 'date-time',
        'updated' => 'date-time',
        'id' => 'int32',
        'priceChange' => null,
        'product' => null,
        'amount' => 'double',
        'currency' => null,
        'customer' => null,
        'priority' => null,
        'discountable' => null,
        'period' => null,
        'relative' => null,
        'priceConditions' => null,
        'actualAmount' => 'double',
        'actualCurrency' => null,
        'purchaseAmount' => 'double',
        'margin' => 'float'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes(): array
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats(): array
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'created' => 'created',
        'updated' => 'updated',
        'id' => 'id',
        'priceChange' => 'priceChange',
        'product' => 'product',
        'amount' => 'amount',
        'currency' => 'currency',
        'customer' => 'customer',
        'priority' => 'priority',
        'discountable' => 'discountable',
        'period' => 'period',
        'relative' => 'relative',
        'priceConditions' => 'priceConditions',
        'actualAmount' => 'actualAmount',
        'actualCurrency' => 'actualCurrency',
        'purchaseAmount' => 'purchaseAmount',
        'margin' => 'margin'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'created' => 'setCreated',
        'updated' => 'setUpdated',
        'id' => 'setId',
        'priceChange' => 'setPriceChange',
        'product' => 'setProduct',
        'amount' => 'setAmount',
        'currency' => 'setCurrency',
        'customer' => 'setCustomer',
        'priority' => 'setPriority',
        'discountable' => 'setDiscountable',
        'period' => 'setPeriod',
        'relative' => 'setRelative',
        'priceConditions' => 'setPriceConditions',
        'actualAmount' => 'setActualAmount',
        'actualCurrency' => 'setActualCurrency',
        'purchaseAmount' => 'setPurchaseAmount',
        'margin' => 'setMargin'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'created' => 'getCreated',
        'updated' => 'getUpdated',
        'id' => 'getId',
        'priceChange' => 'getPriceChange',
        'product' => 'getProduct',
        'amount' => 'getAmount',
        'currency' => 'getCurrency',
        'customer' => 'getCustomer',
        'priority' => 'getPriority',
        'discountable' => 'getDiscountable',
        'period' => 'getPeriod',
        'relative' => 'getRelative',
        'priceConditions' => 'getPriceConditions',
        'actualAmount' => 'getActualAmount',
        'actualCurrency' => 'getActualCurrency',
        'purchaseAmount' => 'getPurchaseAmount',
        'margin' => 'getMargin'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap(): array
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters(): array
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters(): array
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName(): string
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->container['created'] = isset($data['created']) ? $this->createData($data['created'], 'created')  : null;
        $this->container['updated'] = isset($data['updated']) ? $this->createData($data['updated'], 'updated')  : null;
        $this->container['id'] = isset($data['id']) ? $this->createData($data['id'], 'id')  : null;
        $this->container['priceChange'] = isset($data['priceChange']) ? $this->createData($data['priceChange'], 'priceChange')  : null;
        $this->container['product'] = isset($data['product']) ? $this->createData($data['product'], 'product')  : null;
        $this->container['amount'] = isset($data['amount']) ? $this->createData($data['amount'], 'amount')  : null;
        $this->container['currency'] = isset($data['currency']) ? $this->createData($data['currency'], 'currency')  : null;
        $this->container['customer'] = isset($data['customer']) ? $this->createData($data['customer'], 'customer')  : null;
        $this->container['priority'] = isset($data['priority']) ? $this->createData($data['priority'], 'priority')  : null;
        $this->container['discountable'] = isset($data['discountable']) ? $this->createData($data['discountable'], 'discountable')  : null;
        $this->container['period'] = isset($data['period']) ? $this->createData($data['period'], 'period')  : null;
        $this->container['relative'] = isset($data['relative']) ? $this->createData($data['relative'], 'relative')  : null;
        $this->container['priceConditions'] = isset($data['priceConditions']) ? $this->createData($data['priceConditions'], 'priceConditions')  : null;
        $this->container['actualAmount'] = isset($data['actualAmount']) ? $this->createData($data['actualAmount'], 'actualAmount')  : null;
        $this->container['actualCurrency'] = isset($data['actualCurrency']) ? $this->createData($data['actualCurrency'], 'actualCurrency')  : null;
        $this->container['purchaseAmount'] = isset($data['purchaseAmount']) ? $this->createData($data['purchaseAmount'], 'purchaseAmount')  : null;
        $this->container['margin'] = isset($data['margin']) ? $this->createData($data['margin'], 'margin')  : null;
    }

    /**
     * create data according to types;
     * non object types will just be returend as is:
     * object types will return an instance of themselves or and array of instances
     *
     * @param mixed[] $data
     * @param string $property
     * @return mixed
     */
    public function createData($data = null, $property = null): mixed
    {
        if ($data === null || $property === null) {
            return '';
        }
        
        $swaggerType = self::$swaggerTypes[$property];

        preg_match("/([\\\\\w\d]+)(\[\])?/", $swaggerType, $matches);

        // handle object types
        if (count($matches) > 0 && count($matches) < 3) {
            try {
                if (!is_array($data)) {
                    return $data;
                }
                
                $reflection = new \ReflectionClass($swaggerType);
                $reflectionInstance = $reflection->newInstance($data);

                return $reflectionInstance;
            } catch (\Exception $ex) {
                return $data;
            }
        } elseif (count($matches) >= 3) {
            // Object[]
            // arrays of objects have to be handled differently
            $reflectionInstances = [];
            foreach($data as $d){
                try {
                    if(!is_array($d)){
                        $reflectionInstances[] = $d;
                        continue;
                    }
                    $reflection = new \ReflectionClass(str_replace("[]", "", $swaggerType) );
                    $reflectionInstances[] = $reflection->newInstance($d);                   
                } catch (\Exception $ex) {
                    return $d;
                }
            }

            return $reflectionInstances;
        }

        return $data;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties(): array
    {
        $invalidProperties = [];

        if ($this->container['priceChange'] === null) {
            $invalidProperties[] = "'priceChange' can't be null";
        }
        if ($this->container['product'] === null) {
            $invalidProperties[] = "'product' can't be null";
        }
        if ($this->container['amount'] === null) {
            $invalidProperties[] = "'amount' can't be null";
        }
        if ($this->container['currency'] === null) {
            $invalidProperties[] = "'currency' can't be null";
        }
        if ($this->container['relative'] === null) {
            $invalidProperties[] = "'relative' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the 
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid(): bool
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets created
     *
     * @return \DateTime
     */
    public function getCreated()
    {
        return $this->container['created'];
    }

    /**
     * Sets created
     *
     * @param \DateTime $created Date of creation.
     *
     * @return $this
     */
    public function setCreated($created)
    {
        $this->container['created'] = $created;

        return $this;
    }

    /**
     * Gets updated
     *
     * @return \DateTime
     */
    public function getUpdated()
    {
        return $this->container['updated'];
    }

    /**
     * Sets updated
     *
     * @param \DateTime $updated Date of the last update.
     *
     * @return $this
     */
    public function setUpdated($updated)
    {
        $this->container['updated'] = $updated;

        return $this;
    }

    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id The unique identifier of the price
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets priceChange
     *
     * @return \Domainrobot\Model\PriceChange
     */
    public function getPriceChange()
    {
        return $this->container['priceChange'];
    }

    /**
     * Sets priceChange
     *
     * @param \Domainrobot\Model\PriceChange $priceChange The priceChange
     *
     * @return $this
     */
    public function setPriceChange($priceChange)
    {
        $this->container['priceChange'] = $priceChange;

        return $this;
    }

    /**
     * Gets product
     *
     * @return \Domainrobot\Model\Product
     */
    public function getProduct()
    {
        return $this->container['product'];
    }

    /**
     * Sets product
     *
     * @param \Domainrobot\Model\Product $product The product
     *
     * @return $this
     */
    public function setProduct($product)
    {
        $this->container['product'] = $product;

        return $this;
    }

    /**
     * Gets amount
     *
     * @return double
     */
    public function getAmount()
    {
        return $this->container['amount'];
    }

    /**
     * Sets amount
     *
     * @param double $amount Amount
     *
     * @return $this
     */
    public function setAmount($amount)
    {
        $this->container['amount'] = $amount;

        return $this;
    }

    /**
     * Gets currency
     *
     * @return string
     */
    public function getCurrency()
    {
        return $this->container['currency'];
    }

    /**
     * Sets currency
     *
     * @param string $currency Used currency
     *
     * @return $this
     */
    public function setCurrency($currency)
    {
        $this->container['currency'] = $currency;

        return $this;
    }

    /**
     * Gets customer
     *
     * @return \Domainrobot\Model\GenericCustomer
     */
    public function getCustomer()
    {
        return $this->container['customer'];
    }

    /**
     * Sets customer
     *
     * @param \Domainrobot\Model\GenericCustomer $customer Customer
     *
     * @return $this
     */
    public function setCustomer($customer)
    {
        $this->container['customer'] = $customer;

        return $this;
    }

    /**
     * Gets priority
     *
     * @return \Domainrobot\Model\PriorityConstants
     */
    public function getPriority()
    {
        return $this->container['priority'];
    }

    /**
     * Sets priority
     *
     * @param \Domainrobot\Model\PriorityConstants $priority Priority
     *
     * @return $this
     */
    public function setPriority($priority)
    {
        $this->container['priority'] = $priority;

        return $this;
    }

    /**
     * Gets discountable
     *
     * @return bool
     */
    public function getDiscountable()
    {
        return $this->container['discountable'];
    }

    /**
     * Sets discountable
     *
     * @param bool $discountable Indicates if price discountable is possible
     *
     * @return $this
     */
    public function setDiscountable($discountable)
    {
        $this->container['discountable'] = $discountable;

        return $this;
    }

    /**
     * Gets period
     *
     * @return \Domainrobot\Model\TimePeriod
     */
    public function getPeriod()
    {
        return $this->container['period'];
    }

    /**
     * Sets period
     *
     * @param \Domainrobot\Model\TimePeriod $period The activity period of a product
     *
     * @return $this
     */
    public function setPeriod($period)
    {
        $this->container['period'] = $period;

        return $this;
    }

    /**
     * Gets relative
     *
     * @return \Domainrobot\Model\RelativeConstants
     */
    public function getRelative()
    {
        return $this->container['relative'];
    }

    /**
     * Sets relative
     *
     * @param \Domainrobot\Model\RelativeConstants $relative The rounding strategy
     *
     * @return $this
     */
    public function setRelative($relative)
    {
        $this->container['relative'] = $relative;

        return $this;
    }

    /**
     * Gets priceConditions
     *
     * @return \Domainrobot\Model\PriceServiceEntity[]
     */
    public function getPriceConditions()
    {
        return $this->container['priceConditions'];
    }

    /**
     * Sets priceConditions
     *
     * @param \Domainrobot\Model\PriceServiceEntity[] $priceConditions ProductPriceTemplate Price condition
     *
     * @return $this
     */
    public function setPriceConditions($priceConditions)
    {
        $this->container['priceConditions'] = $priceConditions;

        return $this;
    }

    /**
     * Gets actualAmount
     *
     * @return double
     */
    public function getActualAmount()
    {
        return $this->container['actualAmount'];
    }

    /**
     * Sets actualAmount
     *
     * @param double $actualAmount The actual amount, before the price change processing
     *
     * @return $this
     */
    public function setActualAmount($actualAmount)
    {
        $this->container['actualAmount'] = $actualAmount;

        return $this;
    }

    /**
     * Gets actualCurrency
     *
     * @return string
     */
    public function getActualCurrency()
    {
        return $this->container['actualCurrency'];
    }

    /**
     * Sets actualCurrency
     *
     * @param string $actualCurrency Actual currency
     *
     * @return $this
     */
    public function setActualCurrency($actualCurrency)
    {
        $this->container['actualCurrency'] = $actualCurrency;

        return $this;
    }

    /**
     * Gets purchaseAmount
     *
     * @return double
     */
    public function getPurchaseAmount()
    {
        return $this->container['purchaseAmount'];
    }

    /**
     * Sets purchaseAmount
     *
     * @param double $purchaseAmount The actual purchase amount
     *
     * @return $this
     */
    public function setPurchaseAmount($purchaseAmount)
    {
        $this->container['purchaseAmount'] = $purchaseAmount;

        return $this;
    }

    /**
     * Gets margin
     *
     * @return float
     */
    public function getMargin()
    {
        return $this->container['margin'];
    }

    /**
     * Sets margin
     *
     * @param float $margin The margin between amount and purchase amount
     *
     * @return $this
     */
    public function setMargin($margin)
    {
        $this->container['margin'] = $margin;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset): mixed
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString(): string
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
    
    /**
     * @param boolean $removeEmptyValues [remove all empty values if true]
     * @param array $retrieveKeys [list of keys to get back in any case]
     * 
     * Examples:
     * toArray() => returns only non empty values
     * toArray(true) => returns all values
     */
    public function toArray($retrieveAllValues = false): array
    {
        $container = $this->container;

        $cleanContainer = [];
        foreach ($container as $key => &$value) {
            if (
                $retrieveAllValues === false && 
                empty($value) === true &&
                $value !== false &&
                $value !== '' &&
                $value !== 0 &&
                $value !== '0'
            ) {
                unset($container[$key]);
                continue;
            }
            
            if (gettype($value) === "object") {
                if(method_exists($value, 'toArray')) {
                    $value = $value->toArray($retrieveAllValues);
                }else{
                    if(get_class($value) === "DateTime"){
                        $value = $value->format("Y-m-d\TH:i:s");
                    }else{
                        $value = (array) $value;
                    }
                }
            }

            if (is_array($value)) {
                foreach ($value as &$v) {
                    if (gettype($v) === "object") {
                        $v = $v->toArray($retrieveAllValues);
                    }
                }
            }

            $cleanContainer[self::$attributeMap[$key]] = $value;
        };

        return $cleanContainer;
    }
}


