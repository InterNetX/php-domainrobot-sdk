<?php
/**
 * SEPAMandate
 *
 * PHP version 5
 *
 * @category Class
 * @package  Domainrobot
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Domainrobot JSON API
 *
 * Domainrobot JSON API for managing: Domains, SSL            Certificates, DNS and            much more.
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.16-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Domainrobot\Model;

use \ArrayAccess;
use \Domainrobot\ObjectSerializer;

/**
 * SEPAMandate Class Doc Comment
 *
 * @category Class
 * @package  Domainrobot
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class SEPAMandate implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'SEPAMandate';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'created' => '\DateTime',
        'updated' => '\DateTime',
        'reference' => 'string',
        'confirm_signature' => '\DateTime',
        'confirm_ip' => '\Domainrobot\Model\InetAddress',
        'confirm_useragent' => 'string',
        'confirm_checked' => 'bool',
        'expire' => '\DateTime',
        'histories' => '\Domainrobot\Model\SEPAMandate[]',
        'account_holder' => 'string',
        'iban' => 'string',
        'bic' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'created' => 'date-time',
        'updated' => 'date-time',
        'reference' => null,
        'confirm_signature' => 'date-time',
        'confirm_ip' => null,
        'confirm_useragent' => null,
        'confirm_checked' => null,
        'expire' => 'date-time',
        'histories' => null,
        'account_holder' => null,
        'iban' => null,
        'bic' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'created' => 'created',
        'updated' => 'updated',
        'reference' => 'reference',
        'confirm_signature' => 'confirmSignature',
        'confirm_ip' => 'confirmIp',
        'confirm_useragent' => 'confirmUseragent',
        'confirm_checked' => 'confirmChecked',
        'expire' => 'expire',
        'histories' => 'histories',
        'account_holder' => 'accountHolder',
        'iban' => 'iban',
        'bic' => 'bic'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'created' => 'setCreated',
        'updated' => 'setUpdated',
        'reference' => 'setReference',
        'confirm_signature' => 'setConfirmSignature',
        'confirm_ip' => 'setConfirmIp',
        'confirm_useragent' => 'setConfirmUseragent',
        'confirm_checked' => 'setConfirmChecked',
        'expire' => 'setExpire',
        'histories' => 'setHistories',
        'account_holder' => 'setAccountHolder',
        'iban' => 'setIban',
        'bic' => 'setBic'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'created' => 'getCreated',
        'updated' => 'getUpdated',
        'reference' => 'getReference',
        'confirm_signature' => 'getConfirmSignature',
        'confirm_ip' => 'getConfirmIp',
        'confirm_useragent' => 'getConfirmUseragent',
        'confirm_checked' => 'getConfirmChecked',
        'expire' => 'getExpire',
        'histories' => 'getHistories',
        'account_holder' => 'getAccountHolder',
        'iban' => 'getIban',
        'bic' => 'getBic'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['created'] = isset($data['created']) ? $this->createData($data['created'], 'created')  : null;
        $this->container['updated'] = isset($data['updated']) ? $this->createData($data['updated'], 'updated')  : null;
        $this->container['reference'] = isset($data['reference']) ? $this->createData($data['reference'], 'reference')  : null;
        $this->container['confirm_signature'] = isset($data['confirm_signature']) ? $this->createData($data['confirm_signature'], 'confirm_signature')  : null;
        $this->container['confirm_ip'] = isset($data['confirm_ip']) ? $this->createData($data['confirm_ip'], 'confirm_ip')  : null;
        $this->container['confirm_useragent'] = isset($data['confirm_useragent']) ? $this->createData($data['confirm_useragent'], 'confirm_useragent')  : null;
        $this->container['confirm_checked'] = isset($data['confirm_checked']) ? $this->createData($data['confirm_checked'], 'confirm_checked')  : null;
        $this->container['expire'] = isset($data['expire']) ? $this->createData($data['expire'], 'expire')  : null;
        $this->container['histories'] = isset($data['histories']) ? $this->createData($data['histories'], 'histories')  : null;
        $this->container['account_holder'] = isset($data['account_holder']) ? $this->createData($data['account_holder'], 'account_holder')  : null;
        $this->container['iban'] = isset($data['iban']) ? $this->createData($data['iban'], 'iban')  : null;
        $this->container['bic'] = isset($data['bic']) ? $this->createData($data['bic'], 'bic')  : null;
    }

    /**
    *
    * @param mixed[] $data
    * @param string $property
    * @return mixed
    */
    public function createData($data = null, $property){
        if($data === null){
            return '';
        }
        $swaggerType = self::$swaggerTypes[$property];

        preg_match("/([\\\\\w\d]+)(\[\])?/", $swaggerType, $matches);

        if(count($matches) > 0 && count($matches) < 3){
            try {
                $reflection = new \ReflectionClass($swaggerType);
                $reflectionInstance = $reflection->newInstance($data);

                return $reflectionInstance;
            }catch(\Exception $ex){
                return $data;
            }
        }else if(count($matches) >= 3){
            $reflectionInstances = [];
            foreach($data as $d){
                try {
                    $reflection = new \ReflectionClass(str_replace("[]", "", $swaggerType) );
                    $reflectionInstances[] = $reflection->newInstance($d);

                    return $reflectionInstances;
                } catch (\Exception $ex) {
                    return $data;
                }
            }
        }

        return $data;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['confirm_signature'] === null) {
            $invalidProperties[] = "'confirm_signature' can't be null";
        }
        if ($this->container['confirm_ip'] === null) {
            $invalidProperties[] = "'confirm_ip' can't be null";
        }
        if ($this->container['confirm_checked'] === null) {
            $invalidProperties[] = "'confirm_checked' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the 
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets created
     *
     * @return \DateTime
     */
    public function getCreated()
    {
        return $this->container['created'];
    }

    /**
     * Sets created
     *
     * @param \DateTime $created The created date.
     *
     * @return $this
     */
    public function setCreated($created)
    {
        $this->container['created'] = $created;

        return $this;
    }

    /**
     * Gets updated
     *
     * @return \DateTime
     */
    public function getUpdated()
    {
        return $this->container['updated'];
    }

    /**
     * Sets updated
     *
     * @param \DateTime $updated The updated date.
     *
     * @return $this
     */
    public function setUpdated($updated)
    {
        $this->container['updated'] = $updated;

        return $this;
    }

    /**
     * Gets reference
     *
     * @return string
     */
    public function getReference()
    {
        return $this->container['reference'];
    }

    /**
     * Sets reference
     *
     * @param string $reference The sepa mandate reference
     *
     * @return $this
     */
    public function setReference($reference)
    {
        $this->container['reference'] = $reference;

        return $this;
    }

    /**
     * Gets confirm_signature
     *
     * @return \DateTime
     */
    public function getConfirmSignature()
    {
        return $this->container['confirm_signature'];
    }

    /**
     * Sets confirm_signature
     *
     * @param \DateTime $confirm_signature The date of the confirm signature
     *
     * @return $this
     */
    public function setConfirmSignature($confirm_signature)
    {
        $this->container['confirm_signature'] = $confirm_signature;

        return $this;
    }

    /**
     * Gets confirm_ip
     *
     * @return \Domainrobot\Model\InetAddress
     */
    public function getConfirmIp()
    {
        return $this->container['confirm_ip'];
    }

    /**
     * Sets confirm_ip
     *
     * @param \Domainrobot\Model\InetAddress $confirm_ip The address of the confirm signature
     *
     * @return $this
     */
    public function setConfirmIp($confirm_ip)
    {
        $this->container['confirm_ip'] = $confirm_ip;

        return $this;
    }

    /**
     * Gets confirm_useragent
     *
     * @return string
     */
    public function getConfirmUseragent()
    {
        return $this->container['confirm_useragent'];
    }

    /**
     * Sets confirm_useragent
     *
     * @param string $confirm_useragent The user agent of the confirm signature
     *
     * @return $this
     */
    public function setConfirmUseragent($confirm_useragent)
    {
        $this->container['confirm_useragent'] = $confirm_useragent;

        return $this;
    }

    /**
     * Gets confirm_checked
     *
     * @return bool
     */
    public function getConfirmChecked()
    {
        return $this->container['confirm_checked'];
    }

    /**
     * Sets confirm_checked
     *
     * @param bool $confirm_checked Flag for indicating if the confirm data has been checked
     *
     * @return $this
     */
    public function setConfirmChecked($confirm_checked)
    {
        $this->container['confirm_checked'] = $confirm_checked;

        return $this;
    }

    /**
     * Gets expire
     *
     * @return \DateTime
     */
    public function getExpire()
    {
        return $this->container['expire'];
    }

    /**
     * Sets expire
     *
     * @param \DateTime $expire Date after the mandate will be expired
     *
     * @return $this
     */
    public function setExpire($expire)
    {
        $this->container['expire'] = $expire;

        return $this;
    }

    /**
     * Gets histories
     *
     * @return \Domainrobot\Model\SEPAMandate[]
     */
    public function getHistories()
    {
        return $this->container['histories'];
    }

    /**
     * Sets histories
     *
     * @param \Domainrobot\Model\SEPAMandate[] $histories A list of historized sepa mandates
     *
     * @return $this
     */
    public function setHistories($histories)
    {
        $this->container['histories'] = $histories;

        return $this;
    }

    /**
     * Gets account_holder
     *
     * @return string
     */
    public function getAccountHolder()
    {
        return $this->container['account_holder'];
    }

    /**
     * Sets account_holder
     *
     * @param string $account_holder The holder of the bank account
     *
     * @return $this
     */
    public function setAccountHolder($account_holder)
    {
        $this->container['account_holder'] = $account_holder;

        return $this;
    }

    /**
     * Gets iban
     *
     * @return string
     */
    public function getIban()
    {
        return $this->container['iban'];
    }

    /**
     * Sets iban
     *
     * @param string $iban The bank iban
     *
     * @return $this
     */
    public function setIban($iban)
    {
        $this->container['iban'] = $iban;

        return $this;
    }

    /**
     * Gets bic
     *
     * @return string
     */
    public function getBic()
    {
        return $this->container['bic'];
    }

    /**
     * Sets bic
     *
     * @param string $bic The bank bic
     *
     * @return $this
     */
    public function setBic($bic)
    {
        $this->container['bic'] = $bic;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
    
    /**
     * @param boolean $removeEmptyValues [remove all empty values if true]
     * @param array $retrieveKeys [list of keys to get back in any case]
     * 
     * Examples:
     * toArray() => returns only non empty values
     * toArray(true) => returns all values
     */
    public function toArray($retrieveAllValues = false){
        $container = $this->container;
        foreach ($container as $key => &$value) {
            if (!$retrieveAllValues && empty($value)) {
                unset($container[$key]);
                continue;
            }
            
            if (gettype($value) === "object") {
                if(method_exists($value, 'toArray')) {
                    $value = $value->toArray();
                }else{
                    if(get_class($value) === "DateTime"){
                        $value = $value->format("Y-m-d\TH:i:s");
                    }else{
                        $value = (array) $value;
                    }
                }
            }
            if (is_array($value)) {
                foreach ($value as &$v) {
                    if (gettype($v) === "object") {
                        $v = $v->toArray();
                    }
                }
            }
        };
        return $container;
    }
}


