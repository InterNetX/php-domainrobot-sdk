<?php
/**
 * TldProduct
 *
 * PHP version 5
 *
 * @category Class
 * @package  Domainrobot
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Domainrobot JSON API
 *
 * Domainrobot JSON API for managing: Domains, SSL            Certificates, DNS and            much more.
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.16-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Domainrobot\Model;

use \ArrayAccess;
use \Domainrobot\ObjectSerializer;

/**
 * TldProduct Class Doc Comment
 *
 * @category Class
 * @package  Domainrobot
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class TldProduct implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'TldProduct';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'int',
        'label' => 'string',
        'charMin' => 'int',
        'charMax' => 'int',
        'dnssecMin' => 'int',
        'dnssecMax' => 'int',
        'dnssecAlgorithms' => 'int[]',
        'nserverMin' => 'int',
        'nserverMax' => 'int',
        'ipv4Min' => 'int',
        'ipv4Max' => 'int',
        'ipv6Min' => 'int',
        'ipv6Max' => 'int',
        'nsentryMin' => 'int',
        'nsentryMax' => 'int',
        'rootNserver' => 'string[]',
        'dnssecRecord' => 'int',
        'restoreArgpPeriod' => '\Domainrobot\Model\TimePeriod',
        'restoreRgpPeriod' => '\Domainrobot\Model\TimePeriod',
        'cancelationPeriod' => '\Domainrobot\Model\TimePeriod',
        'taskCreate' => 'bool',
        'taskUpdate' => 'bool',
        'taskDelete' => 'bool',
        'taskRenew' => 'bool',
        'taskTransfer' => 'bool',
        'taskTransit' => 'bool',
        'taskPreack' => 'bool',
        'taskRestore' => 'bool',
        'taskAuthinfoCreate' => 'bool',
        'taskAuthinfoDelete' => 'bool',
        'taskAuthinfo2' => 'bool',
        'taskStatusUpdate' => 'bool',
        'taskOwnerChange' => 'bool',
        'cancelationExpireOnly' => 'bool',
        'registrarStatus' => 'string[]',
        'authinfo1Location' => '\Domainrobot\Model\AuthInfo1Location[]',
        'numeralDomains' => 'bool',
        'realtime' => 'bool',
        'idn' => '\Domainrobot\Model\Charset[]',
        'transferComfirmation' => 'bool',
        'dnsCheck' => 'bool',
        'premiumDomains' => 'bool',
        'contactExtensions' => 'string[]',
        'privacy' => 'bool',
        'trustee' => 'bool',
        'forcedTrustee' => 'bool',
        'thirdLevel' => 'bool',
        'transferAuthinfo' => 'bool',
        'ownerchangeAuthinfo' => 'bool',
        'errorCodes' => 'string[]',
        'tldType' => '\Domainrobot\Model\TldType',
        'tldContinent' => '\Domainrobot\Model\TldContinent',
        'categories' => 'string[]',
        'confluencePageDe' => 'string',
        'confluencePageEn' => 'string',
        'commentDe' => 'string',
        'commentEn' => 'string',
        'whois' => 'string',
        'countryIso' => 'string',
        'geoPol' => 'string',
        'officialLanguage' => 'string',
        'blockingService' => 'bool',
        'restrictions' => '\Domainrobot\Model\Condition[]',
        'country' => '\Domainrobot\Model\Country',
        'dataControllers' => '\Domainrobot\Model\TldDataController[]',
        'preregInformation' => '\Domainrobot\Model\PreregInformation[]',
        'rankingLevel' => 'int',
        'tldTasks' => '\Domainrobot\Model\TldTask[]',
        'tldDns' => '\Domainrobot\Model\TldDns',
        'tldPeriod' => '\Domainrobot\Model\TldPeriod',
        'isManual' => 'bool',
        'requiredFields' => 'string[]',
        'transferImportedContacts' => '\Domainrobot\Model\ContactReferenceType[]',
        'registrars' => '\Domainrobot\Model\Registrar[]',
        'autoDelete' => 'bool',
        'documents' => '\Domainrobot\Model\Document[]',
        'registryLock' => 'bool',
        'trusteeTypes' => '\Domainrobot\Model\ContactReferenceType[]',
        'sldMin' => 'int',
        'sldMax' => 'int',
        'numeric' => 'bool'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => 'int32',
        'label' => null,
        'charMin' => 'int32',
        'charMax' => 'int32',
        'dnssecMin' => 'int32',
        'dnssecMax' => 'int32',
        'dnssecAlgorithms' => 'int32',
        'nserverMin' => 'int32',
        'nserverMax' => 'int32',
        'ipv4Min' => 'int32',
        'ipv4Max' => 'int32',
        'ipv6Min' => 'int32',
        'ipv6Max' => 'int32',
        'nsentryMin' => 'int32',
        'nsentryMax' => 'int32',
        'rootNserver' => null,
        'dnssecRecord' => 'int32',
        'restoreArgpPeriod' => null,
        'restoreRgpPeriod' => null,
        'cancelationPeriod' => null,
        'taskCreate' => null,
        'taskUpdate' => null,
        'taskDelete' => null,
        'taskRenew' => null,
        'taskTransfer' => null,
        'taskTransit' => null,
        'taskPreack' => null,
        'taskRestore' => null,
        'taskAuthinfoCreate' => null,
        'taskAuthinfoDelete' => null,
        'taskAuthinfo2' => null,
        'taskStatusUpdate' => null,
        'taskOwnerChange' => null,
        'cancelationExpireOnly' => null,
        'registrarStatus' => null,
        'authinfo1Location' => null,
        'numeralDomains' => null,
        'realtime' => null,
        'idn' => null,
        'transferComfirmation' => null,
        'dnsCheck' => null,
        'premiumDomains' => null,
        'contactExtensions' => null,
        'privacy' => null,
        'trustee' => null,
        'forcedTrustee' => null,
        'thirdLevel' => null,
        'transferAuthinfo' => null,
        'ownerchangeAuthinfo' => null,
        'errorCodes' => null,
        'tldType' => null,
        'tldContinent' => null,
        'categories' => null,
        'confluencePageDe' => null,
        'confluencePageEn' => null,
        'commentDe' => null,
        'commentEn' => null,
        'whois' => null,
        'countryIso' => null,
        'geoPol' => null,
        'officialLanguage' => null,
        'blockingService' => null,
        'restrictions' => null,
        'country' => null,
        'dataControllers' => null,
        'preregInformation' => null,
        'rankingLevel' => 'int32',
        'tldTasks' => null,
        'tldDns' => null,
        'tldPeriod' => null,
        'isManual' => null,
        'requiredFields' => null,
        'transferImportedContacts' => null,
        'registrars' => null,
        'autoDelete' => null,
        'documents' => null,
        'registryLock' => null,
        'trusteeTypes' => null,
        'sldMin' => 'int32',
        'sldMax' => 'int32',
        'numeric' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'label' => 'label',
        'charMin' => 'charMin',
        'charMax' => 'charMax',
        'dnssecMin' => 'dnssecMin',
        'dnssecMax' => 'dnssecMax',
        'dnssecAlgorithms' => 'dnssecAlgorithms',
        'nserverMin' => 'nserverMin',
        'nserverMax' => 'nserverMax',
        'ipv4Min' => 'ipv4Min',
        'ipv4Max' => 'ipv4Max',
        'ipv6Min' => 'ipv6Min',
        'ipv6Max' => 'ipv6Max',
        'nsentryMin' => 'nsentryMin',
        'nsentryMax' => 'nsentryMax',
        'rootNserver' => 'rootNserver',
        'dnssecRecord' => 'dnssecRecord',
        'restoreArgpPeriod' => 'restoreArgpPeriod',
        'restoreRgpPeriod' => 'restoreRgpPeriod',
        'cancelationPeriod' => 'cancelationPeriod',
        'taskCreate' => 'taskCreate',
        'taskUpdate' => 'taskUpdate',
        'taskDelete' => 'taskDelete',
        'taskRenew' => 'taskRenew',
        'taskTransfer' => 'taskTransfer',
        'taskTransit' => 'taskTransit',
        'taskPreack' => 'taskPreack',
        'taskRestore' => 'taskRestore',
        'taskAuthinfoCreate' => 'taskAuthinfoCreate',
        'taskAuthinfoDelete' => 'taskAuthinfoDelete',
        'taskAuthinfo2' => 'taskAuthinfo2',
        'taskStatusUpdate' => 'taskStatusUpdate',
        'taskOwnerChange' => 'taskOwnerChange',
        'cancelationExpireOnly' => 'cancelationExpireOnly',
        'registrarStatus' => 'registrarStatus',
        'authinfo1Location' => 'authinfo1Location',
        'numeralDomains' => 'numeralDomains',
        'realtime' => 'realtime',
        'idn' => 'idn',
        'transferComfirmation' => 'transferComfirmation',
        'dnsCheck' => 'dnsCheck',
        'premiumDomains' => 'premiumDomains',
        'contactExtensions' => 'contactExtensions',
        'privacy' => 'privacy',
        'trustee' => 'trustee',
        'forcedTrustee' => 'forcedTrustee',
        'thirdLevel' => 'thirdLevel',
        'transferAuthinfo' => 'transferAuthinfo',
        'ownerchangeAuthinfo' => 'ownerchangeAuthinfo',
        'errorCodes' => 'errorCodes',
        'tldType' => 'tldType',
        'tldContinent' => 'tldContinent',
        'categories' => 'categories',
        'confluencePageDe' => 'confluencePageDe',
        'confluencePageEn' => 'confluencePageEn',
        'commentDe' => 'commentDe',
        'commentEn' => 'commentEn',
        'whois' => 'whois',
        'countryIso' => 'countryIso',
        'geoPol' => 'geoPol',
        'officialLanguage' => 'officialLanguage',
        'blockingService' => 'blockingService',
        'restrictions' => 'restrictions',
        'country' => 'country',
        'dataControllers' => 'dataControllers',
        'preregInformation' => 'preregInformation',
        'rankingLevel' => 'rankingLevel',
        'tldTasks' => 'tldTasks',
        'tldDns' => 'tldDns',
        'tldPeriod' => 'tldPeriod',
        'isManual' => 'isManual',
        'requiredFields' => 'requiredFields',
        'transferImportedContacts' => 'transferImportedContacts',
        'registrars' => 'registrars',
        'autoDelete' => 'autoDelete',
        'documents' => 'documents',
        'registryLock' => 'registryLock',
        'trusteeTypes' => 'trusteeTypes',
        'sldMin' => 'sldMin',
        'sldMax' => 'sldMax',
        'numeric' => 'numeric'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'label' => 'setLabel',
        'charMin' => 'setCharMin',
        'charMax' => 'setCharMax',
        'dnssecMin' => 'setDnssecMin',
        'dnssecMax' => 'setDnssecMax',
        'dnssecAlgorithms' => 'setDnssecAlgorithms',
        'nserverMin' => 'setNserverMin',
        'nserverMax' => 'setNserverMax',
        'ipv4Min' => 'setIpv4Min',
        'ipv4Max' => 'setIpv4Max',
        'ipv6Min' => 'setIpv6Min',
        'ipv6Max' => 'setIpv6Max',
        'nsentryMin' => 'setNsentryMin',
        'nsentryMax' => 'setNsentryMax',
        'rootNserver' => 'setRootNserver',
        'dnssecRecord' => 'setDnssecRecord',
        'restoreArgpPeriod' => 'setRestoreArgpPeriod',
        'restoreRgpPeriod' => 'setRestoreRgpPeriod',
        'cancelationPeriod' => 'setCancelationPeriod',
        'taskCreate' => 'setTaskCreate',
        'taskUpdate' => 'setTaskUpdate',
        'taskDelete' => 'setTaskDelete',
        'taskRenew' => 'setTaskRenew',
        'taskTransfer' => 'setTaskTransfer',
        'taskTransit' => 'setTaskTransit',
        'taskPreack' => 'setTaskPreack',
        'taskRestore' => 'setTaskRestore',
        'taskAuthinfoCreate' => 'setTaskAuthinfoCreate',
        'taskAuthinfoDelete' => 'setTaskAuthinfoDelete',
        'taskAuthinfo2' => 'setTaskAuthinfo2',
        'taskStatusUpdate' => 'setTaskStatusUpdate',
        'taskOwnerChange' => 'setTaskOwnerChange',
        'cancelationExpireOnly' => 'setCancelationExpireOnly',
        'registrarStatus' => 'setRegistrarStatus',
        'authinfo1Location' => 'setAuthinfo1Location',
        'numeralDomains' => 'setNumeralDomains',
        'realtime' => 'setRealtime',
        'idn' => 'setIdn',
        'transferComfirmation' => 'setTransferComfirmation',
        'dnsCheck' => 'setDnsCheck',
        'premiumDomains' => 'setPremiumDomains',
        'contactExtensions' => 'setContactExtensions',
        'privacy' => 'setPrivacy',
        'trustee' => 'setTrustee',
        'forcedTrustee' => 'setForcedTrustee',
        'thirdLevel' => 'setThirdLevel',
        'transferAuthinfo' => 'setTransferAuthinfo',
        'ownerchangeAuthinfo' => 'setOwnerchangeAuthinfo',
        'errorCodes' => 'setErrorCodes',
        'tldType' => 'setTldType',
        'tldContinent' => 'setTldContinent',
        'categories' => 'setCategories',
        'confluencePageDe' => 'setConfluencePageDe',
        'confluencePageEn' => 'setConfluencePageEn',
        'commentDe' => 'setCommentDe',
        'commentEn' => 'setCommentEn',
        'whois' => 'setWhois',
        'countryIso' => 'setCountryIso',
        'geoPol' => 'setGeoPol',
        'officialLanguage' => 'setOfficialLanguage',
        'blockingService' => 'setBlockingService',
        'restrictions' => 'setRestrictions',
        'country' => 'setCountry',
        'dataControllers' => 'setDataControllers',
        'preregInformation' => 'setPreregInformation',
        'rankingLevel' => 'setRankingLevel',
        'tldTasks' => 'setTldTasks',
        'tldDns' => 'setTldDns',
        'tldPeriod' => 'setTldPeriod',
        'isManual' => 'setIsManual',
        'requiredFields' => 'setRequiredFields',
        'transferImportedContacts' => 'setTransferImportedContacts',
        'registrars' => 'setRegistrars',
        'autoDelete' => 'setAutoDelete',
        'documents' => 'setDocuments',
        'registryLock' => 'setRegistryLock',
        'trusteeTypes' => 'setTrusteeTypes',
        'sldMin' => 'setSldMin',
        'sldMax' => 'setSldMax',
        'numeric' => 'setNumeric'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'label' => 'getLabel',
        'charMin' => 'getCharMin',
        'charMax' => 'getCharMax',
        'dnssecMin' => 'getDnssecMin',
        'dnssecMax' => 'getDnssecMax',
        'dnssecAlgorithms' => 'getDnssecAlgorithms',
        'nserverMin' => 'getNserverMin',
        'nserverMax' => 'getNserverMax',
        'ipv4Min' => 'getIpv4Min',
        'ipv4Max' => 'getIpv4Max',
        'ipv6Min' => 'getIpv6Min',
        'ipv6Max' => 'getIpv6Max',
        'nsentryMin' => 'getNsentryMin',
        'nsentryMax' => 'getNsentryMax',
        'rootNserver' => 'getRootNserver',
        'dnssecRecord' => 'getDnssecRecord',
        'restoreArgpPeriod' => 'getRestoreArgpPeriod',
        'restoreRgpPeriod' => 'getRestoreRgpPeriod',
        'cancelationPeriod' => 'getCancelationPeriod',
        'taskCreate' => 'getTaskCreate',
        'taskUpdate' => 'getTaskUpdate',
        'taskDelete' => 'getTaskDelete',
        'taskRenew' => 'getTaskRenew',
        'taskTransfer' => 'getTaskTransfer',
        'taskTransit' => 'getTaskTransit',
        'taskPreack' => 'getTaskPreack',
        'taskRestore' => 'getTaskRestore',
        'taskAuthinfoCreate' => 'getTaskAuthinfoCreate',
        'taskAuthinfoDelete' => 'getTaskAuthinfoDelete',
        'taskAuthinfo2' => 'getTaskAuthinfo2',
        'taskStatusUpdate' => 'getTaskStatusUpdate',
        'taskOwnerChange' => 'getTaskOwnerChange',
        'cancelationExpireOnly' => 'getCancelationExpireOnly',
        'registrarStatus' => 'getRegistrarStatus',
        'authinfo1Location' => 'getAuthinfo1Location',
        'numeralDomains' => 'getNumeralDomains',
        'realtime' => 'getRealtime',
        'idn' => 'getIdn',
        'transferComfirmation' => 'getTransferComfirmation',
        'dnsCheck' => 'getDnsCheck',
        'premiumDomains' => 'getPremiumDomains',
        'contactExtensions' => 'getContactExtensions',
        'privacy' => 'getPrivacy',
        'trustee' => 'getTrustee',
        'forcedTrustee' => 'getForcedTrustee',
        'thirdLevel' => 'getThirdLevel',
        'transferAuthinfo' => 'getTransferAuthinfo',
        'ownerchangeAuthinfo' => 'getOwnerchangeAuthinfo',
        'errorCodes' => 'getErrorCodes',
        'tldType' => 'getTldType',
        'tldContinent' => 'getTldContinent',
        'categories' => 'getCategories',
        'confluencePageDe' => 'getConfluencePageDe',
        'confluencePageEn' => 'getConfluencePageEn',
        'commentDe' => 'getCommentDe',
        'commentEn' => 'getCommentEn',
        'whois' => 'getWhois',
        'countryIso' => 'getCountryIso',
        'geoPol' => 'getGeoPol',
        'officialLanguage' => 'getOfficialLanguage',
        'blockingService' => 'getBlockingService',
        'restrictions' => 'getRestrictions',
        'country' => 'getCountry',
        'dataControllers' => 'getDataControllers',
        'preregInformation' => 'getPreregInformation',
        'rankingLevel' => 'getRankingLevel',
        'tldTasks' => 'getTldTasks',
        'tldDns' => 'getTldDns',
        'tldPeriod' => 'getTldPeriod',
        'isManual' => 'getIsManual',
        'requiredFields' => 'getRequiredFields',
        'transferImportedContacts' => 'getTransferImportedContacts',
        'registrars' => 'getRegistrars',
        'autoDelete' => 'getAutoDelete',
        'documents' => 'getDocuments',
        'registryLock' => 'getRegistryLock',
        'trusteeTypes' => 'getTrusteeTypes',
        'sldMin' => 'getSldMin',
        'sldMax' => 'getSldMax',
        'numeric' => 'getNumeric'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $this->createData($data['id'], 'id')  : null;
        $this->container['label'] = isset($data['label']) ? $this->createData($data['label'], 'label')  : null;
        $this->container['charMin'] = isset($data['charMin']) ? $this->createData($data['charMin'], 'charMin')  : null;
        $this->container['charMax'] = isset($data['charMax']) ? $this->createData($data['charMax'], 'charMax')  : null;
        $this->container['dnssecMin'] = isset($data['dnssecMin']) ? $this->createData($data['dnssecMin'], 'dnssecMin')  : null;
        $this->container['dnssecMax'] = isset($data['dnssecMax']) ? $this->createData($data['dnssecMax'], 'dnssecMax')  : null;
        $this->container['dnssecAlgorithms'] = isset($data['dnssecAlgorithms']) ? $this->createData($data['dnssecAlgorithms'], 'dnssecAlgorithms')  : null;
        $this->container['nserverMin'] = isset($data['nserverMin']) ? $this->createData($data['nserverMin'], 'nserverMin')  : null;
        $this->container['nserverMax'] = isset($data['nserverMax']) ? $this->createData($data['nserverMax'], 'nserverMax')  : null;
        $this->container['ipv4Min'] = isset($data['ipv4Min']) ? $this->createData($data['ipv4Min'], 'ipv4Min')  : null;
        $this->container['ipv4Max'] = isset($data['ipv4Max']) ? $this->createData($data['ipv4Max'], 'ipv4Max')  : null;
        $this->container['ipv6Min'] = isset($data['ipv6Min']) ? $this->createData($data['ipv6Min'], 'ipv6Min')  : null;
        $this->container['ipv6Max'] = isset($data['ipv6Max']) ? $this->createData($data['ipv6Max'], 'ipv6Max')  : null;
        $this->container['nsentryMin'] = isset($data['nsentryMin']) ? $this->createData($data['nsentryMin'], 'nsentryMin')  : null;
        $this->container['nsentryMax'] = isset($data['nsentryMax']) ? $this->createData($data['nsentryMax'], 'nsentryMax')  : null;
        $this->container['rootNserver'] = isset($data['rootNserver']) ? $this->createData($data['rootNserver'], 'rootNserver')  : null;
        $this->container['dnssecRecord'] = isset($data['dnssecRecord']) ? $this->createData($data['dnssecRecord'], 'dnssecRecord')  : null;
        $this->container['restoreArgpPeriod'] = isset($data['restoreArgpPeriod']) ? $this->createData($data['restoreArgpPeriod'], 'restoreArgpPeriod')  : null;
        $this->container['restoreRgpPeriod'] = isset($data['restoreRgpPeriod']) ? $this->createData($data['restoreRgpPeriod'], 'restoreRgpPeriod')  : null;
        $this->container['cancelationPeriod'] = isset($data['cancelationPeriod']) ? $this->createData($data['cancelationPeriod'], 'cancelationPeriod')  : null;
        $this->container['taskCreate'] = isset($data['taskCreate']) ? $this->createData($data['taskCreate'], 'taskCreate')  : null;
        $this->container['taskUpdate'] = isset($data['taskUpdate']) ? $this->createData($data['taskUpdate'], 'taskUpdate')  : null;
        $this->container['taskDelete'] = isset($data['taskDelete']) ? $this->createData($data['taskDelete'], 'taskDelete')  : null;
        $this->container['taskRenew'] = isset($data['taskRenew']) ? $this->createData($data['taskRenew'], 'taskRenew')  : null;
        $this->container['taskTransfer'] = isset($data['taskTransfer']) ? $this->createData($data['taskTransfer'], 'taskTransfer')  : null;
        $this->container['taskTransit'] = isset($data['taskTransit']) ? $this->createData($data['taskTransit'], 'taskTransit')  : null;
        $this->container['taskPreack'] = isset($data['taskPreack']) ? $this->createData($data['taskPreack'], 'taskPreack')  : null;
        $this->container['taskRestore'] = isset($data['taskRestore']) ? $this->createData($data['taskRestore'], 'taskRestore')  : null;
        $this->container['taskAuthinfoCreate'] = isset($data['taskAuthinfoCreate']) ? $this->createData($data['taskAuthinfoCreate'], 'taskAuthinfoCreate')  : null;
        $this->container['taskAuthinfoDelete'] = isset($data['taskAuthinfoDelete']) ? $this->createData($data['taskAuthinfoDelete'], 'taskAuthinfoDelete')  : null;
        $this->container['taskAuthinfo2'] = isset($data['taskAuthinfo2']) ? $this->createData($data['taskAuthinfo2'], 'taskAuthinfo2')  : null;
        $this->container['taskStatusUpdate'] = isset($data['taskStatusUpdate']) ? $this->createData($data['taskStatusUpdate'], 'taskStatusUpdate')  : null;
        $this->container['taskOwnerChange'] = isset($data['taskOwnerChange']) ? $this->createData($data['taskOwnerChange'], 'taskOwnerChange')  : null;
        $this->container['cancelationExpireOnly'] = isset($data['cancelationExpireOnly']) ? $this->createData($data['cancelationExpireOnly'], 'cancelationExpireOnly')  : null;
        $this->container['registrarStatus'] = isset($data['registrarStatus']) ? $this->createData($data['registrarStatus'], 'registrarStatus')  : null;
        $this->container['authinfo1Location'] = isset($data['authinfo1Location']) ? $this->createData($data['authinfo1Location'], 'authinfo1Location')  : null;
        $this->container['numeralDomains'] = isset($data['numeralDomains']) ? $this->createData($data['numeralDomains'], 'numeralDomains')  : null;
        $this->container['realtime'] = isset($data['realtime']) ? $this->createData($data['realtime'], 'realtime')  : null;
        $this->container['idn'] = isset($data['idn']) ? $this->createData($data['idn'], 'idn')  : null;
        $this->container['transferComfirmation'] = isset($data['transferComfirmation']) ? $this->createData($data['transferComfirmation'], 'transferComfirmation')  : null;
        $this->container['dnsCheck'] = isset($data['dnsCheck']) ? $this->createData($data['dnsCheck'], 'dnsCheck')  : null;
        $this->container['premiumDomains'] = isset($data['premiumDomains']) ? $this->createData($data['premiumDomains'], 'premiumDomains')  : null;
        $this->container['contactExtensions'] = isset($data['contactExtensions']) ? $this->createData($data['contactExtensions'], 'contactExtensions')  : null;
        $this->container['privacy'] = isset($data['privacy']) ? $this->createData($data['privacy'], 'privacy')  : null;
        $this->container['trustee'] = isset($data['trustee']) ? $this->createData($data['trustee'], 'trustee')  : null;
        $this->container['forcedTrustee'] = isset($data['forcedTrustee']) ? $this->createData($data['forcedTrustee'], 'forcedTrustee')  : null;
        $this->container['thirdLevel'] = isset($data['thirdLevel']) ? $this->createData($data['thirdLevel'], 'thirdLevel')  : null;
        $this->container['transferAuthinfo'] = isset($data['transferAuthinfo']) ? $this->createData($data['transferAuthinfo'], 'transferAuthinfo')  : null;
        $this->container['ownerchangeAuthinfo'] = isset($data['ownerchangeAuthinfo']) ? $this->createData($data['ownerchangeAuthinfo'], 'ownerchangeAuthinfo')  : null;
        $this->container['errorCodes'] = isset($data['errorCodes']) ? $this->createData($data['errorCodes'], 'errorCodes')  : null;
        $this->container['tldType'] = isset($data['tldType']) ? $this->createData($data['tldType'], 'tldType')  : null;
        $this->container['tldContinent'] = isset($data['tldContinent']) ? $this->createData($data['tldContinent'], 'tldContinent')  : null;
        $this->container['categories'] = isset($data['categories']) ? $this->createData($data['categories'], 'categories')  : null;
        $this->container['confluencePageDe'] = isset($data['confluencePageDe']) ? $this->createData($data['confluencePageDe'], 'confluencePageDe')  : null;
        $this->container['confluencePageEn'] = isset($data['confluencePageEn']) ? $this->createData($data['confluencePageEn'], 'confluencePageEn')  : null;
        $this->container['commentDe'] = isset($data['commentDe']) ? $this->createData($data['commentDe'], 'commentDe')  : null;
        $this->container['commentEn'] = isset($data['commentEn']) ? $this->createData($data['commentEn'], 'commentEn')  : null;
        $this->container['whois'] = isset($data['whois']) ? $this->createData($data['whois'], 'whois')  : null;
        $this->container['countryIso'] = isset($data['countryIso']) ? $this->createData($data['countryIso'], 'countryIso')  : null;
        $this->container['geoPol'] = isset($data['geoPol']) ? $this->createData($data['geoPol'], 'geoPol')  : null;
        $this->container['officialLanguage'] = isset($data['officialLanguage']) ? $this->createData($data['officialLanguage'], 'officialLanguage')  : null;
        $this->container['blockingService'] = isset($data['blockingService']) ? $this->createData($data['blockingService'], 'blockingService')  : null;
        $this->container['restrictions'] = isset($data['restrictions']) ? $this->createData($data['restrictions'], 'restrictions')  : null;
        $this->container['country'] = isset($data['country']) ? $this->createData($data['country'], 'country')  : null;
        $this->container['dataControllers'] = isset($data['dataControllers']) ? $this->createData($data['dataControllers'], 'dataControllers')  : null;
        $this->container['preregInformation'] = isset($data['preregInformation']) ? $this->createData($data['preregInformation'], 'preregInformation')  : null;
        $this->container['rankingLevel'] = isset($data['rankingLevel']) ? $this->createData($data['rankingLevel'], 'rankingLevel')  : null;
        $this->container['tldTasks'] = isset($data['tldTasks']) ? $this->createData($data['tldTasks'], 'tldTasks')  : null;
        $this->container['tldDns'] = isset($data['tldDns']) ? $this->createData($data['tldDns'], 'tldDns')  : null;
        $this->container['tldPeriod'] = isset($data['tldPeriod']) ? $this->createData($data['tldPeriod'], 'tldPeriod')  : null;
        $this->container['isManual'] = isset($data['isManual']) ? $this->createData($data['isManual'], 'isManual')  : null;
        $this->container['requiredFields'] = isset($data['requiredFields']) ? $this->createData($data['requiredFields'], 'requiredFields')  : null;
        $this->container['transferImportedContacts'] = isset($data['transferImportedContacts']) ? $this->createData($data['transferImportedContacts'], 'transferImportedContacts')  : null;
        $this->container['registrars'] = isset($data['registrars']) ? $this->createData($data['registrars'], 'registrars')  : null;
        $this->container['autoDelete'] = isset($data['autoDelete']) ? $this->createData($data['autoDelete'], 'autoDelete')  : null;
        $this->container['documents'] = isset($data['documents']) ? $this->createData($data['documents'], 'documents')  : null;
        $this->container['registryLock'] = isset($data['registryLock']) ? $this->createData($data['registryLock'], 'registryLock')  : null;
        $this->container['trusteeTypes'] = isset($data['trusteeTypes']) ? $this->createData($data['trusteeTypes'], 'trusteeTypes')  : null;
        $this->container['sldMin'] = isset($data['sldMin']) ? $this->createData($data['sldMin'], 'sldMin')  : null;
        $this->container['sldMax'] = isset($data['sldMax']) ? $this->createData($data['sldMax'], 'sldMax')  : null;
        $this->container['numeric'] = isset($data['numeric']) ? $this->createData($data['numeric'], 'numeric')  : null;
    }

    /**
     * create data according to types;
     * non object types will just be returend as is:
     * object types will return an instance of themselves or and array of instances
     *
     * @param mixed[] $data
     * @param string $property
     * @return mixed
     */
    public function createData($data = null, $property = '')
    {
        if ($data === null || $property === '') {
            return '';
        }
        $swaggerType = self::$swaggerTypes[$property];

        preg_match("/([\\\\\w\d]+)(\[\])?/", $swaggerType, $matches);

        // handle object types
        if (count($matches) > 0 && count($matches) < 3) {
            try {
                if (!is_array($data)) {
                    return $data;
                }
                
                $reflection = new \ReflectionClass($swaggerType);
                $reflectionInstance = $reflection->newInstance($data);

                return $reflectionInstance;
            } catch (\Exception $ex) {
                return $data;
            }
        } elseif (count($matches) >= 3) {
            // Object[]
            // arrays of objects have to be handled differently
            $reflectionInstances = [];
            foreach($data as $d){
                try {
                    if(!is_array($d)){
                        $reflectionInstances[] = $d;
                        continue;
                    }
                    $reflection = new \ReflectionClass(str_replace("[]", "", $swaggerType) );
                    $reflectionInstances[] = $reflection->newInstance($d);                   
                } catch (\Exception $ex) {
                    return $d;
                }
            }

            return $reflectionInstances;
        }

        return $data;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the 
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets label
     *
     * @return string
     */
    public function getLabel()
    {
        return $this->container['label'];
    }

    /**
     * Sets label
     *
     * @param string $label label
     *
     * @return $this
     */
    public function setLabel($label)
    {
        $this->container['label'] = $label;

        return $this;
    }

    /**
     * Gets charMin
     *
     * @return int
     */
    public function getCharMin()
    {
        return $this->container['charMin'];
    }

    /**
     * Sets charMin
     *
     * @param int $charMin charMin
     *
     * @return $this
     */
    public function setCharMin($charMin)
    {
        $this->container['charMin'] = $charMin;

        return $this;
    }

    /**
     * Gets charMax
     *
     * @return int
     */
    public function getCharMax()
    {
        return $this->container['charMax'];
    }

    /**
     * Sets charMax
     *
     * @param int $charMax charMax
     *
     * @return $this
     */
    public function setCharMax($charMax)
    {
        $this->container['charMax'] = $charMax;

        return $this;
    }

    /**
     * Gets dnssecMin
     *
     * @return int
     */
    public function getDnssecMin()
    {
        return $this->container['dnssecMin'];
    }

    /**
     * Sets dnssecMin
     *
     * @param int $dnssecMin dnssecMin
     *
     * @return $this
     */
    public function setDnssecMin($dnssecMin)
    {
        $this->container['dnssecMin'] = $dnssecMin;

        return $this;
    }

    /**
     * Gets dnssecMax
     *
     * @return int
     */
    public function getDnssecMax()
    {
        return $this->container['dnssecMax'];
    }

    /**
     * Sets dnssecMax
     *
     * @param int $dnssecMax dnssecMax
     *
     * @return $this
     */
    public function setDnssecMax($dnssecMax)
    {
        $this->container['dnssecMax'] = $dnssecMax;

        return $this;
    }

    /**
     * Gets dnssecAlgorithms
     *
     * @return int[]
     */
    public function getDnssecAlgorithms()
    {
        return $this->container['dnssecAlgorithms'];
    }

    /**
     * Sets dnssecAlgorithms
     *
     * @param int[] $dnssecAlgorithms dnssecAlgorithms
     *
     * @return $this
     */
    public function setDnssecAlgorithms($dnssecAlgorithms)
    {
        $this->container['dnssecAlgorithms'] = $dnssecAlgorithms;

        return $this;
    }

    /**
     * Gets nserverMin
     *
     * @return int
     */
    public function getNserverMin()
    {
        return $this->container['nserverMin'];
    }

    /**
     * Sets nserverMin
     *
     * @param int $nserverMin nserverMin
     *
     * @return $this
     */
    public function setNserverMin($nserverMin)
    {
        $this->container['nserverMin'] = $nserverMin;

        return $this;
    }

    /**
     * Gets nserverMax
     *
     * @return int
     */
    public function getNserverMax()
    {
        return $this->container['nserverMax'];
    }

    /**
     * Sets nserverMax
     *
     * @param int $nserverMax nserverMax
     *
     * @return $this
     */
    public function setNserverMax($nserverMax)
    {
        $this->container['nserverMax'] = $nserverMax;

        return $this;
    }

    /**
     * Gets ipv4Min
     *
     * @return int
     */
    public function getIpv4Min()
    {
        return $this->container['ipv4Min'];
    }

    /**
     * Sets ipv4Min
     *
     * @param int $ipv4Min ipv4Min
     *
     * @return $this
     */
    public function setIpv4Min($ipv4Min)
    {
        $this->container['ipv4Min'] = $ipv4Min;

        return $this;
    }

    /**
     * Gets ipv4Max
     *
     * @return int
     */
    public function getIpv4Max()
    {
        return $this->container['ipv4Max'];
    }

    /**
     * Sets ipv4Max
     *
     * @param int $ipv4Max ipv4Max
     *
     * @return $this
     */
    public function setIpv4Max($ipv4Max)
    {
        $this->container['ipv4Max'] = $ipv4Max;

        return $this;
    }

    /**
     * Gets ipv6Min
     *
     * @return int
     */
    public function getIpv6Min()
    {
        return $this->container['ipv6Min'];
    }

    /**
     * Sets ipv6Min
     *
     * @param int $ipv6Min ipv6Min
     *
     * @return $this
     */
    public function setIpv6Min($ipv6Min)
    {
        $this->container['ipv6Min'] = $ipv6Min;

        return $this;
    }

    /**
     * Gets ipv6Max
     *
     * @return int
     */
    public function getIpv6Max()
    {
        return $this->container['ipv6Max'];
    }

    /**
     * Sets ipv6Max
     *
     * @param int $ipv6Max ipv6Max
     *
     * @return $this
     */
    public function setIpv6Max($ipv6Max)
    {
        $this->container['ipv6Max'] = $ipv6Max;

        return $this;
    }

    /**
     * Gets nsentryMin
     *
     * @return int
     */
    public function getNsentryMin()
    {
        return $this->container['nsentryMin'];
    }

    /**
     * Sets nsentryMin
     *
     * @param int $nsentryMin nsentryMin
     *
     * @return $this
     */
    public function setNsentryMin($nsentryMin)
    {
        $this->container['nsentryMin'] = $nsentryMin;

        return $this;
    }

    /**
     * Gets nsentryMax
     *
     * @return int
     */
    public function getNsentryMax()
    {
        return $this->container['nsentryMax'];
    }

    /**
     * Sets nsentryMax
     *
     * @param int $nsentryMax nsentryMax
     *
     * @return $this
     */
    public function setNsentryMax($nsentryMax)
    {
        $this->container['nsentryMax'] = $nsentryMax;

        return $this;
    }

    /**
     * Gets rootNserver
     *
     * @return string[]
     */
    public function getRootNserver()
    {
        return $this->container['rootNserver'];
    }

    /**
     * Sets rootNserver
     *
     * @param string[] $rootNserver rootNserver
     *
     * @return $this
     */
    public function setRootNserver($rootNserver)
    {
        $this->container['rootNserver'] = $rootNserver;

        return $this;
    }

    /**
     * Gets dnssecRecord
     *
     * @return int
     */
    public function getDnssecRecord()
    {
        return $this->container['dnssecRecord'];
    }

    /**
     * Sets dnssecRecord
     *
     * @param int $dnssecRecord dnssecRecord
     *
     * @return $this
     */
    public function setDnssecRecord($dnssecRecord)
    {
        $this->container['dnssecRecord'] = $dnssecRecord;

        return $this;
    }

    /**
     * Gets restoreArgpPeriod
     *
     * @return \Domainrobot\Model\TimePeriod
     */
    public function getRestoreArgpPeriod()
    {
        return $this->container['restoreArgpPeriod'];
    }

    /**
     * Sets restoreArgpPeriod
     *
     * @param \Domainrobot\Model\TimePeriod $restoreArgpPeriod restoreArgpPeriod
     *
     * @return $this
     */
    public function setRestoreArgpPeriod($restoreArgpPeriod)
    {
        $this->container['restoreArgpPeriod'] = $restoreArgpPeriod;

        return $this;
    }

    /**
     * Gets restoreRgpPeriod
     *
     * @return \Domainrobot\Model\TimePeriod
     */
    public function getRestoreRgpPeriod()
    {
        return $this->container['restoreRgpPeriod'];
    }

    /**
     * Sets restoreRgpPeriod
     *
     * @param \Domainrobot\Model\TimePeriod $restoreRgpPeriod restoreRgpPeriod
     *
     * @return $this
     */
    public function setRestoreRgpPeriod($restoreRgpPeriod)
    {
        $this->container['restoreRgpPeriod'] = $restoreRgpPeriod;

        return $this;
    }

    /**
     * Gets cancelationPeriod
     *
     * @return \Domainrobot\Model\TimePeriod
     */
    public function getCancelationPeriod()
    {
        return $this->container['cancelationPeriod'];
    }

    /**
     * Sets cancelationPeriod
     *
     * @param \Domainrobot\Model\TimePeriod $cancelationPeriod cancelationPeriod
     *
     * @return $this
     */
    public function setCancelationPeriod($cancelationPeriod)
    {
        $this->container['cancelationPeriod'] = $cancelationPeriod;

        return $this;
    }

    /**
     * Gets taskCreate
     *
     * @return bool
     */
    public function getTaskCreate()
    {
        return $this->container['taskCreate'];
    }

    /**
     * Sets taskCreate
     *
     * @param bool $taskCreate taskCreate
     *
     * @return $this
     */
    public function setTaskCreate($taskCreate)
    {
        $this->container['taskCreate'] = $taskCreate;

        return $this;
    }

    /**
     * Gets taskUpdate
     *
     * @return bool
     */
    public function getTaskUpdate()
    {
        return $this->container['taskUpdate'];
    }

    /**
     * Sets taskUpdate
     *
     * @param bool $taskUpdate taskUpdate
     *
     * @return $this
     */
    public function setTaskUpdate($taskUpdate)
    {
        $this->container['taskUpdate'] = $taskUpdate;

        return $this;
    }

    /**
     * Gets taskDelete
     *
     * @return bool
     */
    public function getTaskDelete()
    {
        return $this->container['taskDelete'];
    }

    /**
     * Sets taskDelete
     *
     * @param bool $taskDelete taskDelete
     *
     * @return $this
     */
    public function setTaskDelete($taskDelete)
    {
        $this->container['taskDelete'] = $taskDelete;

        return $this;
    }

    /**
     * Gets taskRenew
     *
     * @return bool
     */
    public function getTaskRenew()
    {
        return $this->container['taskRenew'];
    }

    /**
     * Sets taskRenew
     *
     * @param bool $taskRenew taskRenew
     *
     * @return $this
     */
    public function setTaskRenew($taskRenew)
    {
        $this->container['taskRenew'] = $taskRenew;

        return $this;
    }

    /**
     * Gets taskTransfer
     *
     * @return bool
     */
    public function getTaskTransfer()
    {
        return $this->container['taskTransfer'];
    }

    /**
     * Sets taskTransfer
     *
     * @param bool $taskTransfer taskTransfer
     *
     * @return $this
     */
    public function setTaskTransfer($taskTransfer)
    {
        $this->container['taskTransfer'] = $taskTransfer;

        return $this;
    }

    /**
     * Gets taskTransit
     *
     * @return bool
     */
    public function getTaskTransit()
    {
        return $this->container['taskTransit'];
    }

    /**
     * Sets taskTransit
     *
     * @param bool $taskTransit taskTransit
     *
     * @return $this
     */
    public function setTaskTransit($taskTransit)
    {
        $this->container['taskTransit'] = $taskTransit;

        return $this;
    }

    /**
     * Gets taskPreack
     *
     * @return bool
     */
    public function getTaskPreack()
    {
        return $this->container['taskPreack'];
    }

    /**
     * Sets taskPreack
     *
     * @param bool $taskPreack taskPreack
     *
     * @return $this
     */
    public function setTaskPreack($taskPreack)
    {
        $this->container['taskPreack'] = $taskPreack;

        return $this;
    }

    /**
     * Gets taskRestore
     *
     * @return bool
     */
    public function getTaskRestore()
    {
        return $this->container['taskRestore'];
    }

    /**
     * Sets taskRestore
     *
     * @param bool $taskRestore taskRestore
     *
     * @return $this
     */
    public function setTaskRestore($taskRestore)
    {
        $this->container['taskRestore'] = $taskRestore;

        return $this;
    }

    /**
     * Gets taskAuthinfoCreate
     *
     * @return bool
     */
    public function getTaskAuthinfoCreate()
    {
        return $this->container['taskAuthinfoCreate'];
    }

    /**
     * Sets taskAuthinfoCreate
     *
     * @param bool $taskAuthinfoCreate taskAuthinfoCreate
     *
     * @return $this
     */
    public function setTaskAuthinfoCreate($taskAuthinfoCreate)
    {
        $this->container['taskAuthinfoCreate'] = $taskAuthinfoCreate;

        return $this;
    }

    /**
     * Gets taskAuthinfoDelete
     *
     * @return bool
     */
    public function getTaskAuthinfoDelete()
    {
        return $this->container['taskAuthinfoDelete'];
    }

    /**
     * Sets taskAuthinfoDelete
     *
     * @param bool $taskAuthinfoDelete taskAuthinfoDelete
     *
     * @return $this
     */
    public function setTaskAuthinfoDelete($taskAuthinfoDelete)
    {
        $this->container['taskAuthinfoDelete'] = $taskAuthinfoDelete;

        return $this;
    }

    /**
     * Gets taskAuthinfo2
     *
     * @return bool
     */
    public function getTaskAuthinfo2()
    {
        return $this->container['taskAuthinfo2'];
    }

    /**
     * Sets taskAuthinfo2
     *
     * @param bool $taskAuthinfo2 taskAuthinfo2
     *
     * @return $this
     */
    public function setTaskAuthinfo2($taskAuthinfo2)
    {
        $this->container['taskAuthinfo2'] = $taskAuthinfo2;

        return $this;
    }

    /**
     * Gets taskStatusUpdate
     *
     * @return bool
     */
    public function getTaskStatusUpdate()
    {
        return $this->container['taskStatusUpdate'];
    }

    /**
     * Sets taskStatusUpdate
     *
     * @param bool $taskStatusUpdate taskStatusUpdate
     *
     * @return $this
     */
    public function setTaskStatusUpdate($taskStatusUpdate)
    {
        $this->container['taskStatusUpdate'] = $taskStatusUpdate;

        return $this;
    }

    /**
     * Gets taskOwnerChange
     *
     * @return bool
     */
    public function getTaskOwnerChange()
    {
        return $this->container['taskOwnerChange'];
    }

    /**
     * Sets taskOwnerChange
     *
     * @param bool $taskOwnerChange taskOwnerChange
     *
     * @return $this
     */
    public function setTaskOwnerChange($taskOwnerChange)
    {
        $this->container['taskOwnerChange'] = $taskOwnerChange;

        return $this;
    }

    /**
     * Gets cancelationExpireOnly
     *
     * @return bool
     */
    public function getCancelationExpireOnly()
    {
        return $this->container['cancelationExpireOnly'];
    }

    /**
     * Sets cancelationExpireOnly
     *
     * @param bool $cancelationExpireOnly cancelationExpireOnly
     *
     * @return $this
     */
    public function setCancelationExpireOnly($cancelationExpireOnly)
    {
        $this->container['cancelationExpireOnly'] = $cancelationExpireOnly;

        return $this;
    }

    /**
     * Gets registrarStatus
     *
     * @return string[]
     */
    public function getRegistrarStatus()
    {
        return $this->container['registrarStatus'];
    }

    /**
     * Sets registrarStatus
     *
     * @param string[] $registrarStatus registrarStatus
     *
     * @return $this
     */
    public function setRegistrarStatus($registrarStatus)
    {
        $this->container['registrarStatus'] = $registrarStatus;

        return $this;
    }

    /**
     * Gets authinfo1Location
     *
     * @return \Domainrobot\Model\AuthInfo1Location[]
     */
    public function getAuthinfo1Location()
    {
        return $this->container['authinfo1Location'];
    }

    /**
     * Sets authinfo1Location
     *
     * @param \Domainrobot\Model\AuthInfo1Location[] $authinfo1Location authinfo1Location
     *
     * @return $this
     */
    public function setAuthinfo1Location($authinfo1Location)
    {
        $this->container['authinfo1Location'] = $authinfo1Location;

        return $this;
    }

    /**
     * Gets numeralDomains
     *
     * @return bool
     */
    public function getNumeralDomains()
    {
        return $this->container['numeralDomains'];
    }

    /**
     * Sets numeralDomains
     *
     * @param bool $numeralDomains numeralDomains
     *
     * @return $this
     */
    public function setNumeralDomains($numeralDomains)
    {
        $this->container['numeralDomains'] = $numeralDomains;

        return $this;
    }

    /**
     * Gets realtime
     *
     * @return bool
     */
    public function getRealtime()
    {
        return $this->container['realtime'];
    }

    /**
     * Sets realtime
     *
     * @param bool $realtime realtime
     *
     * @return $this
     */
    public function setRealtime($realtime)
    {
        $this->container['realtime'] = $realtime;

        return $this;
    }

    /**
     * Gets idn
     *
     * @return \Domainrobot\Model\Charset[]
     */
    public function getIdn()
    {
        return $this->container['idn'];
    }

    /**
     * Sets idn
     *
     * @param \Domainrobot\Model\Charset[] $idn idn
     *
     * @return $this
     */
    public function setIdn($idn)
    {
        $this->container['idn'] = $idn;

        return $this;
    }

    /**
     * Gets transferComfirmation
     *
     * @return bool
     */
    public function getTransferComfirmation()
    {
        return $this->container['transferComfirmation'];
    }

    /**
     * Sets transferComfirmation
     *
     * @param bool $transferComfirmation transferComfirmation
     *
     * @return $this
     */
    public function setTransferComfirmation($transferComfirmation)
    {
        $this->container['transferComfirmation'] = $transferComfirmation;

        return $this;
    }

    /**
     * Gets dnsCheck
     *
     * @return bool
     */
    public function getDnsCheck()
    {
        return $this->container['dnsCheck'];
    }

    /**
     * Sets dnsCheck
     *
     * @param bool $dnsCheck dnsCheck
     *
     * @return $this
     */
    public function setDnsCheck($dnsCheck)
    {
        $this->container['dnsCheck'] = $dnsCheck;

        return $this;
    }

    /**
     * Gets premiumDomains
     *
     * @return bool
     */
    public function getPremiumDomains()
    {
        return $this->container['premiumDomains'];
    }

    /**
     * Sets premiumDomains
     *
     * @param bool $premiumDomains premiumDomains
     *
     * @return $this
     */
    public function setPremiumDomains($premiumDomains)
    {
        $this->container['premiumDomains'] = $premiumDomains;

        return $this;
    }

    /**
     * Gets contactExtensions
     *
     * @return string[]
     */
    public function getContactExtensions()
    {
        return $this->container['contactExtensions'];
    }

    /**
     * Sets contactExtensions
     *
     * @param string[] $contactExtensions contactExtensions
     *
     * @return $this
     */
    public function setContactExtensions($contactExtensions)
    {
        $this->container['contactExtensions'] = $contactExtensions;

        return $this;
    }

    /**
     * Gets privacy
     *
     * @return bool
     */
    public function getPrivacy()
    {
        return $this->container['privacy'];
    }

    /**
     * Sets privacy
     *
     * @param bool $privacy privacy
     *
     * @return $this
     */
    public function setPrivacy($privacy)
    {
        $this->container['privacy'] = $privacy;

        return $this;
    }

    /**
     * Gets trustee
     *
     * @return bool
     */
    public function getTrustee()
    {
        return $this->container['trustee'];
    }

    /**
     * Sets trustee
     *
     * @param bool $trustee trustee
     *
     * @return $this
     */
    public function setTrustee($trustee)
    {
        $this->container['trustee'] = $trustee;

        return $this;
    }

    /**
     * Gets forcedTrustee
     *
     * @return bool
     */
    public function getForcedTrustee()
    {
        return $this->container['forcedTrustee'];
    }

    /**
     * Sets forcedTrustee
     *
     * @param bool $forcedTrustee forcedTrustee
     *
     * @return $this
     */
    public function setForcedTrustee($forcedTrustee)
    {
        $this->container['forcedTrustee'] = $forcedTrustee;

        return $this;
    }

    /**
     * Gets thirdLevel
     *
     * @return bool
     */
    public function getThirdLevel()
    {
        return $this->container['thirdLevel'];
    }

    /**
     * Sets thirdLevel
     *
     * @param bool $thirdLevel thirdLevel
     *
     * @return $this
     */
    public function setThirdLevel($thirdLevel)
    {
        $this->container['thirdLevel'] = $thirdLevel;

        return $this;
    }

    /**
     * Gets transferAuthinfo
     *
     * @return bool
     */
    public function getTransferAuthinfo()
    {
        return $this->container['transferAuthinfo'];
    }

    /**
     * Sets transferAuthinfo
     *
     * @param bool $transferAuthinfo transferAuthinfo
     *
     * @return $this
     */
    public function setTransferAuthinfo($transferAuthinfo)
    {
        $this->container['transferAuthinfo'] = $transferAuthinfo;

        return $this;
    }

    /**
     * Gets ownerchangeAuthinfo
     *
     * @return bool
     */
    public function getOwnerchangeAuthinfo()
    {
        return $this->container['ownerchangeAuthinfo'];
    }

    /**
     * Sets ownerchangeAuthinfo
     *
     * @param bool $ownerchangeAuthinfo ownerchangeAuthinfo
     *
     * @return $this
     */
    public function setOwnerchangeAuthinfo($ownerchangeAuthinfo)
    {
        $this->container['ownerchangeAuthinfo'] = $ownerchangeAuthinfo;

        return $this;
    }

    /**
     * Gets errorCodes
     *
     * @return string[]
     */
    public function getErrorCodes()
    {
        return $this->container['errorCodes'];
    }

    /**
     * Sets errorCodes
     *
     * @param string[] $errorCodes errorCodes
     *
     * @return $this
     */
    public function setErrorCodes($errorCodes)
    {
        $this->container['errorCodes'] = $errorCodes;

        return $this;
    }

    /**
     * Gets tldType
     *
     * @return \Domainrobot\Model\TldType
     */
    public function getTldType()
    {
        return $this->container['tldType'];
    }

    /**
     * Sets tldType
     *
     * @param \Domainrobot\Model\TldType $tldType tldType
     *
     * @return $this
     */
    public function setTldType($tldType)
    {
        $this->container['tldType'] = $tldType;

        return $this;
    }

    /**
     * Gets tldContinent
     *
     * @return \Domainrobot\Model\TldContinent
     */
    public function getTldContinent()
    {
        return $this->container['tldContinent'];
    }

    /**
     * Sets tldContinent
     *
     * @param \Domainrobot\Model\TldContinent $tldContinent tldContinent
     *
     * @return $this
     */
    public function setTldContinent($tldContinent)
    {
        $this->container['tldContinent'] = $tldContinent;

        return $this;
    }

    /**
     * Gets categories
     *
     * @return string[]
     */
    public function getCategories()
    {
        return $this->container['categories'];
    }

    /**
     * Sets categories
     *
     * @param string[] $categories categories
     *
     * @return $this
     */
    public function setCategories($categories)
    {
        $this->container['categories'] = $categories;

        return $this;
    }

    /**
     * Gets confluencePageDe
     *
     * @return string
     */
    public function getConfluencePageDe()
    {
        return $this->container['confluencePageDe'];
    }

    /**
     * Sets confluencePageDe
     *
     * @param string $confluencePageDe confluencePageDe
     *
     * @return $this
     */
    public function setConfluencePageDe($confluencePageDe)
    {
        $this->container['confluencePageDe'] = $confluencePageDe;

        return $this;
    }

    /**
     * Gets confluencePageEn
     *
     * @return string
     */
    public function getConfluencePageEn()
    {
        return $this->container['confluencePageEn'];
    }

    /**
     * Sets confluencePageEn
     *
     * @param string $confluencePageEn confluencePageEn
     *
     * @return $this
     */
    public function setConfluencePageEn($confluencePageEn)
    {
        $this->container['confluencePageEn'] = $confluencePageEn;

        return $this;
    }

    /**
     * Gets commentDe
     *
     * @return string
     */
    public function getCommentDe()
    {
        return $this->container['commentDe'];
    }

    /**
     * Sets commentDe
     *
     * @param string $commentDe commentDe
     *
     * @return $this
     */
    public function setCommentDe($commentDe)
    {
        $this->container['commentDe'] = $commentDe;

        return $this;
    }

    /**
     * Gets commentEn
     *
     * @return string
     */
    public function getCommentEn()
    {
        return $this->container['commentEn'];
    }

    /**
     * Sets commentEn
     *
     * @param string $commentEn commentEn
     *
     * @return $this
     */
    public function setCommentEn($commentEn)
    {
        $this->container['commentEn'] = $commentEn;

        return $this;
    }

    /**
     * Gets whois
     *
     * @return string
     */
    public function getWhois()
    {
        return $this->container['whois'];
    }

    /**
     * Sets whois
     *
     * @param string $whois whois
     *
     * @return $this
     */
    public function setWhois($whois)
    {
        $this->container['whois'] = $whois;

        return $this;
    }

    /**
     * Gets countryIso
     *
     * @return string
     */
    public function getCountryIso()
    {
        return $this->container['countryIso'];
    }

    /**
     * Sets countryIso
     *
     * @param string $countryIso countryIso
     *
     * @return $this
     */
    public function setCountryIso($countryIso)
    {
        $this->container['countryIso'] = $countryIso;

        return $this;
    }

    /**
     * Gets geoPol
     *
     * @return string
     */
    public function getGeoPol()
    {
        return $this->container['geoPol'];
    }

    /**
     * Sets geoPol
     *
     * @param string $geoPol geoPol
     *
     * @return $this
     */
    public function setGeoPol($geoPol)
    {
        $this->container['geoPol'] = $geoPol;

        return $this;
    }

    /**
     * Gets officialLanguage
     *
     * @return string
     */
    public function getOfficialLanguage()
    {
        return $this->container['officialLanguage'];
    }

    /**
     * Sets officialLanguage
     *
     * @param string $officialLanguage officialLanguage
     *
     * @return $this
     */
    public function setOfficialLanguage($officialLanguage)
    {
        $this->container['officialLanguage'] = $officialLanguage;

        return $this;
    }

    /**
     * Gets blockingService
     *
     * @return bool
     */
    public function getBlockingService()
    {
        return $this->container['blockingService'];
    }

    /**
     * Sets blockingService
     *
     * @param bool $blockingService blockingService
     *
     * @return $this
     */
    public function setBlockingService($blockingService)
    {
        $this->container['blockingService'] = $blockingService;

        return $this;
    }

    /**
     * Gets restrictions
     *
     * @return \Domainrobot\Model\Condition[]
     */
    public function getRestrictions()
    {
        return $this->container['restrictions'];
    }

    /**
     * Sets restrictions
     *
     * @param \Domainrobot\Model\Condition[] $restrictions restrictions
     *
     * @return $this
     */
    public function setRestrictions($restrictions)
    {
        $this->container['restrictions'] = $restrictions;

        return $this;
    }

    /**
     * Gets country
     *
     * @return \Domainrobot\Model\Country
     */
    public function getCountry()
    {
        return $this->container['country'];
    }

    /**
     * Sets country
     *
     * @param \Domainrobot\Model\Country $country country
     *
     * @return $this
     */
    public function setCountry($country)
    {
        $this->container['country'] = $country;

        return $this;
    }

    /**
     * Gets dataControllers
     *
     * @return \Domainrobot\Model\TldDataController[]
     */
    public function getDataControllers()
    {
        return $this->container['dataControllers'];
    }

    /**
     * Sets dataControllers
     *
     * @param \Domainrobot\Model\TldDataController[] $dataControllers dataControllers
     *
     * @return $this
     */
    public function setDataControllers($dataControllers)
    {
        $this->container['dataControllers'] = $dataControllers;

        return $this;
    }

    /**
     * Gets preregInformation
     *
     * @return \Domainrobot\Model\PreregInformation[]
     */
    public function getPreregInformation()
    {
        return $this->container['preregInformation'];
    }

    /**
     * Sets preregInformation
     *
     * @param \Domainrobot\Model\PreregInformation[] $preregInformation preregInformation
     *
     * @return $this
     */
    public function setPreregInformation($preregInformation)
    {
        $this->container['preregInformation'] = $preregInformation;

        return $this;
    }

    /**
     * Gets rankingLevel
     *
     * @return int
     */
    public function getRankingLevel()
    {
        return $this->container['rankingLevel'];
    }

    /**
     * Sets rankingLevel
     *
     * @param int $rankingLevel rankingLevel
     *
     * @return $this
     */
    public function setRankingLevel($rankingLevel)
    {
        $this->container['rankingLevel'] = $rankingLevel;

        return $this;
    }

    /**
     * Gets tldTasks
     *
     * @return \Domainrobot\Model\TldTask[]
     */
    public function getTldTasks()
    {
        return $this->container['tldTasks'];
    }

    /**
     * Sets tldTasks
     *
     * @param \Domainrobot\Model\TldTask[] $tldTasks tldTasks
     *
     * @return $this
     */
    public function setTldTasks($tldTasks)
    {
        $this->container['tldTasks'] = $tldTasks;

        return $this;
    }

    /**
     * Gets tldDns
     *
     * @return \Domainrobot\Model\TldDns
     */
    public function getTldDns()
    {
        return $this->container['tldDns'];
    }

    /**
     * Sets tldDns
     *
     * @param \Domainrobot\Model\TldDns $tldDns tldDns
     *
     * @return $this
     */
    public function setTldDns($tldDns)
    {
        $this->container['tldDns'] = $tldDns;

        return $this;
    }

    /**
     * Gets tldPeriod
     *
     * @return \Domainrobot\Model\TldPeriod
     */
    public function getTldPeriod()
    {
        return $this->container['tldPeriod'];
    }

    /**
     * Sets tldPeriod
     *
     * @param \Domainrobot\Model\TldPeriod $tldPeriod tldPeriod
     *
     * @return $this
     */
    public function setTldPeriod($tldPeriod)
    {
        $this->container['tldPeriod'] = $tldPeriod;

        return $this;
    }

    /**
     * Gets isManual
     *
     * @return bool
     */
    public function getIsManual()
    {
        return $this->container['isManual'];
    }

    /**
     * Sets isManual
     *
     * @param bool $isManual isManual
     *
     * @return $this
     */
    public function setIsManual($isManual)
    {
        $this->container['isManual'] = $isManual;

        return $this;
    }

    /**
     * Gets requiredFields
     *
     * @return string[]
     */
    public function getRequiredFields()
    {
        return $this->container['requiredFields'];
    }

    /**
     * Sets requiredFields
     *
     * @param string[] $requiredFields requiredFields
     *
     * @return $this
     */
    public function setRequiredFields($requiredFields)
    {
        $this->container['requiredFields'] = $requiredFields;

        return $this;
    }

    /**
     * Gets transferImportedContacts
     *
     * @return \Domainrobot\Model\ContactReferenceType[]
     */
    public function getTransferImportedContacts()
    {
        return $this->container['transferImportedContacts'];
    }

    /**
     * Sets transferImportedContacts
     *
     * @param \Domainrobot\Model\ContactReferenceType[] $transferImportedContacts transferImportedContacts
     *
     * @return $this
     */
    public function setTransferImportedContacts($transferImportedContacts)
    {
        $this->container['transferImportedContacts'] = $transferImportedContacts;

        return $this;
    }

    /**
     * Gets registrars
     *
     * @return \Domainrobot\Model\Registrar[]
     */
    public function getRegistrars()
    {
        return $this->container['registrars'];
    }

    /**
     * Sets registrars
     *
     * @param \Domainrobot\Model\Registrar[] $registrars registrars
     *
     * @return $this
     */
    public function setRegistrars($registrars)
    {
        $this->container['registrars'] = $registrars;

        return $this;
    }

    /**
     * Gets autoDelete
     *
     * @return bool
     */
    public function getAutoDelete()
    {
        return $this->container['autoDelete'];
    }

    /**
     * Sets autoDelete
     *
     * @param bool $autoDelete autoDelete
     *
     * @return $this
     */
    public function setAutoDelete($autoDelete)
    {
        $this->container['autoDelete'] = $autoDelete;

        return $this;
    }

    /**
     * Gets documents
     *
     * @return \Domainrobot\Model\Document[]
     */
    public function getDocuments()
    {
        return $this->container['documents'];
    }

    /**
     * Sets documents
     *
     * @param \Domainrobot\Model\Document[] $documents documents
     *
     * @return $this
     */
    public function setDocuments($documents)
    {
        $this->container['documents'] = $documents;

        return $this;
    }

    /**
     * Gets registryLock
     *
     * @return bool
     */
    public function getRegistryLock()
    {
        return $this->container['registryLock'];
    }

    /**
     * Sets registryLock
     *
     * @param bool $registryLock registryLock
     *
     * @return $this
     */
    public function setRegistryLock($registryLock)
    {
        $this->container['registryLock'] = $registryLock;

        return $this;
    }

    /**
     * Gets trusteeTypes
     *
     * @return \Domainrobot\Model\ContactReferenceType[]
     */
    public function getTrusteeTypes()
    {
        return $this->container['trusteeTypes'];
    }

    /**
     * Sets trusteeTypes
     *
     * @param \Domainrobot\Model\ContactReferenceType[] $trusteeTypes trusteeTypes
     *
     * @return $this
     */
    public function setTrusteeTypes($trusteeTypes)
    {
        $this->container['trusteeTypes'] = $trusteeTypes;

        return $this;
    }

    /**
     * Gets sldMin
     *
     * @return int
     */
    public function getSldMin()
    {
        return $this->container['sldMin'];
    }

    /**
     * Sets sldMin
     *
     * @param int $sldMin sldMin
     *
     * @return $this
     */
    public function setSldMin($sldMin)
    {
        $this->container['sldMin'] = $sldMin;

        return $this;
    }

    /**
     * Gets sldMax
     *
     * @return int
     */
    public function getSldMax()
    {
        return $this->container['sldMax'];
    }

    /**
     * Sets sldMax
     *
     * @param int $sldMax sldMax
     *
     * @return $this
     */
    public function setSldMax($sldMax)
    {
        $this->container['sldMax'] = $sldMax;

        return $this;
    }

    /**
     * Gets numeric
     *
     * @return bool
     */
    public function getNumeric()
    {
        return $this->container['numeric'];
    }

    /**
     * Sets numeric
     *
     * @param bool $numeric numeric
     *
     * @return $this
     */
    public function setNumeric($numeric)
    {
        $this->container['numeric'] = $numeric;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
    
    /**
     * @param boolean $removeEmptyValues [remove all empty values if true]
     * @param array $retrieveKeys [list of keys to get back in any case]
     * 
     * Examples:
     * toArray() => returns only non empty values
     * toArray(true) => returns all values
     */
    public function toArray($retrieveAllValues = false){
        $container = $this->container;

        $cleanContainer = [];
        foreach ($container as $key => &$value) {
            if (
                $retrieveAllValues === false && 
                empty($value) === true &&
                $value !== false &&
                $value !== '' &&
                $value !== 0 &&
                $value !== '0'
            ) {
                unset($container[$key]);
                continue;
            }
            
            if (gettype($value) === "object") {
                if(method_exists($value, 'toArray')) {
                    $value = $value->toArray($retrieveAllValues);
                }else{
                    if(get_class($value) === "DateTime"){
                        $value = $value->format("Y-m-d\TH:i:s");
                    }else{
                        $value = (array) $value;
                    }
                }
            }
            if (is_array($value)) {
                foreach ($value as &$v) {
                    if (gettype($v) === "object") {
                        $v = $v->toArray($retrieveAllValues);
                    }
                }
            }
            $cleanContainer[self::$attributeMap[$key]] = $value;
        };
        return $cleanContainer;
    }
}


