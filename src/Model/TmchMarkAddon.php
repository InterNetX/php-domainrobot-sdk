<?php
/**
 * TmchMarkAddon
 *
 * PHP version 5
 *
 * @category Class
 * @package  Domainrobot
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Domainrobot JSON API
 *
 * Domainrobot JSON API for managing: Domains, SSL            Certificates, DNS and            much more.
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.16-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Domainrobot\Model;

use \ArrayAccess;
use \Domainrobot\ObjectSerializer;

/**
 * TmchMarkAddon Class Doc Comment
 *
 * @category Class
 * @package  Domainrobot
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class TmchMarkAddon implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'TmchMarkAddon';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'court_name' => 'string',
        'protection' => '\DateTime',
        'court_protection_country' => 'string',
        'court_reference' => 'string',
        'treaty_title' => 'string',
        'treaty_execution' => '\DateTime',
        'trademark_registration' => '\DateTime',
        'trademark_classification' => 'string',
        'trademark_expire' => '\DateTime',
        'trademark_number' => 'string',
        'trademark_jurisdiction' => 'string',
        'parent_reference' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'court_name' => null,
        'protection' => 'date-time',
        'court_protection_country' => null,
        'court_reference' => null,
        'treaty_title' => null,
        'treaty_execution' => 'date-time',
        'trademark_registration' => 'date-time',
        'trademark_classification' => null,
        'trademark_expire' => 'date-time',
        'trademark_number' => null,
        'trademark_jurisdiction' => null,
        'parent_reference' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'court_name' => 'courtName',
        'protection' => 'protection',
        'court_protection_country' => 'courtProtectionCountry',
        'court_reference' => 'courtReference',
        'treaty_title' => 'treatyTitle',
        'treaty_execution' => 'treatyExecution',
        'trademark_registration' => 'trademarkRegistration',
        'trademark_classification' => 'trademarkClassification',
        'trademark_expire' => 'trademarkExpire',
        'trademark_number' => 'trademarkNumber',
        'trademark_jurisdiction' => 'trademarkJurisdiction',
        'parent_reference' => 'parentReference'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'court_name' => 'setCourtName',
        'protection' => 'setProtection',
        'court_protection_country' => 'setCourtProtectionCountry',
        'court_reference' => 'setCourtReference',
        'treaty_title' => 'setTreatyTitle',
        'treaty_execution' => 'setTreatyExecution',
        'trademark_registration' => 'setTrademarkRegistration',
        'trademark_classification' => 'setTrademarkClassification',
        'trademark_expire' => 'setTrademarkExpire',
        'trademark_number' => 'setTrademarkNumber',
        'trademark_jurisdiction' => 'setTrademarkJurisdiction',
        'parent_reference' => 'setParentReference'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'court_name' => 'getCourtName',
        'protection' => 'getProtection',
        'court_protection_country' => 'getCourtProtectionCountry',
        'court_reference' => 'getCourtReference',
        'treaty_title' => 'getTreatyTitle',
        'treaty_execution' => 'getTreatyExecution',
        'trademark_registration' => 'getTrademarkRegistration',
        'trademark_classification' => 'getTrademarkClassification',
        'trademark_expire' => 'getTrademarkExpire',
        'trademark_number' => 'getTrademarkNumber',
        'trademark_jurisdiction' => 'getTrademarkJurisdiction',
        'parent_reference' => 'getParentReference'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['court_name'] = isset($data['court_name']) ? $this->createData($data['court_name'], 'court_name')  : null;
        $this->container['protection'] = isset($data['protection']) ? $this->createData($data['protection'], 'protection')  : null;
        $this->container['court_protection_country'] = isset($data['court_protection_country']) ? $this->createData($data['court_protection_country'], 'court_protection_country')  : null;
        $this->container['court_reference'] = isset($data['court_reference']) ? $this->createData($data['court_reference'], 'court_reference')  : null;
        $this->container['treaty_title'] = isset($data['treaty_title']) ? $this->createData($data['treaty_title'], 'treaty_title')  : null;
        $this->container['treaty_execution'] = isset($data['treaty_execution']) ? $this->createData($data['treaty_execution'], 'treaty_execution')  : null;
        $this->container['trademark_registration'] = isset($data['trademark_registration']) ? $this->createData($data['trademark_registration'], 'trademark_registration')  : null;
        $this->container['trademark_classification'] = isset($data['trademark_classification']) ? $this->createData($data['trademark_classification'], 'trademark_classification')  : null;
        $this->container['trademark_expire'] = isset($data['trademark_expire']) ? $this->createData($data['trademark_expire'], 'trademark_expire')  : null;
        $this->container['trademark_number'] = isset($data['trademark_number']) ? $this->createData($data['trademark_number'], 'trademark_number')  : null;
        $this->container['trademark_jurisdiction'] = isset($data['trademark_jurisdiction']) ? $this->createData($data['trademark_jurisdiction'], 'trademark_jurisdiction')  : null;
        $this->container['parent_reference'] = isset($data['parent_reference']) ? $this->createData($data['parent_reference'], 'parent_reference')  : null;
    }

    /**
    *
    * @param mixed[] $data
    * @param string $property
    * @return mixed
    */
    public function createData($data = null, $property){
        if($data === null){
            return '';
        }
        $swaggerType = self::$swaggerTypes[$property];

        preg_match("/([\\\\\w\d]+)(\[\])?/", $swaggerType, $matches);

        if(count($matches) > 0 && count($matches) < 3){
            try {
                $reflection = new \ReflectionClass($swaggerType);
                $reflectionInstance = $reflection->newInstance($data);

                return $reflectionInstance;
            }catch(\Exception $ex){
                return $data;
            }
        }else if(count($matches) >= 3){
            $reflectionInstances = [];
            foreach($data as $d){
                try {
                    $reflection = new \ReflectionClass(str_replace("[]", "", $swaggerType) );
                    $reflectionInstances[] = $reflection->newInstance($d);

                    return $reflectionInstances;
                } catch (\Exception $ex) {
                    return $data;
                }
            }
        }

        return $data;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the 
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets court_name
     *
     * @return string
     */
    public function getCourtName()
    {
        return $this->container['court_name'];
    }

    /**
     * Sets court_name
     *
     * @param string $court_name court_name
     *
     * @return $this
     */
    public function setCourtName($court_name)
    {
        $this->container['court_name'] = $court_name;

        return $this;
    }

    /**
     * Gets protection
     *
     * @return \DateTime
     */
    public function getProtection()
    {
        return $this->container['protection'];
    }

    /**
     * Sets protection
     *
     * @param \DateTime $protection protection
     *
     * @return $this
     */
    public function setProtection($protection)
    {
        $this->container['protection'] = $protection;

        return $this;
    }

    /**
     * Gets court_protection_country
     *
     * @return string
     */
    public function getCourtProtectionCountry()
    {
        return $this->container['court_protection_country'];
    }

    /**
     * Sets court_protection_country
     *
     * @param string $court_protection_country court_protection_country
     *
     * @return $this
     */
    public function setCourtProtectionCountry($court_protection_country)
    {
        $this->container['court_protection_country'] = $court_protection_country;

        return $this;
    }

    /**
     * Gets court_reference
     *
     * @return string
     */
    public function getCourtReference()
    {
        return $this->container['court_reference'];
    }

    /**
     * Sets court_reference
     *
     * @param string $court_reference court_reference
     *
     * @return $this
     */
    public function setCourtReference($court_reference)
    {
        $this->container['court_reference'] = $court_reference;

        return $this;
    }

    /**
     * Gets treaty_title
     *
     * @return string
     */
    public function getTreatyTitle()
    {
        return $this->container['treaty_title'];
    }

    /**
     * Sets treaty_title
     *
     * @param string $treaty_title treaty_title
     *
     * @return $this
     */
    public function setTreatyTitle($treaty_title)
    {
        $this->container['treaty_title'] = $treaty_title;

        return $this;
    }

    /**
     * Gets treaty_execution
     *
     * @return \DateTime
     */
    public function getTreatyExecution()
    {
        return $this->container['treaty_execution'];
    }

    /**
     * Sets treaty_execution
     *
     * @param \DateTime $treaty_execution treaty_execution
     *
     * @return $this
     */
    public function setTreatyExecution($treaty_execution)
    {
        $this->container['treaty_execution'] = $treaty_execution;

        return $this;
    }

    /**
     * Gets trademark_registration
     *
     * @return \DateTime
     */
    public function getTrademarkRegistration()
    {
        return $this->container['trademark_registration'];
    }

    /**
     * Sets trademark_registration
     *
     * @param \DateTime $trademark_registration trademark_registration
     *
     * @return $this
     */
    public function setTrademarkRegistration($trademark_registration)
    {
        $this->container['trademark_registration'] = $trademark_registration;

        return $this;
    }

    /**
     * Gets trademark_classification
     *
     * @return string
     */
    public function getTrademarkClassification()
    {
        return $this->container['trademark_classification'];
    }

    /**
     * Sets trademark_classification
     *
     * @param string $trademark_classification trademark_classification
     *
     * @return $this
     */
    public function setTrademarkClassification($trademark_classification)
    {
        $this->container['trademark_classification'] = $trademark_classification;

        return $this;
    }

    /**
     * Gets trademark_expire
     *
     * @return \DateTime
     */
    public function getTrademarkExpire()
    {
        return $this->container['trademark_expire'];
    }

    /**
     * Sets trademark_expire
     *
     * @param \DateTime $trademark_expire trademark_expire
     *
     * @return $this
     */
    public function setTrademarkExpire($trademark_expire)
    {
        $this->container['trademark_expire'] = $trademark_expire;

        return $this;
    }

    /**
     * Gets trademark_number
     *
     * @return string
     */
    public function getTrademarkNumber()
    {
        return $this->container['trademark_number'];
    }

    /**
     * Sets trademark_number
     *
     * @param string $trademark_number trademark_number
     *
     * @return $this
     */
    public function setTrademarkNumber($trademark_number)
    {
        $this->container['trademark_number'] = $trademark_number;

        return $this;
    }

    /**
     * Gets trademark_jurisdiction
     *
     * @return string
     */
    public function getTrademarkJurisdiction()
    {
        return $this->container['trademark_jurisdiction'];
    }

    /**
     * Sets trademark_jurisdiction
     *
     * @param string $trademark_jurisdiction trademark_jurisdiction
     *
     * @return $this
     */
    public function setTrademarkJurisdiction($trademark_jurisdiction)
    {
        $this->container['trademark_jurisdiction'] = $trademark_jurisdiction;

        return $this;
    }

    /**
     * Gets parent_reference
     *
     * @return string
     */
    public function getParentReference()
    {
        return $this->container['parent_reference'];
    }

    /**
     * Sets parent_reference
     *
     * @param string $parent_reference parent_reference
     *
     * @return $this
     */
    public function setParentReference($parent_reference)
    {
        $this->container['parent_reference'] = $parent_reference;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
    
    /**
     * @param boolean $removeEmptyValues [remove all empty values if true]
     * @param array $retrieveKeys [list of keys to get back in any case]
     * 
     * Examples:
     * toArray() => returns only non empty values
     * toArray(true) => returns all values
     */
    public function toArray($retrieveAllValues = false){
        $container = $this->container;
        foreach ($container as $key => &$value) {
            if (!$retrieveAllValues && empty($value)) {
                unset($container[$key]);
                continue;
            }
            
            if (gettype($value) === "object") {
                if(method_exists($value, 'toArray')) {
                    $value = $value->toArray();
                }else{
                    if(get_class($value) === "DateTime"){
                        $value = $value->format("Y-m-d\TH:i:s");
                    }else{
                        $value = (array) $value;
                    }
                }
            }
            if (is_array($value)) {
                foreach ($value as &$v) {
                    if (gettype($v) === "object") {
                        $v = $v->toArray();
                    }
                }
            }
        };
        return $container;
    }
}


