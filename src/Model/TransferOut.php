<?php
/**
 * TransferOut
 *
 * PHP version 5
 *
 * @category Class
 * @package  Domainrobot
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Domainrobot JSON API
 *
 * Domainrobot JSON API for managing: Domains, SSL            Certificates, DNS and            much more.
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.16-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Domainrobot\Model;

use \ArrayAccess;
use \Domainrobot\ObjectSerializer;

/**
 * TransferOut Class Doc Comment
 *
 * @category Class
 * @package  Domainrobot
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class TransferOut implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'TransferOut';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'created' => '\DateTime',
        'updated' => '\DateTime',
        'owner' => '\Domainrobot\Model\BasicUser',
        'updater' => '\Domainrobot\Model\BasicUser',
        'domain' => 'string',
        'gaining_registrar' => 'string',
        'loosing_registrar' => 'string',
        'start' => '\DateTime',
        'reminder' => '\DateTime',
        'auto_ack' => '\DateTime',
        'auto_nack' => '\DateTime',
        'end' => '\DateTime',
        'auto_answer' => 'bool',
        'recipient' => 'string',
        'mailserver' => 'string',
        'delivered_mailserver' => 'string',
        'delivered' => '\DateTime',
        'transaction' => 'string',
        'type' => '\Domainrobot\Model\TransferAnswer',
        'nack_reason' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'created' => 'date-time',
        'updated' => 'date-time',
        'owner' => null,
        'updater' => null,
        'domain' => null,
        'gaining_registrar' => null,
        'loosing_registrar' => null,
        'start' => 'date-time',
        'reminder' => 'date-time',
        'auto_ack' => 'date-time',
        'auto_nack' => 'date-time',
        'end' => 'date-time',
        'auto_answer' => null,
        'recipient' => null,
        'mailserver' => null,
        'delivered_mailserver' => null,
        'delivered' => 'date-time',
        'transaction' => null,
        'type' => null,
        'nack_reason' => 'int32'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'created' => 'created',
        'updated' => 'updated',
        'owner' => 'owner',
        'updater' => 'updater',
        'domain' => 'domain',
        'gaining_registrar' => 'gainingRegistrar',
        'loosing_registrar' => 'loosingRegistrar',
        'start' => 'start',
        'reminder' => 'reminder',
        'auto_ack' => 'autoAck',
        'auto_nack' => 'autoNack',
        'end' => 'end',
        'auto_answer' => 'autoAnswer',
        'recipient' => 'recipient',
        'mailserver' => 'mailserver',
        'delivered_mailserver' => 'deliveredMailserver',
        'delivered' => 'delivered',
        'transaction' => 'transaction',
        'type' => 'type',
        'nack_reason' => 'nackReason'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'created' => 'setCreated',
        'updated' => 'setUpdated',
        'owner' => 'setOwner',
        'updater' => 'setUpdater',
        'domain' => 'setDomain',
        'gaining_registrar' => 'setGainingRegistrar',
        'loosing_registrar' => 'setLoosingRegistrar',
        'start' => 'setStart',
        'reminder' => 'setReminder',
        'auto_ack' => 'setAutoAck',
        'auto_nack' => 'setAutoNack',
        'end' => 'setEnd',
        'auto_answer' => 'setAutoAnswer',
        'recipient' => 'setRecipient',
        'mailserver' => 'setMailserver',
        'delivered_mailserver' => 'setDeliveredMailserver',
        'delivered' => 'setDelivered',
        'transaction' => 'setTransaction',
        'type' => 'setType',
        'nack_reason' => 'setNackReason'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'created' => 'getCreated',
        'updated' => 'getUpdated',
        'owner' => 'getOwner',
        'updater' => 'getUpdater',
        'domain' => 'getDomain',
        'gaining_registrar' => 'getGainingRegistrar',
        'loosing_registrar' => 'getLoosingRegistrar',
        'start' => 'getStart',
        'reminder' => 'getReminder',
        'auto_ack' => 'getAutoAck',
        'auto_nack' => 'getAutoNack',
        'end' => 'getEnd',
        'auto_answer' => 'getAutoAnswer',
        'recipient' => 'getRecipient',
        'mailserver' => 'getMailserver',
        'delivered_mailserver' => 'getDeliveredMailserver',
        'delivered' => 'getDelivered',
        'transaction' => 'getTransaction',
        'type' => 'getType',
        'nack_reason' => 'getNackReason'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['created'] = isset($data['created']) ? $this->createData($data['created'], 'created')  : null;
        $this->container['updated'] = isset($data['updated']) ? $this->createData($data['updated'], 'updated')  : null;
        $this->container['owner'] = isset($data['owner']) ? $this->createData($data['owner'], 'owner')  : null;
        $this->container['updater'] = isset($data['updater']) ? $this->createData($data['updater'], 'updater')  : null;
        $this->container['domain'] = isset($data['domain']) ? $this->createData($data['domain'], 'domain')  : null;
        $this->container['gaining_registrar'] = isset($data['gaining_registrar']) ? $this->createData($data['gaining_registrar'], 'gaining_registrar')  : null;
        $this->container['loosing_registrar'] = isset($data['loosing_registrar']) ? $this->createData($data['loosing_registrar'], 'loosing_registrar')  : null;
        $this->container['start'] = isset($data['start']) ? $this->createData($data['start'], 'start')  : null;
        $this->container['reminder'] = isset($data['reminder']) ? $this->createData($data['reminder'], 'reminder')  : null;
        $this->container['auto_ack'] = isset($data['auto_ack']) ? $this->createData($data['auto_ack'], 'auto_ack')  : null;
        $this->container['auto_nack'] = isset($data['auto_nack']) ? $this->createData($data['auto_nack'], 'auto_nack')  : null;
        $this->container['end'] = isset($data['end']) ? $this->createData($data['end'], 'end')  : null;
        $this->container['auto_answer'] = isset($data['auto_answer']) ? $this->createData($data['auto_answer'], 'auto_answer')  : null;
        $this->container['recipient'] = isset($data['recipient']) ? $this->createData($data['recipient'], 'recipient')  : null;
        $this->container['mailserver'] = isset($data['mailserver']) ? $this->createData($data['mailserver'], 'mailserver')  : null;
        $this->container['delivered_mailserver'] = isset($data['delivered_mailserver']) ? $this->createData($data['delivered_mailserver'], 'delivered_mailserver')  : null;
        $this->container['delivered'] = isset($data['delivered']) ? $this->createData($data['delivered'], 'delivered')  : null;
        $this->container['transaction'] = isset($data['transaction']) ? $this->createData($data['transaction'], 'transaction')  : null;
        $this->container['type'] = isset($data['type']) ? $this->createData($data['type'], 'type')  : null;
        $this->container['nack_reason'] = isset($data['nack_reason']) ? $this->createData($data['nack_reason'], 'nack_reason')  : null;
    }

    /**
    *
    * @param mixed[] $data
    * @param string $property
    * @return mixed
    */
    public function createData($data = null, $property){
        if($data === null){
            return '';
        }
        $swaggerType = self::$swaggerTypes[$property];

        preg_match("/([\\\\\w\d]+)(\[\])?/", $swaggerType, $matches);

        if(count($matches) > 0 && count($matches) < 3){
            try {
                $reflection = new \ReflectionClass($swaggerType);
                $reflectionInstance = $reflection->newInstance($data);

                return $reflectionInstance;
            }catch(\Exception $ex){
                return $data;
            }
        }else if(count($matches) >= 3){
            $reflectionInstances = [];
            foreach($data as $d){
                try {
                    $reflection = new \ReflectionClass(str_replace("[]", "", $swaggerType) );
                    $reflectionInstances[] = $reflection->newInstance($d);

                    return $reflectionInstances;
                } catch (\Exception $ex) {
                    return $data;
                }
            }
        }

        return $data;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['domain'] === null) {
            $invalidProperties[] = "'domain' can't be null";
        }
        if ($this->container['type'] === null) {
            $invalidProperties[] = "'type' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the 
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets created
     *
     * @return \DateTime
     */
    public function getCreated()
    {
        return $this->container['created'];
    }

    /**
     * Sets created
     *
     * @param \DateTime $created The created date.
     *
     * @return $this
     */
    public function setCreated($created)
    {
        $this->container['created'] = $created;

        return $this;
    }

    /**
     * Gets updated
     *
     * @return \DateTime
     */
    public function getUpdated()
    {
        return $this->container['updated'];
    }

    /**
     * Sets updated
     *
     * @param \DateTime $updated The updated date.
     *
     * @return $this
     */
    public function setUpdated($updated)
    {
        $this->container['updated'] = $updated;

        return $this;
    }

    /**
     * Gets owner
     *
     * @return \Domainrobot\Model\BasicUser
     */
    public function getOwner()
    {
        return $this->container['owner'];
    }

    /**
     * Sets owner
     *
     * @param \Domainrobot\Model\BasicUser $owner The owner of the object.
     *
     * @return $this
     */
    public function setOwner($owner)
    {
        $this->container['owner'] = $owner;

        return $this;
    }

    /**
     * Gets updater
     *
     * @return \Domainrobot\Model\BasicUser
     */
    public function getUpdater()
    {
        return $this->container['updater'];
    }

    /**
     * Sets updater
     *
     * @param \Domainrobot\Model\BasicUser $updater The updating user of the object.
     *
     * @return $this
     */
    public function setUpdater($updater)
    {
        $this->container['updater'] = $updater;

        return $this;
    }

    /**
     * Gets domain
     *
     * @return string
     */
    public function getDomain()
    {
        return $this->container['domain'];
    }

    /**
     * Sets domain
     *
     * @param string $domain The domain name.
     *
     * @return $this
     */
    public function setDomain($domain)
    {
        $this->container['domain'] = $domain;

        return $this;
    }

    /**
     * Gets gaining_registrar
     *
     * @return string
     */
    public function getGainingRegistrar()
    {
        return $this->container['gaining_registrar'];
    }

    /**
     * Sets gaining_registrar
     *
     * @param string $gaining_registrar The gaining registrar.
     *
     * @return $this
     */
    public function setGainingRegistrar($gaining_registrar)
    {
        $this->container['gaining_registrar'] = $gaining_registrar;

        return $this;
    }

    /**
     * Gets loosing_registrar
     *
     * @return string
     */
    public function getLoosingRegistrar()
    {
        return $this->container['loosing_registrar'];
    }

    /**
     * Sets loosing_registrar
     *
     * @param string $loosing_registrar The loosing registrar.
     *
     * @return $this
     */
    public function setLoosingRegistrar($loosing_registrar)
    {
        $this->container['loosing_registrar'] = $loosing_registrar;

        return $this;
    }

    /**
     * Gets start
     *
     * @return \DateTime
     */
    public function getStart()
    {
        return $this->container['start'];
    }

    /**
     * Sets start
     *
     * @param \DateTime $start The start date.
     *
     * @return $this
     */
    public function setStart($start)
    {
        $this->container['start'] = $start;

        return $this;
    }

    /**
     * Gets reminder
     *
     * @return \DateTime
     */
    public function getReminder()
    {
        return $this->container['reminder'];
    }

    /**
     * Sets reminder
     *
     * @param \DateTime $reminder The reminder date.
     *
     * @return $this
     */
    public function setReminder($reminder)
    {
        $this->container['reminder'] = $reminder;

        return $this;
    }

    /**
     * Gets auto_ack
     *
     * @return \DateTime
     */
    public function getAutoAck()
    {
        return $this->container['auto_ack'];
    }

    /**
     * Sets auto_ack
     *
     * @param \DateTime $auto_ack The auto ack date.
     *
     * @return $this
     */
    public function setAutoAck($auto_ack)
    {
        $this->container['auto_ack'] = $auto_ack;

        return $this;
    }

    /**
     * Gets auto_nack
     *
     * @return \DateTime
     */
    public function getAutoNack()
    {
        return $this->container['auto_nack'];
    }

    /**
     * Sets auto_nack
     *
     * @param \DateTime $auto_nack The auto nack date.
     *
     * @return $this
     */
    public function setAutoNack($auto_nack)
    {
        $this->container['auto_nack'] = $auto_nack;

        return $this;
    }

    /**
     * Gets end
     *
     * @return \DateTime
     */
    public function getEnd()
    {
        return $this->container['end'];
    }

    /**
     * Sets end
     *
     * @param \DateTime $end The end date.
     *
     * @return $this
     */
    public function setEnd($end)
    {
        $this->container['end'] = $end;

        return $this;
    }

    /**
     * Gets auto_answer
     *
     * @return bool
     */
    public function getAutoAnswer()
    {
        return $this->container['auto_answer'];
    }

    /**
     * Sets auto_answer
     *
     * @param bool $auto_answer Autoanswer active.
     *
     * @return $this
     */
    public function setAutoAnswer($auto_answer)
    {
        $this->container['auto_answer'] = $auto_answer;

        return $this;
    }

    /**
     * Gets recipient
     *
     * @return string
     */
    public function getRecipient()
    {
        return $this->container['recipient'];
    }

    /**
     * Sets recipient
     *
     * @param string $recipient The recipient.
     *
     * @return $this
     */
    public function setRecipient($recipient)
    {
        $this->container['recipient'] = $recipient;

        return $this;
    }

    /**
     * Gets mailserver
     *
     * @return string
     */
    public function getMailserver()
    {
        return $this->container['mailserver'];
    }

    /**
     * Sets mailserver
     *
     * @param string $mailserver The mailserver.
     *
     * @return $this
     */
    public function setMailserver($mailserver)
    {
        $this->container['mailserver'] = $mailserver;

        return $this;
    }

    /**
     * Gets delivered_mailserver
     *
     * @return string
     */
    public function getDeliveredMailserver()
    {
        return $this->container['delivered_mailserver'];
    }

    /**
     * Sets delivered_mailserver
     *
     * @param string $delivered_mailserver The delivered mailserver.
     *
     * @return $this
     */
    public function setDeliveredMailserver($delivered_mailserver)
    {
        $this->container['delivered_mailserver'] = $delivered_mailserver;

        return $this;
    }

    /**
     * Gets delivered
     *
     * @return \DateTime
     */
    public function getDelivered()
    {
        return $this->container['delivered'];
    }

    /**
     * Sets delivered
     *
     * @param \DateTime $delivered The delivered date.
     *
     * @return $this
     */
    public function setDelivered($delivered)
    {
        $this->container['delivered'] = $delivered;

        return $this;
    }

    /**
     * Gets transaction
     *
     * @return string
     */
    public function getTransaction()
    {
        return $this->container['transaction'];
    }

    /**
     * Sets transaction
     *
     * @param string $transaction The ctid.
     *
     * @return $this
     */
    public function setTransaction($transaction)
    {
        $this->container['transaction'] = $transaction;

        return $this;
    }

    /**
     * Gets type
     *
     * @return \Domainrobot\Model\TransferAnswer
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param \Domainrobot\Model\TransferAnswer $type The type of the transfer.
     *
     * @return $this
     */
    public function setType($type)
    {
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets nack_reason
     *
     * @return int
     */
    public function getNackReason()
    {
        return $this->container['nack_reason'];
    }

    /**
     * Sets nack_reason
     *
     * @param int $nack_reason The reason.
     *
     * @return $this
     */
    public function setNackReason($nack_reason)
    {
        $this->container['nack_reason'] = $nack_reason;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
    
    /**
     * @param boolean $removeEmptyValues [remove all empty values if true]
     * @param array $retrieveKeys [list of keys to get back in any case]
     * 
     * Examples:
     * toArray() => returns only non empty values
     * toArray(true) => returns all values
     */
    public function toArray($retrieveAllValues = false){
        $container = $this->container;
        foreach ($container as $key => &$value) {
            if (!$retrieveAllValues && empty($value)) {
                unset($container[$key]);
                continue;
            }
            
            if (gettype($value) === "object") {
                if(method_exists($value, 'toArray')) {
                    $value = $value->toArray();
                }else{
                    if(get_class($value) === "DateTime"){
                        $value = $value->format("Y-m-d\TH:i:s");
                    }else{
                        $value = (array) $value;
                    }
                }
            }
            if (is_array($value)) {
                foreach ($value as &$v) {
                    if (gettype($v) === "object") {
                        $v = $v->toArray();
                    }
                }
            }
        };
        return $container;
    }
}


