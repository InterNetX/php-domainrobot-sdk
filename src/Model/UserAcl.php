<?php
/**
 * UserAcl
 *
 * PHP version 5
 *
 * @category Class
 * @package  Domainrobot
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Domainrobot JSON API
 *
 * Domainrobot JSON API for managing: Domains, SSL            Certificates, DNS and            much more.
 *
 * OpenAPI spec version: v1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.16-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Domainrobot\Model;

use \ArrayAccess;
use \Domainrobot\ObjectSerializer;

/**
 * UserAcl Class Doc Comment
 *
 * @category Class
 * @package  Domainrobot
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class UserAcl implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'UserAcl';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'function_code' => 'string',
        'children' => '\Domainrobot\Model\BasicUser[]',
        'children_locked' => 'bool',
        'user_locked' => 'bool',
        'effective' => 'bool',
        'children_rem' => '\Domainrobot\Model\BasicUser[]',
        'children_add' => '\Domainrobot\Model\BasicUser[]',
        'restriction' => '\Domainrobot\Model\ACLRestriction'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'function_code' => null,
        'children' => null,
        'children_locked' => null,
        'user_locked' => null,
        'effective' => null,
        'children_rem' => null,
        'children_add' => null,
        'restriction' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'function_code' => 'functionCode',
        'children' => 'children',
        'children_locked' => 'childrenLocked',
        'user_locked' => 'userLocked',
        'effective' => 'effective',
        'children_rem' => 'childrenRem',
        'children_add' => 'childrenAdd',
        'restriction' => 'restriction'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'function_code' => 'setFunctionCode',
        'children' => 'setChildren',
        'children_locked' => 'setChildrenLocked',
        'user_locked' => 'setUserLocked',
        'effective' => 'setEffective',
        'children_rem' => 'setChildrenRem',
        'children_add' => 'setChildrenAdd',
        'restriction' => 'setRestriction'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'function_code' => 'getFunctionCode',
        'children' => 'getChildren',
        'children_locked' => 'getChildrenLocked',
        'user_locked' => 'getUserLocked',
        'effective' => 'getEffective',
        'children_rem' => 'getChildrenRem',
        'children_add' => 'getChildrenAdd',
        'restriction' => 'getRestriction'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['function_code'] = isset($data['function_code']) ? $this->createData($data['function_code'], 'function_code')  : null;
        $this->container['children'] = isset($data['children']) ? $this->createData($data['children'], 'children')  : null;
        $this->container['children_locked'] = isset($data['children_locked']) ? $this->createData($data['children_locked'], 'children_locked')  : null;
        $this->container['user_locked'] = isset($data['user_locked']) ? $this->createData($data['user_locked'], 'user_locked')  : null;
        $this->container['effective'] = isset($data['effective']) ? $this->createData($data['effective'], 'effective')  : null;
        $this->container['children_rem'] = isset($data['children_rem']) ? $this->createData($data['children_rem'], 'children_rem')  : null;
        $this->container['children_add'] = isset($data['children_add']) ? $this->createData($data['children_add'], 'children_add')  : null;
        $this->container['restriction'] = isset($data['restriction']) ? $this->createData($data['restriction'], 'restriction')  : null;
    }

    /**
    *
    * @param mixed[] $data
    * @param string $property
    * @return mixed
    */
    public function createData($data = null, $property){
        if($data === null){
            return '';
        }
        $swaggerType = self::$swaggerTypes[$property];

        preg_match("/([\\\\\w\d]+)(\[\])?/", $swaggerType, $matches);

        if(count($matches) > 0 && count($matches) < 3){
            try {
                $reflection = new \ReflectionClass($swaggerType);
                $reflectionInstance = $reflection->newInstance($data);

                return $reflectionInstance;
            }catch(\Exception $ex){
                return $data;
            }
        }else if(count($matches) >= 3){
            $reflectionInstances = [];
            foreach($data as $d){
                try {
                    $reflection = new \ReflectionClass(str_replace("[]", "", $swaggerType) );
                    $reflectionInstances[] = $reflection->newInstance($d);

                    return $reflectionInstances;
                } catch (\Exception $ex) {
                    return $data;
                }
            }
        }

        return $data;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the 
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets function_code
     *
     * @return string
     */
    public function getFunctionCode()
    {
        return $this->container['function_code'];
    }

    /**
     * Sets function_code
     *
     * @param string $function_code The function code to restrict
     *
     * @return $this
     */
    public function setFunctionCode($function_code)
    {
        $this->container['function_code'] = $function_code;

        return $this;
    }

    /**
     * Gets children
     *
     * @return \Domainrobot\Model\BasicUser[]
     */
    public function getChildren()
    {
        return $this->container['children'];
    }

    /**
     * Sets children
     *
     * @param \Domainrobot\Model\BasicUser[] $children The none locked children
     *
     * @return $this
     */
    public function setChildren($children)
    {
        $this->container['children'] = $children;

        return $this;
    }

    /**
     * Gets children_locked
     *
     * @return bool
     */
    public function getChildrenLocked()
    {
        return $this->container['children_locked'];
    }

    /**
     * Sets children_locked
     *
     * @param bool $children_locked The children lock
     *
     * @return $this
     */
    public function setChildrenLocked($children_locked)
    {
        $this->container['children_locked'] = $children_locked;

        return $this;
    }

    /**
     * Gets user_locked
     *
     * @return bool
     */
    public function getUserLocked()
    {
        return $this->container['user_locked'];
    }

    /**
     * Sets user_locked
     *
     * @param bool $user_locked The user lock
     *
     * @return $this
     */
    public function setUserLocked($user_locked)
    {
        $this->container['user_locked'] = $user_locked;

        return $this;
    }

    /**
     * Gets effective
     *
     * @return bool
     */
    public function getEffective()
    {
        return $this->container['effective'];
    }

    /**
     * Sets effective
     *
     * @param bool $effective The current active lock for the user
     *
     * @return $this
     */
    public function setEffective($effective)
    {
        $this->container['effective'] = $effective;

        return $this;
    }

    /**
     * Gets children_rem
     *
     * @return \Domainrobot\Model\BasicUser[]
     */
    public function getChildrenRem()
    {
        return $this->container['children_rem'];
    }

    /**
     * Sets children_rem
     *
     * @param \Domainrobot\Model\BasicUser[] $children_rem Children to remove from the exception list
     *
     * @return $this
     */
    public function setChildrenRem($children_rem)
    {
        $this->container['children_rem'] = $children_rem;

        return $this;
    }

    /**
     * Gets children_add
     *
     * @return \Domainrobot\Model\BasicUser[]
     */
    public function getChildrenAdd()
    {
        return $this->container['children_add'];
    }

    /**
     * Sets children_add
     *
     * @param \Domainrobot\Model\BasicUser[] $children_add Children to add to the exception list
     *
     * @return $this
     */
    public function setChildrenAdd($children_add)
    {
        $this->container['children_add'] = $children_add;

        return $this;
    }

    /**
     * Gets restriction
     *
     * @return \Domainrobot\Model\ACLRestriction
     */
    public function getRestriction()
    {
        return $this->container['restriction'];
    }

    /**
     * Sets restriction
     *
     * @param \Domainrobot\Model\ACLRestriction $restriction The human readable restriction mode
     *
     * @return $this
     */
    public function setRestriction($restriction)
    {
        $this->container['restriction'] = $restriction;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
    
    /**
     * @param boolean $removeEmptyValues [remove all empty values if true]
     * @param array $retrieveKeys [list of keys to get back in any case]
     * 
     * Examples:
     * toArray() => returns only non empty values
     * toArray(true) => returns all values
     */
    public function toArray($retrieveAllValues = false){
        $container = $this->container;
        foreach ($container as $key => &$value) {
            if (!$retrieveAllValues && empty($value)) {
                unset($container[$key]);
                continue;
            }
            
            if (gettype($value) === "object") {
                if(method_exists($value, 'toArray')) {
                    $value = $value->toArray();
                }else{
                    if(get_class($value) === "DateTime"){
                        $value = $value->format("Y-m-d\TH:i:s");
                    }else{
                        $value = (array) $value;
                    }
                }
            }
            if (is_array($value)) {
                foreach ($value as &$v) {
                    if (gettype($v) === "object") {
                        $v = $v->toArray();
                    }
                }
            }
        };
        return $container;
    }
}


